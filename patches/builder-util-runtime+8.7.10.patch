diff --git a/node_modules/builder-util-runtime/out/httpExecutor.js b/node_modules/builder-util-runtime/out/httpExecutor.js
index f283a46..50fba71 100644
--- a/node_modules/builder-util-runtime/out/httpExecutor.js
+++ b/node_modules/builder-util-runtime/out/httpExecutor.js
@@ -40,6 +40,10 @@ class HttpError extends Error {
         this.name = "HttpError";
         this.code = `HTTP_ERROR_${statusCode}`;
     }
+    // Check if 500 error
+    isServerError() {
+        return this.statusCode % 500 <= 99;
+    }
 }
 exports.HttpError = HttpError;
 function parseJson(result) {
@@ -52,11 +56,20 @@ class HttpExecutor {
     }
     request(options, cancellationToken = new CancellationToken_1.CancellationToken(), data) {
         configureRequestOptions(options);
-        const encodedData = data == null ? undefined : Buffer.from(JSON.stringify(data));
+        const json = data == null ? undefined : JSON.stringify(data);
+        const encodedData = json ? Buffer.from(json) : undefined;
         if (encodedData != null) {
-            options.method = "post";
-            options.headers["Content-Type"] = "application/json";
-            options.headers["Content-Length"] = encodedData.length;
+            debug(json);
+            const { headers, ...opts } = options;
+            options = {
+                method: "post",
+                headers: {
+                    "Content-Type": "application/json",
+                    "Content-Length": encodedData.length,
+                    ...headers,
+                },
+                ...opts,
+            };
         }
         return this.doApiRequest(options, cancellationToken, it => {
             ;
@@ -105,7 +118,7 @@ class HttpExecutor {
             // error is clear, we don't need to read detailed error description
             reject(createHttpError(response, `method: ${options.method || "GET"} url: ${options.protocol || "https:"}//${options.hostname}${options.port ? `:${options.port}` : ""}${options.path}
 
-Please double check that your authentication token is correct. Due to security reasons actual status maybe not reported, but 404.
+Please double check that your authentication token is correct. Due to security reasons, actual status maybe not reported, but 404.
 `));
             return;
         }
@@ -132,7 +145,11 @@ Please double check that your authentication token is correct. Due to security r
                 if (response.statusCode != null && response.statusCode >= 400) {
                     const contentType = safeGetHeader(response, "content-type");
                     const isJson = contentType != null && (Array.isArray(contentType) ? contentType.find(it => it.includes("json")) != null : contentType.includes("json"));
-                    reject(createHttpError(response, isJson ? JSON.parse(data) : data));
+                    reject(createHttpError(response, `method: ${options.method || "GET"} url: ${options.protocol || "https:"}//${options.hostname}${options.port ? `:${options.port}` : ""}${options.path}
+
+          Data:
+          ${isJson ? JSON.stringify(JSON.parse(data)) : data}
+          `));
                 }
                 else {
                     resolve(data.length === 0 ? null : data);
@@ -254,7 +271,7 @@ Please double check that your authentication token is correct. Due to security r
     static prepareRedirectUrlOptions(redirectUrl, options) {
         const newOptions = configureRequestOptionsFromUrl(redirectUrl, { ...options });
         const headers = newOptions.headers;
-        if (headers != null && headers.authorization != null && headers.authorization.startsWith("token")) {
+        if (headers === null || headers === void 0 ? void 0 : headers.authorization) {
             const parsedNewUrl = new url_1.URL(redirectUrl);
             if (parsedNewUrl.hostname.endsWith(".amazonaws.com") || parsedNewUrl.searchParams.has("X-Amz-Credential")) {
                 delete headers.authorization;
@@ -262,6 +279,19 @@ Please double check that your authentication token is correct. Due to security r
         }
         return newOptions;
     }
+    static retryOnServerError(task, maxRetries = 3) {
+        for (let attemptNumber = 0;; attemptNumber++) {
+            try {
+                return task();
+            }
+            catch (e) {
+                if (attemptNumber < maxRetries && ((e instanceof HttpError && e.isServerError()) || e.code === "EPIPE")) {
+                    continue;
+                }
+                throw e;
+            }
+        }
+    }
 }
 exports.HttpExecutor = HttpExecutor;
 function configureRequestOptionsFromUrl(url, options) {
@@ -389,7 +419,7 @@ function configureRequestOptions(options, token, method) {
     const headers = options.headers;
     if (token != null) {
         ;
-        headers.authorization = token.startsWith("Basic") ? token : `token ${token}`;
+        headers.authorization = token.startsWith("Basic") || token.startsWith("Bearer") ? token : `token ${token}`;
     }
     if (headers["User-Agent"] == null) {
         headers["User-Agent"] = "electron-builder";
@@ -406,7 +436,8 @@ function configureRequestOptions(options, token, method) {
 exports.configureRequestOptions = configureRequestOptions;
 function safeStringifyJson(data, skippedNames) {
     return JSON.stringify(data, (name, value) => {
-        if (name.endsWith("authorization") ||
+        if (name.endsWith("Authorization") ||
+            name.endsWith("authorization") ||
             name.endsWith("Password") ||
             name.endsWith("PASSWORD") ||
             name.endsWith("Token") ||
