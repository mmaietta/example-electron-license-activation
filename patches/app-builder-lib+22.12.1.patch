diff --git a/node_modules/app-builder-lib/out/publish/BintrayPublisher.js b/node_modules/app-builder-lib/out/publish/BintrayPublisher.js
index c63e072..55a9886 100644
--- a/node_modules/app-builder-lib/out/publish/BintrayPublisher.js
+++ b/node_modules/app-builder-lib/out/publish/BintrayPublisher.js
@@ -67,17 +67,9 @@ class BintrayPublisher extends electron_publish_1.HttpPublisher {
         if (this.client.component != null) {
             options.headers["X-Bintray-Debian-Component"] = this.client.component;
         }
-        for (let attemptNumber = 0;; attemptNumber++) {
-            try {
-                return await nodeHttpExecutor_1.httpExecutor.doApiRequest(builder_util_runtime_1.configureRequestOptions(options, this.client.auth), this.context.cancellationToken, requestProcessor);
-            }
-            catch (e) {
-                if (attemptNumber < 3 && ((e instanceof builder_util_runtime_1.HttpError && e.statusCode === 502) || e.code === "EPIPE")) {
-                    continue;
-                }
-                throw e;
-            }
-        }
+        return builder_util_runtime_1.HttpExecutor.retryOnServerError(() => {
+            return nodeHttpExecutor_1.httpExecutor.doApiRequest(builder_util_runtime_1.configureRequestOptions(options, this.client.auth), this.context.cancellationToken, requestProcessor);
+        });
     }
     //noinspection JSUnusedGlobalSymbols
     async deleteRelease(isForce = false) {
diff --git a/node_modules/app-builder-lib/out/publish/KeygenPublisher.js b/node_modules/app-builder-lib/out/publish/KeygenPublisher.js
new file mode 100644
index 0000000..66f1814
--- /dev/null
+++ b/node_modules/app-builder-lib/out/publish/KeygenPublisher.js
@@ -0,0 +1,101 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.KeygenPublisher = void 0;
+const builder_util_1 = require("builder-util");
+const nodeHttpExecutor_1 = require("builder-util/out/nodeHttpExecutor");
+const electron_publish_1 = require("electron-publish");
+const builder_util_runtime_1 = require("builder-util-runtime");
+const path = require("path");
+class KeygenPublisher extends electron_publish_1.HttpPublisher {
+    constructor(context, info, version) {
+        super(context);
+        this.providerName = "keygen";
+        this.hostname = "api.keygen.sh";
+        const token = process.env.KEYGEN_TOKEN;
+        if (builder_util_1.isEmptyOrSpaces(token)) {
+            throw new builder_util_1.InvalidConfigurationError(`Keygen token is not set using env "KEYGEN_TOKEN" (see https://www.electron.build/configuration/publish#KeygenOptions)`);
+        }
+        this.info = info;
+        this.auth = `Bearer ${token.trim()}`;
+        this.version = version;
+        this.basePath = `/v1/accounts/${this.info.account}/releases`;
+    }
+    doUpload(fileName, _arch, dataLength, requestProcessor, 
+    // eslint-disable-next-line @typescript-eslint/no-unused-vars
+    _file) {
+        return builder_util_runtime_1.HttpExecutor.retryOnServerError(async () => {
+            const { data, errors } = await this.upsertRelease(fileName, dataLength);
+            if (errors) {
+                throw new Error(`Keygen - Upserting release returned errors: ${JSON.stringify(errors)}`);
+            }
+            const releaseId = data === null || data === void 0 ? void 0 : data.id;
+            if (!releaseId) {
+                builder_util_1.log.warn({ file: fileName, reason: "UUID doesn't exist and was not created" }, "upserting release failed");
+                throw new Error(`Keygen - Upserting release returned no UUID: ${JSON.stringify(data)}`);
+            }
+            await this.uploadArtifact(releaseId, dataLength, requestProcessor);
+            return releaseId;
+        });
+    }
+    async uploadArtifact(releaseId, dataLength, requestProcessor) {
+        const upload = {
+            hostname: this.hostname,
+            path: `${this.basePath}/${releaseId}/artifact`,
+            headers: {
+                Accept: "application/vnd.api+json",
+                "Content-Length": dataLength,
+            },
+        };
+        await nodeHttpExecutor_1.httpExecutor.doApiRequest(builder_util_runtime_1.configureRequestOptions(upload, this.auth, "PUT"), this.context.cancellationToken, requestProcessor);
+    }
+    async upsertRelease(fileName, dataLength) {
+        const req = {
+            hostname: this.hostname,
+            method: "PUT",
+            path: this.basePath,
+            headers: {
+                "Content-Type": "application/vnd.api+json",
+                Accept: "application/vnd.api+json",
+            },
+        };
+        const data = {
+            data: {
+                type: "release",
+                attributes: {
+                    filename: fileName,
+                    filetype: path.extname(fileName),
+                    filesize: dataLength,
+                    version: this.version,
+                    platform: this.info.platform,
+                    channel: this.info.channel || "stable",
+                },
+                relationships: {
+                    product: {
+                        data: {
+                            type: "product",
+                            id: this.info.product,
+                        },
+                    },
+                },
+            },
+        };
+        builder_util_1.log.debug({ data: JSON.stringify(data) }, "Keygen upsert release");
+        return builder_util_runtime_1.parseJson(nodeHttpExecutor_1.httpExecutor.request(builder_util_runtime_1.configureRequestOptions(req, this.auth, "PUT"), this.context.cancellationToken, data));
+    }
+    async deleteRelease(releaseId) {
+        const req = {
+            hostname: this.hostname,
+            path: `${this.basePath}/${releaseId}`,
+            headers: {
+                Accept: "application/vnd.api+json",
+            },
+        };
+        await nodeHttpExecutor_1.httpExecutor.request(builder_util_runtime_1.configureRequestOptions(req, this.auth, "DELETE"), this.context.cancellationToken);
+    }
+    toString() {
+        const { account, product, platform } = this.info;
+        return `Keygen (account: ${account}, product: ${product}, platform: ${platform}, version: ${this.version})`;
+    }
+}
+exports.KeygenPublisher = KeygenPublisher;
+//# sourceMappingURL=KeygenPublisher.js.map
\ No newline at end of file
diff --git a/node_modules/app-builder-lib/out/publish/PublishManager.js b/node_modules/app-builder-lib/out/publish/PublishManager.js
index 7cf21c4..f4536b7 100644
--- a/node_modules/app-builder-lib/out/publish/PublishManager.js
+++ b/node_modules/app-builder-lib/out/publish/PublishManager.js
@@ -19,6 +19,7 @@ const index_1 = require("../index");
 const macroExpander_1 = require("../util/macroExpander");
 const SnapStorePublisher_1 = require("./SnapStorePublisher");
 const updateInfoBuilder_1 = require("./updateInfoBuilder");
+const KeygenPublisher_1 = require("./KeygenPublisher");
 const publishForPrWarning = "There are serious security concerns with PUBLISH_FOR_PULL_REQUEST=true (see the  CircleCI documentation (https://circleci.com/docs/1.0/fork-pr-builds/) for details)" +
     "\nIf you have SSH keys, sensitive env vars or AWS credentials stored in your project settings and untrusted forks can make pull requests against your repo, then this option isn't for you.";
 const debug = debug_1.default("electron-builder:publish");
@@ -240,6 +241,8 @@ function createPublisher(context, version, publishConfig, options, packager) {
             return new gitHubPublisher_1.GitHubPublisher(context, publishConfig, version, options);
         case "bintray":
             return new BintrayPublisher_1.BintrayPublisher(context, publishConfig, version, options);
+        case "keygen":
+            return new KeygenPublisher_1.KeygenPublisher(context, publishConfig, version);
         case "generic":
             return null;
         case "snapStore":
@@ -259,6 +262,8 @@ function requireProviderClass(provider, packager) {
             return BintrayPublisher_1.BintrayPublisher;
         case "generic":
             return null;
+        case "keygen":
+            return KeygenPublisher_1.KeygenPublisher;
         case "s3":
             return s3Publisher_1.default;
         case "snapStore":
@@ -339,6 +344,9 @@ async function resolvePublishConfigurations(publishers, platformPackager, packag
         else if (!builder_util_1.isEmptyOrSpaces(process.env.BT_TOKEN)) {
             serviceName = "bintray";
         }
+        else if (!builder_util_1.isEmptyOrSpaces(process.env.KEYGEN_TOKEN)) {
+            serviceName = "keygen";
+        }
         if (serviceName != null) {
             builder_util_1.log.debug(null, `detect ${serviceName} as publish provider`);
             return [(await getResolvedPublishConfig(platformPackager, packager, { provider: serviceName }, arch, errorIfCannot))];
@@ -397,6 +405,12 @@ async function getResolvedPublishConfig(platformPackager, packager, options, arc
         await providerClass.checkAndResolveOptions(options, channelFromAppVersion, errorIfCannot);
         return options;
     }
+    if (provider === "keygen") {
+        return {
+            ...options,
+            platform: platformPackager === null || platformPackager === void 0 ? void 0 : platformPackager.platform.name,
+        };
+    }
     const isGithub = provider === "github";
     if (!isGithub && provider !== "bintray") {
         return options;
diff --git a/node_modules/app-builder-lib/out/schema/after-pack-context.jsc.js b/node_modules/app-builder-lib/out/schema/after-pack-context.jsc.js
new file mode 100644
index 0000000..67b1290
--- /dev/null
+++ b/node_modules/app-builder-lib/out/schema/after-pack-context.jsc.js
@@ -0,0 +1,7509 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.default = {
+    type: "object",
+    properties: {
+        outDir: {
+            type: "string",
+        },
+        appOutDir: {
+            type: "string",
+        },
+        packager: {
+            $ref: "#/definitions/PlatformPackager<any>",
+        },
+        electronPlatformName: {
+            type: "string",
+        },
+        arch: {
+            $ref: "#/definitions/Arch",
+        },
+        targets: {
+            type: "array",
+            items: {
+                $ref: "#/definitions/Target",
+            },
+        },
+    },
+    required: ["appOutDir", "arch", "electronPlatformName", "outDir", "packager", "targets"],
+    definitions: {
+        MetadataDirectories: {
+            type: "object",
+            properties: {
+                buildResources: {
+                    description: 'The path to build resources.\n\nPlease note — build resources are not packed into the app. If you need to use some files, e.g. as tray icon, please include required files explicitly: `"files": ["**\\/*", "build/icon.*"]`',
+                    default: "build",
+                    type: ["null", "string"],
+                },
+                output: {
+                    description: "The output directory. [File macros](/file-patterns#file-macros) are supported.",
+                    default: "dist",
+                    type: ["null", "string"],
+                },
+                app: {
+                    description: "The application directory (containing the application package.json), defaults to `app`, `www` or working directory.",
+                    type: ["null", "string"],
+                },
+            },
+        },
+        MacConfiguration: {
+            type: "object",
+            properties: {
+                category: {
+                    description: 'The application category type, as shown in the Finder via *View -> Arrange by Application Category* when viewing the Applications directory.\n\nFor example, `"category": "public.app-category.developer-tools"` will set the application category to *Developer Tools*.\n\nValid values are listed in [Apple\'s documentation](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/LaunchServicesKeys.html#//apple_ref/doc/uid/TP40009250-SW8).',
+                    type: ["null", "string"],
+                },
+                target: {
+                    description: "The target package type: list of `default`, `dmg`, `mas`, `mas-dev`, `pkg`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir`. Defaults to `default` (dmg and zip for Squirrel.Mac).",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/TargetConfiguration",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/TargetConfiguration",
+                                    },
+                                    {
+                                        enum: ["7z", "default", "dir", "dmg", "mas", "mas-dev", "pkg", "tar.bz2", "tar.gz", "tar.lz", "tar.xz", "zip"],
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            enum: ["7z", "default", "dir", "dmg", "mas", "mas-dev", "pkg", "tar.bz2", "tar.gz", "tar.lz", "tar.xz", "zip"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                identity: {
+                    description: "The name of certificate to use when signing. Consider using environment variables [CSC_LINK or CSC_NAME](/code-signing) instead of specifying this option.\nMAS installer identity is specified in the [mas](/configuration/mas).",
+                    type: ["null", "string"],
+                },
+                icon: {
+                    description: "The path to application icon.",
+                    default: "build/icon.icns",
+                    type: ["null", "string"],
+                },
+                entitlements: {
+                    description: "The path to entitlements file for signing the app. `build/entitlements.mac.plist` will be used if exists (it is a recommended way to set).\nMAS entitlements is specified in the [mas](/configuration/mas).",
+                    type: ["null", "string"],
+                },
+                entitlementsInherit: {
+                    description: "The path to child entitlements which inherit the security settings for signing frameworks and bundles of a distribution. `build/entitlements.mac.inherit.plist` will be used if exists (it is a recommended way to set).\nOtherwise [default](https://github.com/electron-userland/electron-osx-sign/blob/master/default.entitlements.darwin.inherit.plist).\n\nThis option only applies when signing with `entitlements` provided.",
+                    type: ["null", "string"],
+                },
+                entitlementsLoginHelper: {
+                    description: "Path to login helper entitlement file.\nWhen using App Sandbox, the the `com.apple.security.inherit` key that is normally in the inherited entitlements cannot be inherited since the login helper is a standalone executable.\nDefaults to the value provided for `entitlements`. This option only applies when signing with `entitlements` provided.",
+                    type: ["null", "string"],
+                },
+                provisioningProfile: {
+                    description: "The path to the provisioning profile to use when signing, absolute or relative to the app root.",
+                    type: ["null", "string"],
+                },
+                bundleVersion: {
+                    description: "The `CFBundleVersion`. Do not use it unless [you need to](https://github.com/electron-userland/electron-builder/issues/565#issuecomment-230678643).",
+                    type: ["null", "string"],
+                },
+                bundleShortVersion: {
+                    description: "The `CFBundleShortVersionString`. Do not use it unless you need to.",
+                    type: ["null", "string"],
+                },
+                darkModeSupport: {
+                    description: "Whether a dark mode is supported. If your app does have a dark mode, you can make your app follow the system-wide dark mode setting.",
+                    default: false,
+                    type: "boolean",
+                },
+                helperBundleId: {
+                    description: "The bundle identifier to use in the application helper's plist.",
+                    default: "${appBundleIdentifier}.helper",
+                    type: ["null", "string"],
+                },
+                helperRendererBundleId: {
+                    description: "The bundle identifier to use in the Renderer helper's plist.",
+                    default: "${appBundleIdentifier}.helper.Renderer",
+                    type: ["null", "string"],
+                },
+                helperPluginBundleId: {
+                    description: "The bundle identifier to use in the Plugin helper's plist.",
+                    default: "${appBundleIdentifier}.helper.Plugin",
+                    type: ["null", "string"],
+                },
+                helperGPUBundleId: {
+                    description: "The bundle identifier to use in the GPU helper's plist.",
+                    default: "${appBundleIdentifier}.helper.GPU",
+                    type: ["null", "string"],
+                },
+                helperEHBundleId: {
+                    description: "The bundle identifier to use in the EH helper's plist.",
+                    default: "${appBundleIdentifier}.helper.EH",
+                    type: ["null", "string"],
+                },
+                helperNPBundleId: {
+                    description: "The bundle identifier to use in the NP helper's plist.",
+                    default: "${appBundleIdentifier}.helper.NP",
+                    type: ["null", "string"],
+                },
+                type: {
+                    description: "Whether to sign app for development or for distribution.",
+                    default: "distribution",
+                    anyOf: [
+                        {
+                            enum: ["development", "distribution"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                extendInfo: {
+                    description: "The extra entries for `Info.plist`.",
+                },
+                binaries: {
+                    description: "Paths of any extra binaries that need to be signed.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                minimumSystemVersion: {
+                    description: "The minimum version of macOS required for the app to run. Corresponds to `LSMinimumSystemVersion`.",
+                    type: ["null", "string"],
+                },
+                requirements: {
+                    description: "Path of [requirements file](https://developer.apple.com/library/mac/documentation/Security/Conceptual/CodeSigningGuide/RequirementLang/RequirementLang.html) used in signing. Not applicable for MAS.",
+                    type: ["null", "string"],
+                },
+                electronLanguages: {
+                    description: "The electron locales. By default Electron locales used as is.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "string",
+                        },
+                    ],
+                },
+                cscInstallerLink: {
+                    type: ["null", "string"],
+                },
+                cscInstallerKeyPassword: {
+                    type: ["null", "string"],
+                },
+                extraDistFiles: {
+                    description: "Extra files to put in archive. Not applicable for `tar.*`.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                hardenedRuntime: {
+                    description: "Whether your app has to be signed with hardened runtime.",
+                    default: true,
+                    type: "boolean",
+                },
+                gatekeeperAssess: {
+                    description: "Whether to let electron-osx-sign validate the signing or not.",
+                    default: false,
+                    type: "boolean",
+                },
+                strictVerify: {
+                    description: "Whether to let electron-osx-sign verify the contents or not.",
+                    default: true,
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["string", "boolean"],
+                        },
+                    ],
+                },
+                signIgnore: {
+                    description: "Regex or an array of regex's that signal skipping signing a file.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                timestamp: {
+                    description: "Specify the URL of the timestamp authority server",
+                    type: ["null", "string"],
+                },
+                appId: {
+                    description: "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
+                    default: "com.electron.${name}",
+                    type: ["null", "string"],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
+                    type: ["null", "string"],
+                },
+                executableName: {
+                    description: "The executable name. Defaults to `productName`.",
+                    type: ["null", "string"],
+                },
+                compression: {
+                    description: "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
+                    default: "normal",
+                    anyOf: [
+                        {
+                            enum: ["maximum", "normal", "store"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                files: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                extraResources: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                extraFiles: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                asar: {
+                    description: "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work.",
+                    default: true,
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/AsarOptions",
+                        },
+                        {
+                            type: ["null", "boolean"],
+                        },
+                    ],
+                },
+                asarUnpack: {
+                    description: "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                fileAssociations: {
+                    description: "The file associations.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileAssociation",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                $ref: "#/definitions/FileAssociation",
+                            },
+                        },
+                    ],
+                },
+                protocols: {
+                    description: "The URL protocol schemes.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/Protocol",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                $ref: "#/definitions/Protocol",
+                            },
+                        },
+                    ],
+                },
+                forceCodeSigning: {
+                    description: "Whether to fail if app will be not code signed.",
+                    type: "boolean",
+                },
+                electronUpdaterCompatibility: {
+                    description: "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                detectUpdateChannel: {
+                    description: "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
+                    default: true,
+                    type: "boolean",
+                },
+                generateUpdatesFilesForAllChannels: {
+                    description: "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
+                    default: false,
+                    type: "boolean",
+                },
+                releaseInfo: {
+                    description: 'The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes="new features"\n```',
+                    $ref: "#/definitions/ReleaseInfo",
+                },
+                cscLink: {
+                    type: ["null", "string"],
+                },
+                cscKeyPassword: {
+                    type: ["null", "string"],
+                },
+                defaultArch: {
+                    type: "string",
+                },
+            },
+        },
+        TargetConfiguration: {
+            type: "object",
+            properties: {
+                target: {
+                    description: "The target name. e.g. `snap`.",
+                    type: "string",
+                },
+                arch: {
+                    description: "The arch or list of archs.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                enum: ["arm64", "armv7l", "ia32", "universal", "x64"],
+                                type: "string",
+                            },
+                        },
+                        {
+                            enum: ["arm64", "armv7l", "ia32", "universal", "x64"],
+                            type: "string",
+                        },
+                    ],
+                },
+            },
+            required: ["target"],
+        },
+        FileSet: {
+            type: "object",
+            properties: {
+                from: {
+                    description: "The source path relative to the project directory.",
+                    type: "string",
+                },
+                to: {
+                    description: "The destination path relative to the app's content directory for `extraFiles` and the app's resource directory for `extraResources`.",
+                    type: "string",
+                },
+                filter: {
+                    description: "The [glob patterns](/file-patterns).",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "string",
+                        },
+                    ],
+                },
+            },
+        },
+        AsarOptions: {
+            type: "object",
+            properties: {
+                smartUnpack: {
+                    description: "Whether to automatically unpack executables files.",
+                    default: true,
+                    type: "boolean",
+                },
+                ordering: {
+                    type: ["null", "string"],
+                },
+                externalAllowed: {
+                    description: "Allows external asar files.",
+                    default: false,
+                    type: "boolean",
+                },
+            },
+        },
+        FileAssociation: {
+            description: "File associations.\n\nmacOS (corresponds to [CFBundleDocumentTypes](https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-101685)) and NSIS only.\n\nOn Windows works only if [nsis.perMachine](https://electron.build/configuration/configuration#NsisOptions-perMachine) is set to `true`.",
+            type: "object",
+            properties: {
+                ext: {
+                    description: "The extension (minus the leading period). e.g. `png`.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "string",
+                        },
+                    ],
+                },
+                name: {
+                    description: "The name. e.g. `PNG`. Defaults to `ext`.",
+                    type: ["null", "string"],
+                },
+                description: {
+                    description: "*windows-only.* The description.",
+                    type: ["null", "string"],
+                },
+                mimeType: {
+                    description: "*linux-only.* The mime-type.",
+                    type: ["null", "string"],
+                },
+                icon: {
+                    description: "The path to icon (`.icns` for MacOS and `.ico` for Windows), relative to `build` (build resources directory). Defaults to `${firstExt}.icns`/`${firstExt}.ico` (if several extensions specified, first is used) or to application icon.\n\nNot supported on Linux, file issue if need (default icon will be `x-office-document`).",
+                    type: ["null", "string"],
+                },
+                role: {
+                    description: "*macOS-only* The app’s role with respect to the type. The value can be `Editor`, `Viewer`, `Shell`, or `None`. Corresponds to `CFBundleTypeRole`.",
+                    default: "Editor",
+                    type: "string",
+                },
+                isPackage: {
+                    description: "*macOS-only* Whether the document is distributed as a bundle. If set to true, the bundle directory is treated as a file. Corresponds to `LSTypeIsPackage`.",
+                    type: "boolean",
+                },
+                rank: {
+                    description: "*macOS-only* The app’s rank with respect to the type. The value can be `Owner`, `Default`, `Alternate`, or `None`. Corresponds to `LSHandlerRank`.",
+                    default: "Default",
+                    type: "string",
+                },
+            },
+            required: ["ext"],
+        },
+        Protocol: {
+            description: "URL Protocol Schemes. Protocols to associate the app with. macOS only.\n\nPlease note — on macOS [you need to register an `open-url` event handler](http://electron.atom.io/docs/api/app/#event-open-url-macos).",
+            type: "object",
+            properties: {
+                name: {
+                    description: "The name. e.g. `IRC server URL`.",
+                    type: "string",
+                },
+                schemes: {
+                    description: 'The schemes. e.g. `["irc", "ircs"]`.',
+                    type: "array",
+                    items: {
+                        type: "string",
+                    },
+                },
+                role: {
+                    description: "*macOS-only* The app’s role with respect to the type.",
+                    default: "Editor",
+                    enum: ["Editor", "None", "Shell", "Viewer"],
+                    type: "string",
+                },
+            },
+            required: ["name", "schemes"],
+        },
+        GithubOptions: {
+            description: "[GitHub](https://help.github.com/articles/about-releases/) options.\n\nGitHub [personal access token](https://help.github.com/articles/creating-an-access-token-for-command-line-use/) is required. You can generate by going to [https://github.com/settings/tokens/new](https://github.com/settings/tokens/new). The access token should have the repo scope/permission.\nDefine `GH_TOKEN` environment variable.",
+            type: "object",
+            properties: {
+                provider: {
+                    description: "The provider. Must be `github`.",
+                    type: "string",
+                    enum: ["github"],
+                },
+                repo: {
+                    description: "The repository name. [Detected automatically](#github-repository-and-bintray-package).",
+                    type: ["null", "string"],
+                },
+                owner: {
+                    description: "The owner.",
+                    type: ["null", "string"],
+                },
+                vPrefixedTagName: {
+                    description: "Whether to use `v`-prefixed tag name.",
+                    default: true,
+                    type: "boolean",
+                },
+                host: {
+                    description: "The host (including the port if need).",
+                    default: "github.com",
+                    type: ["null", "string"],
+                },
+                protocol: {
+                    description: "The protocol. GitHub Publisher supports only `https`.",
+                    default: "https",
+                    anyOf: [
+                        {
+                            enum: ["http", "https"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                token: {
+                    description: "The access token to support auto-update from private github repositories. Never specify it in the configuration files. Only for [setFeedURL](/auto-update#appupdatersetfeedurloptions).",
+                    type: ["null", "string"],
+                },
+                private: {
+                    description: "Whether to use private github auto-update provider if `GH_TOKEN` environment variable is defined. See [Private GitHub Update Repo](/auto-update#private-github-update-repo).",
+                    type: ["null", "boolean"],
+                },
+                releaseType: {
+                    description: "The type of release. By default `draft` release will be created.\n\nAlso you can set release type using environment variable. If `EP_DRAFT`is set to `true` — `draft`, if `EP_PRE_RELEASE`is set to `true` — `prerelease`.",
+                    default: "draft",
+                    anyOf: [
+                        {
+                            enum: ["draft", "prerelease", "release"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                publisherName: {
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                updaterCacheDirName: {
+                    type: ["null", "string"],
+                },
+                publishAutoUpdate: {
+                    description: "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    default: true,
+                    type: "boolean",
+                },
+                requestHeaders: {
+                    description: "Any custom request headers",
+                    $ref: "#/definitions/OutgoingHttpHeaders",
+                },
+            },
+            required: ["provider"],
+        },
+        OutgoingHttpHeaders: {
+            type: "object",
+        },
+        S3Options: {
+            type: "object",
+            properties: {
+                provider: {
+                    description: "The provider. Must be `s3`.",
+                    type: "string",
+                    enum: ["s3"],
+                },
+                bucket: {
+                    description: "The bucket name.",
+                    type: "string",
+                },
+                region: {
+                    description: "The region. Is determined and set automatically when publishing.",
+                    type: ["null", "string"],
+                },
+                acl: {
+                    description: "The ACL. Set to `null` to not [add](https://github.com/electron-userland/electron-builder/issues/1822).\n\nPlease see [required permissions for the S3 provider](https://github.com/electron-userland/electron-builder/issues/1618#issuecomment-314679128).",
+                    default: "public-read",
+                    anyOf: [
+                        {
+                            enum: ["private", "public-read"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                storageClass: {
+                    description: "The type of storage to use for the object.",
+                    default: "STANDARD",
+                    anyOf: [
+                        {
+                            enum: ["REDUCED_REDUNDANCY", "STANDARD", "STANDARD_IA"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                encryption: {
+                    description: "Server-side encryption algorithm to use for the object.",
+                    anyOf: [
+                        {
+                            enum: ["AES256", "aws:kms"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                endpoint: {
+                    description: "The endpoint URI to send requests to. The default endpoint is built from the configured region.\nThe endpoint should be a string like `https://{service}.{region}.amazonaws.com`.",
+                    type: ["null", "string"],
+                },
+                channel: {
+                    description: "The update channel.",
+                    default: "latest",
+                    type: ["null", "string"],
+                },
+                path: {
+                    description: "The directory path.",
+                    default: "/",
+                    type: ["null", "string"],
+                },
+                publisherName: {
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                updaterCacheDirName: {
+                    type: ["null", "string"],
+                },
+                publishAutoUpdate: {
+                    description: "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    default: true,
+                    type: "boolean",
+                },
+                requestHeaders: {
+                    description: "Any custom request headers",
+                    $ref: "#/definitions/OutgoingHttpHeaders",
+                },
+            },
+            required: ["bucket", "provider"],
+        },
+        SpacesOptions: {
+            description: "[DigitalOcean Spaces](https://www.digitalocean.com/community/tutorials/an-introduction-to-digitalocean-spaces) options.\nAccess key is required, define `DO_KEY_ID` and `DO_SECRET_KEY` environment variables.",
+            type: "object",
+            properties: {
+                provider: {
+                    description: "The provider. Must be `spaces`.",
+                    type: "string",
+                    enum: ["spaces"],
+                },
+                name: {
+                    description: "The space name.",
+                    type: "string",
+                },
+                region: {
+                    description: "The region (e.g. `nyc3`).",
+                    type: "string",
+                },
+                channel: {
+                    description: "The update channel.",
+                    default: "latest",
+                    type: ["null", "string"],
+                },
+                path: {
+                    description: "The directory path.",
+                    default: "/",
+                    type: ["null", "string"],
+                },
+                acl: {
+                    description: "The ACL. Set to `null` to not [add](https://github.com/electron-userland/electron-builder/issues/1822).",
+                    default: "public-read",
+                    anyOf: [
+                        {
+                            enum: ["private", "public-read"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                publisherName: {
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                updaterCacheDirName: {
+                    type: ["null", "string"],
+                },
+                publishAutoUpdate: {
+                    description: "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    default: true,
+                    type: "boolean",
+                },
+                requestHeaders: {
+                    description: "Any custom request headers",
+                    $ref: "#/definitions/OutgoingHttpHeaders",
+                },
+            },
+            required: ["name", "provider", "region"],
+        },
+        GenericServerOptions: {
+            description: "Generic (any HTTP(S) server) options.\nIn all publish options [File Macros](/file-patterns#file-macros) are supported.",
+            type: "object",
+            properties: {
+                provider: {
+                    description: "The provider. Must be `generic`.",
+                    type: "string",
+                    enum: ["generic"],
+                },
+                url: {
+                    description: "The base url. e.g. `https://bucket_name.s3.amazonaws.com`.",
+                    type: "string",
+                },
+                channel: {
+                    description: "The channel.",
+                    default: "latest",
+                    type: ["null", "string"],
+                },
+                useMultipleRangeRequest: {
+                    description: "Whether to use multiple range requests for differential update. Defaults to `true` if `url` doesn't contain `s3.amazonaws.com`.",
+                    type: "boolean",
+                },
+                publisherName: {
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                updaterCacheDirName: {
+                    type: ["null", "string"],
+                },
+                publishAutoUpdate: {
+                    description: "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    default: true,
+                    type: "boolean",
+                },
+                requestHeaders: {
+                    description: "Any custom request headers",
+                    $ref: "#/definitions/OutgoingHttpHeaders",
+                },
+            },
+            required: ["provider", "url"],
+        },
+        BintrayOptions: {
+            description: '[Bintray](https://bintray.com/) options. Requires an API key. An API key can be obtained from the user [profile](https://bintray.com/profile/edit) page ("Edit Your Profile" -> API Key).\nDefine `BT_TOKEN` environment variable.',
+            type: "object",
+            properties: {
+                provider: {
+                    description: "The provider. Must be `bintray`.",
+                    type: "string",
+                    enum: ["bintray"],
+                },
+                package: {
+                    description: "The Bintray package name.",
+                    type: ["null", "string"],
+                },
+                repo: {
+                    description: "The Bintray repository name.",
+                    default: "generic",
+                    type: ["null", "string"],
+                },
+                owner: {
+                    description: "The owner.",
+                    type: ["null", "string"],
+                },
+                component: {
+                    description: "The Bintray component (Debian only).",
+                    type: ["null", "string"],
+                },
+                distribution: {
+                    description: "The Bintray distribution (Debian only).",
+                    default: "stable",
+                    type: ["null", "string"],
+                },
+                user: {
+                    description: "The Bintray user account. Used in cases where the owner is an organization.",
+                    type: ["null", "string"],
+                },
+                token: {
+                    type: ["null", "string"],
+                },
+                publisherName: {
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                updaterCacheDirName: {
+                    type: ["null", "string"],
+                },
+                publishAutoUpdate: {
+                    description: "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    default: true,
+                    type: "boolean",
+                },
+                requestHeaders: {
+                    description: "Any custom request headers",
+                    $ref: "#/definitions/OutgoingHttpHeaders",
+                },
+            },
+            required: ["provider"],
+        },
+        CustomPublishOptions: {
+            type: "object",
+            additionalProperties: {},
+            properties: {
+                provider: {
+                    description: "The provider. Must be `custom`.",
+                    type: "string",
+                    enum: ["custom"],
+                },
+                updateProvider: {
+                    description: "The Provider to provide UpdateInfo regarding available updates.  Required\nto use custom providers with electron-updater.",
+                    type: "object",
+                },
+                publisherName: {
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                updaterCacheDirName: {
+                    type: ["null", "string"],
+                },
+                publishAutoUpdate: {
+                    description: "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    default: true,
+                    type: "boolean",
+                },
+                requestHeaders: {
+                    description: "Any custom request headers",
+                    $ref: "#/definitions/OutgoingHttpHeaders",
+                },
+            },
+            required: ["provider"],
+        },
+        KeygenOptions: {
+            description: "Keygen options.\nhttps://keygen.sh/\nDefine `KEYGEN_TOKEN` environment variable.",
+            type: "object",
+            properties: {
+                provider: {
+                    description: "The provider. Must be `keygen`.",
+                    type: "string",
+                    enum: ["keygen"],
+                },
+                account: {
+                    description: "Keygen account's UUID",
+                    type: "string",
+                },
+                product: {
+                    description: "Keygen product's UUID",
+                    type: "string",
+                },
+                channel: {
+                    description: "The channel.",
+                    default: "stable",
+                    type: ["null", "string"],
+                },
+                platform: {
+                    description: "The target Platform. Is set programmatically explicitly for publishing.",
+                    type: "string",
+                },
+                publisherName: {
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                updaterCacheDirName: {
+                    type: ["null", "string"],
+                },
+                publishAutoUpdate: {
+                    description: "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    default: true,
+                    type: "boolean",
+                },
+                requestHeaders: {
+                    description: "Any custom request headers",
+                    $ref: "#/definitions/OutgoingHttpHeaders",
+                },
+            },
+            required: ["account", "product", "provider"],
+        },
+        SnapStoreOptions: {
+            description: "[Snap Store](https://snapcraft.io/) options.",
+            type: "object",
+            properties: {
+                channels: {
+                    description: "The list of channels the snap would be released.",
+                    default: ["edge"],
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                provider: {
+                    $ref: "#/definitions/PublishProvider",
+                    description: "The provider.",
+                },
+                publisherName: {
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                updaterCacheDirName: {
+                    type: ["null", "string"],
+                },
+                publishAutoUpdate: {
+                    description: "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    default: true,
+                    type: "boolean",
+                },
+                requestHeaders: {
+                    description: "Any custom request headers",
+                    $ref: "#/definitions/OutgoingHttpHeaders",
+                },
+            },
+            required: ["provider"],
+        },
+        PublishProvider: {
+            enum: ["bintray", "custom", "generic", "github", "keygen", "s3", "snapStore", "spaces"],
+            type: "string",
+        },
+        ReleaseInfo: {
+            type: "object",
+            properties: {
+                releaseName: {
+                    description: "The release name.",
+                    type: ["null", "string"],
+                },
+                releaseNotes: {
+                    description: "The release notes.",
+                    type: ["null", "string"],
+                },
+                releaseNotesFile: {
+                    description: "The path to release notes file. Defaults to `release-notes-${platform}.md` (where `platform` it is current platform — `mac`, `linux` or `windows`) or `release-notes.md` in the [build resources](#MetadataDirectories-buildResources).",
+                    type: ["null", "string"],
+                },
+                releaseDate: {
+                    description: "The release date.",
+                    type: "string",
+                },
+            },
+        },
+        MasConfiguration: {
+            type: "object",
+            properties: {
+                entitlements: {
+                    description: "The path to entitlements file for signing the app. `build/entitlements.mas.plist` will be used if exists (it is a recommended way to set).\nOtherwise [default](https://github.com/electron-userland/electron-osx-sign/blob/master/default.entitlements.mas.plist).",
+                    type: ["null", "string"],
+                },
+                entitlementsInherit: {
+                    description: "The path to child entitlements which inherit the security settings for signing frameworks and bundles of a distribution. `build/entitlements.mas.inherit.plist` will be used if exists (it is a recommended way to set).\nOtherwise [default](https://github.com/electron-userland/electron-osx-sign/blob/master/default.entitlements.mas.inherit.plist).",
+                    type: ["null", "string"],
+                },
+                binaries: {
+                    description: "Paths of any extra binaries that need to be signed.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                category: {
+                    description: 'The application category type, as shown in the Finder via *View -> Arrange by Application Category* when viewing the Applications directory.\n\nFor example, `"category": "public.app-category.developer-tools"` will set the application category to *Developer Tools*.\n\nValid values are listed in [Apple\'s documentation](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/LaunchServicesKeys.html#//apple_ref/doc/uid/TP40009250-SW8).',
+                    type: ["null", "string"],
+                },
+                target: {
+                    description: "The target package type: list of `default`, `dmg`, `mas`, `mas-dev`, `pkg`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir`. Defaults to `default` (dmg and zip for Squirrel.Mac).",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/TargetConfiguration",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/TargetConfiguration",
+                                    },
+                                    {
+                                        enum: ["7z", "default", "dir", "dmg", "mas", "mas-dev", "pkg", "tar.bz2", "tar.gz", "tar.lz", "tar.xz", "zip"],
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            enum: ["7z", "default", "dir", "dmg", "mas", "mas-dev", "pkg", "tar.bz2", "tar.gz", "tar.lz", "tar.xz", "zip"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                identity: {
+                    description: "The name of certificate to use when signing. Consider using environment variables [CSC_LINK or CSC_NAME](/code-signing) instead of specifying this option.\nMAS installer identity is specified in the [mas](/configuration/mas).",
+                    type: ["null", "string"],
+                },
+                icon: {
+                    description: "The path to application icon.",
+                    default: "build/icon.icns",
+                    type: ["null", "string"],
+                },
+                entitlementsLoginHelper: {
+                    description: "Path to login helper entitlement file.\nWhen using App Sandbox, the the `com.apple.security.inherit` key that is normally in the inherited entitlements cannot be inherited since the login helper is a standalone executable.\nDefaults to the value provided for `entitlements`. This option only applies when signing with `entitlements` provided.",
+                    type: ["null", "string"],
+                },
+                provisioningProfile: {
+                    description: "The path to the provisioning profile to use when signing, absolute or relative to the app root.",
+                    type: ["null", "string"],
+                },
+                bundleVersion: {
+                    description: "The `CFBundleVersion`. Do not use it unless [you need to](https://github.com/electron-userland/electron-builder/issues/565#issuecomment-230678643).",
+                    type: ["null", "string"],
+                },
+                bundleShortVersion: {
+                    description: "The `CFBundleShortVersionString`. Do not use it unless you need to.",
+                    type: ["null", "string"],
+                },
+                darkModeSupport: {
+                    description: "Whether a dark mode is supported. If your app does have a dark mode, you can make your app follow the system-wide dark mode setting.",
+                    default: false,
+                    type: "boolean",
+                },
+                helperBundleId: {
+                    description: "The bundle identifier to use in the application helper's plist.",
+                    default: "${appBundleIdentifier}.helper",
+                    type: ["null", "string"],
+                },
+                helperRendererBundleId: {
+                    description: "The bundle identifier to use in the Renderer helper's plist.",
+                    default: "${appBundleIdentifier}.helper.Renderer",
+                    type: ["null", "string"],
+                },
+                helperPluginBundleId: {
+                    description: "The bundle identifier to use in the Plugin helper's plist.",
+                    default: "${appBundleIdentifier}.helper.Plugin",
+                    type: ["null", "string"],
+                },
+                helperGPUBundleId: {
+                    description: "The bundle identifier to use in the GPU helper's plist.",
+                    default: "${appBundleIdentifier}.helper.GPU",
+                    type: ["null", "string"],
+                },
+                helperEHBundleId: {
+                    description: "The bundle identifier to use in the EH helper's plist.",
+                    default: "${appBundleIdentifier}.helper.EH",
+                    type: ["null", "string"],
+                },
+                helperNPBundleId: {
+                    description: "The bundle identifier to use in the NP helper's plist.",
+                    default: "${appBundleIdentifier}.helper.NP",
+                    type: ["null", "string"],
+                },
+                type: {
+                    description: "Whether to sign app for development or for distribution.",
+                    default: "distribution",
+                    anyOf: [
+                        {
+                            enum: ["development", "distribution"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                extendInfo: {
+                    description: "The extra entries for `Info.plist`.",
+                },
+                minimumSystemVersion: {
+                    description: "The minimum version of macOS required for the app to run. Corresponds to `LSMinimumSystemVersion`.",
+                    type: ["null", "string"],
+                },
+                requirements: {
+                    description: "Path of [requirements file](https://developer.apple.com/library/mac/documentation/Security/Conceptual/CodeSigningGuide/RequirementLang/RequirementLang.html) used in signing. Not applicable for MAS.",
+                    type: ["null", "string"],
+                },
+                electronLanguages: {
+                    description: "The electron locales. By default Electron locales used as is.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "string",
+                        },
+                    ],
+                },
+                cscInstallerLink: {
+                    type: ["null", "string"],
+                },
+                cscInstallerKeyPassword: {
+                    type: ["null", "string"],
+                },
+                extraDistFiles: {
+                    description: "Extra files to put in archive. Not applicable for `tar.*`.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                hardenedRuntime: {
+                    description: "Whether your app has to be signed with hardened runtime.",
+                    default: true,
+                    type: "boolean",
+                },
+                gatekeeperAssess: {
+                    description: "Whether to let electron-osx-sign validate the signing or not.",
+                    default: false,
+                    type: "boolean",
+                },
+                strictVerify: {
+                    description: "Whether to let electron-osx-sign verify the contents or not.",
+                    default: true,
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["string", "boolean"],
+                        },
+                    ],
+                },
+                signIgnore: {
+                    description: "Regex or an array of regex's that signal skipping signing a file.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                timestamp: {
+                    description: "Specify the URL of the timestamp authority server",
+                    type: ["null", "string"],
+                },
+                appId: {
+                    description: "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
+                    default: "com.electron.${name}",
+                    type: ["null", "string"],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
+                    type: ["null", "string"],
+                },
+                executableName: {
+                    description: "The executable name. Defaults to `productName`.",
+                    type: ["null", "string"],
+                },
+                compression: {
+                    description: "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
+                    default: "normal",
+                    anyOf: [
+                        {
+                            enum: ["maximum", "normal", "store"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                files: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                extraResources: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                extraFiles: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                asar: {
+                    description: "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work.",
+                    default: true,
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/AsarOptions",
+                        },
+                        {
+                            type: ["null", "boolean"],
+                        },
+                    ],
+                },
+                asarUnpack: {
+                    description: "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                fileAssociations: {
+                    description: "The file associations.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileAssociation",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                $ref: "#/definitions/FileAssociation",
+                            },
+                        },
+                    ],
+                },
+                protocols: {
+                    description: "The URL protocol schemes.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/Protocol",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                $ref: "#/definitions/Protocol",
+                            },
+                        },
+                    ],
+                },
+                forceCodeSigning: {
+                    description: "Whether to fail if app will be not code signed.",
+                    type: "boolean",
+                },
+                electronUpdaterCompatibility: {
+                    description: "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                detectUpdateChannel: {
+                    description: "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
+                    default: true,
+                    type: "boolean",
+                },
+                generateUpdatesFilesForAllChannels: {
+                    description: "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
+                    default: false,
+                    type: "boolean",
+                },
+                releaseInfo: {
+                    description: 'The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes="new features"\n```',
+                    $ref: "#/definitions/ReleaseInfo",
+                },
+                cscLink: {
+                    type: ["null", "string"],
+                },
+                cscKeyPassword: {
+                    type: ["null", "string"],
+                },
+                defaultArch: {
+                    type: "string",
+                },
+            },
+        },
+        DmgOptions: {
+            type: "object",
+            properties: {
+                background: {
+                    description: "The path to background image (default: `build/background.tiff` or `build/background.png` if exists). The resolution of this file determines the resolution of the installer window.\nIf background is not specified, use `window.size`. Default locations expected background size to be 540x380.",
+                    type: ["null", "string"],
+                },
+                backgroundColor: {
+                    description: "The background color (accepts css colors). Defaults to `#ffffff` (white) if no background image.",
+                    type: ["null", "string"],
+                },
+                icon: {
+                    description: "The path to DMG icon (volume icon), which will be shown when mounted, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to the application icon (`build/icon.icns`).",
+                    type: ["null", "string"],
+                },
+                iconSize: {
+                    description: "The size of all the icons inside the DMG.",
+                    default: 80,
+                    type: ["null", "number"],
+                },
+                iconTextSize: {
+                    description: "The size of all the icon texts inside the DMG.",
+                    default: 12,
+                    type: ["null", "number"],
+                },
+                title: {
+                    description: "The title of the produced DMG, which will be shown when mounted (volume name).\n\nMacro `${productName}`, `${version}` and `${name}` are supported.",
+                    default: "${productName} ${version}",
+                    type: ["null", "string"],
+                },
+                contents: {
+                    description: "The content — to customize icon locations. The x and y coordinates refer to the position of the **center** of the icon (at 1x scale), and do not take the label into account.",
+                    type: "array",
+                    items: {
+                        $ref: "#/definitions/DmgContent",
+                    },
+                },
+                format: {
+                    description: "The disk image format. `ULFO` (lzfse-compressed image (OS X 10.11+ only)).",
+                    default: "UDZO",
+                    enum: ["UDBZ", "UDCO", "UDRO", "UDRW", "UDZO", "ULFO"],
+                    type: "string",
+                },
+                window: {
+                    description: 'The DMG window position and size. With y co-ordinates running from bottom to top.\n\nThe Finder makes sure that the window will be on the user’s display, so if you want your window at the top left of the display you could use `"x": 0, "y": 100000` as the x, y co-ordinates.\nIt is not to be possible to position the window relative to the [top left](https://github.com/electron-userland/electron-builder/issues/3990#issuecomment-512960957) or relative to the center of the user’s screen.',
+                    $ref: "#/definitions/DmgWindow",
+                },
+                internetEnabled: {
+                    description: "Whether to create internet-enabled disk image (when it is downloaded using a browser it will automatically decompress the image, put the application on the desktop, unmount and remove the disk image file).",
+                    default: false,
+                    type: "boolean",
+                },
+                sign: {
+                    description: "Whether to sign the DMG or not. Signing is not required and will lead to unwanted errors in combination with notarization requirements.",
+                    default: false,
+                    type: "boolean",
+                },
+                writeUpdateInfo: {
+                    default: true,
+                    type: "boolean",
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        DmgContent: {
+            type: "object",
+            properties: {
+                x: {
+                    description: "The device-independent pixel offset from the left of the window to the **center** of the icon.",
+                    type: "number",
+                },
+                y: {
+                    description: "The device-independent pixel offset from the top of the window to the **center** of the icon.",
+                    type: "number",
+                },
+                type: {
+                    enum: ["dir", "file", "link"],
+                    type: "string",
+                },
+                name: {
+                    description: "The name of the file within the DMG. Defaults to basename of `path`.",
+                    type: "string",
+                },
+                path: {
+                    description: "The path of the file within the DMG.",
+                    type: "string",
+                },
+            },
+            required: ["x", "y"],
+        },
+        DmgWindow: {
+            type: "object",
+            properties: {
+                x: {
+                    description: "The X position relative to left of the screen.",
+                    default: 400,
+                    type: "number",
+                },
+                y: {
+                    description: "The Y position relative to bottom of the screen.",
+                    default: 100,
+                    type: "number",
+                },
+                width: {
+                    description: "The width. Defaults to background image width or 540.",
+                    type: "number",
+                },
+                height: {
+                    description: "The height. Defaults to background image height or 380.",
+                    type: "number",
+                },
+            },
+        },
+        PkgOptions: {
+            description: "macOS product archive options.",
+            type: "object",
+            properties: {
+                scripts: {
+                    description: "The scripts directory, relative to `build` (build resources directory).\nThe scripts can be in any language so long as the files are marked executable and have the appropriate shebang indicating the path to the interpreter.\nScripts are required to be executable (`chmod +x file`).",
+                    default: "build/pkg-scripts",
+                    type: ["null", "string"],
+                },
+                productbuild: {
+                    description: "should be not documented, only to experiment",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                installLocation: {
+                    description: "The install location. [Do not use it](https://stackoverflow.com/questions/12863944/how-do-you-specify-a-default-install-location-to-home-with-pkgbuild) to create per-user package.\nMostly never you will need to change this option. `/Applications` would install it as expected into `/Applications` if the local system domain is chosen, or into `$HOME/Applications` if the home installation is chosen.",
+                    default: "/Applications",
+                    type: ["null", "string"],
+                },
+                allowAnywhere: {
+                    description: "Whether can be installed at the root of any volume, including non-system volumes. Otherwise, it cannot be installed at the root of a volume.\n\nCorresponds to [enable_anywhere](https://developer.apple.com/library/content/documentation/DeveloperTools/Reference/DistributionDefinitionRef/Chapters/Distribution_XML_Ref.html#//apple_ref/doc/uid/TP40005370-CH100-SW70).",
+                    default: true,
+                    type: ["null", "boolean"],
+                },
+                allowCurrentUserHome: {
+                    description: "Whether can be installed into the current user’s home directory.\nA home directory installation is done as the current user (not as root), and it cannot write outside of the home directory.\nIf the product cannot be installed in the user’s home directory and be not completely functional from user’s home directory.\n\nCorresponds to [enable_currentUserHome](https://developer.apple.com/library/content/documentation/DeveloperTools/Reference/DistributionDefinitionRef/Chapters/Distribution_XML_Ref.html#//apple_ref/doc/uid/TP40005370-CH100-SW70).",
+                    default: true,
+                    type: ["null", "boolean"],
+                },
+                allowRootDirectory: {
+                    description: "Whether can be installed into the root directory. Should usually be `true` unless the product can be installed only to the user’s home directory.\n\nCorresponds to [enable_localSystem](https://developer.apple.com/library/content/documentation/DeveloperTools/Reference/DistributionDefinitionRef/Chapters/Distribution_XML_Ref.html#//apple_ref/doc/uid/TP40005370-CH100-SW70).",
+                    default: true,
+                    type: ["null", "boolean"],
+                },
+                identity: {
+                    description: "The name of certificate to use when signing. Consider using environment variables [CSC_LINK or CSC_NAME](/code-signing) instead of specifying this option.",
+                    type: ["null", "string"],
+                },
+                license: {
+                    description: 'The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). In addition to `txt, `rtf` and `html` supported (don\'t forget to use `target="_blank"` for links).',
+                    type: ["null", "string"],
+                },
+                background: {
+                    description: "Options for the background image for the installer.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/PkgBackgroundOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                welcome: {
+                    description: "The path to the welcome file. This may be used to customize the text on the Introduction page of the installer.",
+                    type: ["null", "string"],
+                },
+                mustClose: {
+                    description: "Identifies applications that must be closed before the package is installed.\\n\\nCorresponds to [must-close](https://developer.apple.com/library/archive/documentation/DeveloperTools/Reference/DistributionDefinitionRef/Chapters/Distribution_XML_Ref.html#//apple_ref/doc/uid/TP40005370-CH100-SW77)",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                conclusion: {
+                    description: 'The path to the conclusion file. This may be used to customize the text on the final "Summary" page of the installer.',
+                    type: ["null", "string"],
+                },
+                isRelocatable: {
+                    description: "Install bundle over previous version if moved by user?",
+                    default: true,
+                    type: ["null", "boolean"],
+                },
+                isVersionChecked: {
+                    description: "Don't install bundle if newer version on disk?",
+                    default: true,
+                    type: ["null", "boolean"],
+                },
+                hasStrictIdentifier: {
+                    description: "Require identical bundle identifiers at install path?",
+                    default: true,
+                    type: ["null", "boolean"],
+                },
+                overwriteAction: {
+                    description: "Specifies how an existing version of the bundle on disk should be handled when the version in\nthe package is installed.\n\nIf you specify upgrade, the bundle in the package atomi-cally replaces any version on disk;\nthis has the effect of deleting old paths that no longer exist in the new version of\nthe bundle.\n\nIf you specify update, the bundle in the package overwrites the version on disk, and any files\nnot contained in the package will be left intact; this is appropriate when you are delivering\nan update-only package.\n\nAnother effect of update is that the package bundle will not be installed at all if there is\nnot already a version on disk; this allows a package to deliver an update for an app that\nthe user might have deleted.",
+                    default: "upgrade",
+                    anyOf: [
+                        {
+                            enum: ["update", "upgrade"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        PkgBackgroundOptions: {
+            description: "Options for the background image in a PKG installer",
+            type: "object",
+            properties: {
+                file: {
+                    description: "Path to the image to use as an installer background.",
+                    type: "string",
+                },
+                alignment: {
+                    description: "Alignment of the background image.\nOptions are: center, left, right, top, bottom, topleft, topright, bottomleft, bottomright",
+                    default: "center",
+                    anyOf: [
+                        {
+                            enum: ["bottom", "bottomleft", "bottomright", "center", "left", "right", "top", "topleft", "topright"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                scaling: {
+                    description: "Scaling of the background image.\nOptions are: tofit, none, proportional",
+                    default: "tofit",
+                    anyOf: [
+                        {
+                            enum: ["none", "proportional", "tofit"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+            },
+        },
+        WindowsConfiguration: {
+            type: "object",
+            properties: {
+                target: {
+                    description: "The target package type: list of `nsis`, `nsis-web` (Web installer), `portable` ([portable](/configuration/nsis#portable) app without installation), `appx`, `msi`, `squirrel`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir`.\nAppX package can be built only on Windows 10.\n\nTo use Squirrel.Windows please install `electron-builder-squirrel-windows` dependency.",
+                    default: "nsis",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/TargetConfiguration",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/TargetConfiguration",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                icon: {
+                    description: "The path to application icon.",
+                    default: "build/icon.ico",
+                    type: ["null", "string"],
+                },
+                legalTrademarks: {
+                    description: "The trademarks and registered trademarks.",
+                    type: ["null", "string"],
+                },
+                signingHashAlgorithms: {
+                    description: "Array of signing algorithms used. For AppX `sha256` is always used.",
+                    default: "['sha1', 'sha256']",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                enum: ["sha1", "sha256"],
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                sign: {
+                    description: "The custom function (or path to file or module id) to sign Windows executable.",
+                    type: ["null", "string", "object"],
+                },
+                certificateFile: {
+                    description: "The path to the *.pfx certificate you want to sign with. Please use it only if you cannot use env variable `CSC_LINK` (`WIN_CSC_LINK`) for some reason.\nPlease see [Code Signing](/code-signing).",
+                    type: ["null", "string"],
+                },
+                certificatePassword: {
+                    description: "The password to the certificate provided in `certificateFile`. Please use it only if you cannot use env variable `CSC_KEY_PASSWORD` (`WIN_CSC_KEY_PASSWORD`) for some reason.\nPlease see [Code Signing](/code-signing).",
+                    type: ["null", "string"],
+                },
+                certificateSubjectName: {
+                    description: "The name of the subject of the signing certificate. Required only for EV Code Signing and works only on Windows (or on macOS if [Parallels Desktop](https://www.parallels.com/products/desktop/) Windows 10 virtual machines exits).",
+                    type: ["null", "string"],
+                },
+                certificateSha1: {
+                    description: "The SHA1 hash of the signing certificate. The SHA1 hash is commonly specified when multiple certificates satisfy the criteria specified by the remaining switches. Works only on Windows (or on macOS if [Parallels Desktop](https://www.parallels.com/products/desktop/) Windows 10 virtual machines exits).",
+                    type: ["null", "string"],
+                },
+                additionalCertificateFile: {
+                    description: "The path to an additional certificate file you want to add to the signature block.",
+                    type: ["null", "string"],
+                },
+                rfc3161TimeStampServer: {
+                    description: "The URL of the RFC 3161 time stamp server.",
+                    default: "http://timestamp.digicert.com",
+                    type: ["null", "string"],
+                },
+                timeStampServer: {
+                    description: "The URL of the time stamp server.",
+                    default: "http://timestamp.digicert.com",
+                    type: ["null", "string"],
+                },
+                publisherName: {
+                    description: "[The publisher name](https://github.com/electron-userland/electron-builder/issues/1187#issuecomment-278972073), exactly as in your code signed certificate. Several names can be provided.\nDefaults to common name from your code signing certificate.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                verifyUpdateCodeSignature: {
+                    description: "Whether to verify the signature of an available update before installation.\nThe [publisher name](#publisherName) will be used for the signature verification.",
+                    default: true,
+                    type: "boolean",
+                },
+                requestedExecutionLevel: {
+                    description: "The [security level](https://msdn.microsoft.com/en-us/library/6ad1fshk.aspx#Anchor_9) at which the application requests to be executed.\nCannot be specified per target, allowed only in the `win`.",
+                    default: "asInvoker",
+                    anyOf: [
+                        {
+                            enum: ["asInvoker", "highestAvailable", "requireAdministrator"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                signAndEditExecutable: {
+                    description: "Whether to sign and add metadata to executable. Advanced option.",
+                    default: true,
+                    type: "boolean",
+                },
+                signDlls: {
+                    description: "Whether to sign DLL files. Advanced option.",
+                    default: false,
+                    type: "boolean",
+                },
+                appId: {
+                    description: "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
+                    default: "com.electron.${name}",
+                    type: ["null", "string"],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
+                    type: ["null", "string"],
+                },
+                executableName: {
+                    description: "The executable name. Defaults to `productName`.",
+                    type: ["null", "string"],
+                },
+                compression: {
+                    description: "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
+                    default: "normal",
+                    anyOf: [
+                        {
+                            enum: ["maximum", "normal", "store"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                files: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                extraResources: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                extraFiles: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                asar: {
+                    description: "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work.",
+                    default: true,
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/AsarOptions",
+                        },
+                        {
+                            type: ["null", "boolean"],
+                        },
+                    ],
+                },
+                asarUnpack: {
+                    description: "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                fileAssociations: {
+                    description: "The file associations.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileAssociation",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                $ref: "#/definitions/FileAssociation",
+                            },
+                        },
+                    ],
+                },
+                protocols: {
+                    description: "The URL protocol schemes.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/Protocol",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                $ref: "#/definitions/Protocol",
+                            },
+                        },
+                    ],
+                },
+                forceCodeSigning: {
+                    description: "Whether to fail if app will be not code signed.",
+                    type: "boolean",
+                },
+                electronUpdaterCompatibility: {
+                    description: "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                detectUpdateChannel: {
+                    description: "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
+                    default: true,
+                    type: "boolean",
+                },
+                generateUpdatesFilesForAllChannels: {
+                    description: "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
+                    default: false,
+                    type: "boolean",
+                },
+                releaseInfo: {
+                    description: 'The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes="new features"\n```',
+                    $ref: "#/definitions/ReleaseInfo",
+                },
+                cscLink: {
+                    type: ["null", "string"],
+                },
+                cscKeyPassword: {
+                    type: ["null", "string"],
+                },
+                defaultArch: {
+                    type: "string",
+                },
+            },
+        },
+        NsisOptions: {
+            type: "object",
+            properties: {
+                oneClick: {
+                    description: "Whether to create one-click installer or assisted.",
+                    default: true,
+                    type: "boolean",
+                },
+                perMachine: {
+                    description: "Whether to show install mode installer page (choice per-machine or per-user) for assisted installer. Or whether installation always per all users (per-machine).\n\nIf `oneClick` is `true` (default): Whether to install per all users (per-machine).\n\nIf `oneClick` is `false` and `perMachine` is `true`: no install mode installer page, always install per-machine.\n\nIf `oneClick` is `false` and `perMachine` is `false` (default): install mode installer page.",
+                    default: false,
+                    type: "boolean",
+                },
+                allowElevation: {
+                    description: "*assisted installer only.* Allow requesting for elevation. If false, user will have to restart installer with elevated permissions.",
+                    default: true,
+                    type: "boolean",
+                },
+                allowToChangeInstallationDirectory: {
+                    description: "*assisted installer only.* Whether to allow user to change installation directory.",
+                    default: false,
+                    type: "boolean",
+                },
+                installerIcon: {
+                    description: "The path to installer icon, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerIcon.ico` or application icon.",
+                    type: ["null", "string"],
+                },
+                uninstallerIcon: {
+                    description: "The path to uninstaller icon, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/uninstallerIcon.ico` or application icon.",
+                    type: ["null", "string"],
+                },
+                installerHeader: {
+                    description: "*assisted installer only.* `MUI_HEADERIMAGE`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.",
+                    default: "build/installerHeader.bmp",
+                    type: ["null", "string"],
+                },
+                installerHeaderIcon: {
+                    description: "*one-click installer only.* The path to header icon (above the progress bar), relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerHeaderIcon.ico` or application icon.",
+                    type: ["null", "string"],
+                },
+                installerSidebar: {
+                    description: "*assisted installer only.* `MUI_WELCOMEFINISHPAGE_BITMAP`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerSidebar.bmp` or `${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp`. Image size 164 × 314 pixels.",
+                    type: ["null", "string"],
+                },
+                uninstallerSidebar: {
+                    description: "*assisted installer only.* `MUI_UNWELCOMEFINISHPAGE_BITMAP`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `installerSidebar` option or `build/uninstallerSidebar.bmp` or `build/installerSidebar.bmp` or `${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp`",
+                    type: ["null", "string"],
+                },
+                uninstallDisplayName: {
+                    description: "The uninstaller display name in the control panel.",
+                    default: "${productName} ${version}",
+                    type: "string",
+                },
+                include: {
+                    description: "The path to NSIS include script to customize installer. Defaults to `build/installer.nsh`. See [Custom NSIS script](#custom-nsis-script).",
+                    type: ["null", "string"],
+                },
+                script: {
+                    description: "The path to NSIS script to customize installer. Defaults to `build/installer.nsi`. See [Custom NSIS script](#custom-nsis-script).",
+                    type: ["null", "string"],
+                },
+                license: {
+                    description: 'The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). In addition to `txt, `rtf` and `html` supported (don\'t forget to use `target="_blank"` for links).\n\nMultiple license files in different languages are supported — use lang postfix (e.g. `_de`, `_ru`)). For example, create files `license_de.txt` and `license_en.txt` in the build resources.\nIf OS language is german, `license_de.txt` will be displayed. See map of [language code to name](https://github.com/meikidd/iso-639-1/blob/master/src/data.js).\n\nAppropriate license file will be selected by user OS language.',
+                    type: ["null", "string"],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName} Setup ${version}.${ext}`.",
+                    type: ["null", "string"],
+                },
+                deleteAppDataOnUninstall: {
+                    description: "*one-click installer only.* Whether to delete app data on uninstall.",
+                    default: false,
+                    type: "boolean",
+                },
+                differentialPackage: {
+                    type: "boolean",
+                },
+                displayLanguageSelector: {
+                    description: "Whether to display a language selection dialog. Not recommended (by default will be detected using OS language).",
+                    default: false,
+                    type: "boolean",
+                },
+                installerLanguages: {
+                    description: "The installer languages (e.g. `en_US`, `de_DE`). Change only if you understand what do you do and for what.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                language: {
+                    description: "[LCID Dec](https://msdn.microsoft.com/en-au/goglobal/bb964664.aspx), defaults to `1033`(`English - United States`).",
+                    type: ["null", "string"],
+                },
+                multiLanguageInstaller: {
+                    description: "Whether to create multi-language installer. Defaults to `unicode` option value.",
+                    type: "boolean",
+                },
+                packElevateHelper: {
+                    description: "Whether to pack the elevate executable (required for electron-updater if per-machine installer used or can be used in the future). Ignored if `perMachine` is set to `true`.",
+                    default: true,
+                    type: "boolean",
+                },
+                preCompressedFileExtensions: {
+                    description: "The file extension of files that will be not compressed. Applicable only for `extraResources` and `extraFiles` files.",
+                    default: [".avi", ".mov", ".m4v", ".mp4", ".m4p", ".qt", ".mkv", ".webm", ".vmdk"],
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                unicode: {
+                    description: "Whether to create [Unicode installer](http://nsis.sourceforge.net/Docs/Chapter1.html#intro-unicode).",
+                    default: true,
+                    type: "boolean",
+                },
+                guid: {
+                    description: "See [GUID vs Application Name](../configuration/nsis#guid-vs-application-name).",
+                    type: ["null", "string"],
+                },
+                warningsAsErrors: {
+                    description: "If `warningsAsErrors` is `true` (default): NSIS will treat warnings as errors. If `warningsAsErrors` is `false`: NSIS will allow warnings.",
+                    default: true,
+                    type: "boolean",
+                },
+                useZip: {
+                    default: false,
+                    type: "boolean",
+                },
+                customNsisBinary: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/CustomNsisBinary",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                debugLogging: {
+                    description: "Whether or not to enable NSIS logging for debugging.\nNote: Requires a debug-enabled NSIS build.\nelectron-builder's included `makensis` only supports building debug-enabled NSIS installers on Windows currently\nhttps://github.com/electron-userland/electron-builder/issues/5119#issuecomment-811353612",
+                    type: ["null", "boolean"],
+                },
+                runAfterFinish: {
+                    description: "Whether to run the installed application after finish. For assisted installer corresponding checkbox will be removed.",
+                    default: true,
+                    type: "boolean",
+                },
+                createDesktopShortcut: {
+                    description: "Whether to create desktop shortcut. Set to `always` if to recreate also on reinstall (even if removed by user).",
+                    default: true,
+                    enum: ["always", false, true],
+                },
+                createStartMenuShortcut: {
+                    description: "Whether to create start menu shortcut.",
+                    default: true,
+                    type: "boolean",
+                },
+                menuCategory: {
+                    description: "Whether to create submenu for start menu shortcut and program files directory. If `true`, company name will be used. Or string value.",
+                    default: false,
+                    type: ["string", "boolean"],
+                },
+                shortcutName: {
+                    description: "The name that will be used for all shortcuts. Defaults to the application name.",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        CustomNsisBinary: {
+            type: "object",
+            properties: {
+                url: {
+                    default: "https://github.com/electron-userland/electron-builder-binaries/releases/download",
+                    type: ["null", "string"],
+                },
+                checksum: {
+                    default: "o+YZsXHp8LNihhuk7JsCDhdIgx0MKKK+1b3sGD+4zX5djZULe4/4QMcAsfQ+0r+a8FnwBt7BVBHkIkJHjKQ0sg==",
+                    type: ["null", "string"],
+                },
+                version: {
+                    default: "3.0.4.2",
+                    type: ["null", "string"],
+                },
+            },
+            required: ["url"],
+        },
+        NsisWebOptions: {
+            description: "Web Installer options.",
+            type: "object",
+            properties: {
+                appPackageUrl: {
+                    description: "The application package download URL. Optional — by default computed using publish configuration.\n\nURL like `https://example.com/download/latest` allows web installer to be version independent (installer will download latest application package).\nPlease note — it is [full URL](https://github.com/electron-userland/electron-builder/issues/1810#issuecomment-317650878).\n\nCustom `X-Arch` http header is set to `32` or `64`.",
+                    type: ["null", "string"],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName} Web Setup ${version}.${ext}`.",
+                    type: ["null", "string"],
+                },
+                oneClick: {
+                    description: "Whether to create one-click installer or assisted.",
+                    default: true,
+                    type: "boolean",
+                },
+                perMachine: {
+                    description: "Whether to show install mode installer page (choice per-machine or per-user) for assisted installer. Or whether installation always per all users (per-machine).\n\nIf `oneClick` is `true` (default): Whether to install per all users (per-machine).\n\nIf `oneClick` is `false` and `perMachine` is `true`: no install mode installer page, always install per-machine.\n\nIf `oneClick` is `false` and `perMachine` is `false` (default): install mode installer page.",
+                    default: false,
+                    type: "boolean",
+                },
+                allowElevation: {
+                    description: "*assisted installer only.* Allow requesting for elevation. If false, user will have to restart installer with elevated permissions.",
+                    default: true,
+                    type: "boolean",
+                },
+                allowToChangeInstallationDirectory: {
+                    description: "*assisted installer only.* Whether to allow user to change installation directory.",
+                    default: false,
+                    type: "boolean",
+                },
+                installerIcon: {
+                    description: "The path to installer icon, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerIcon.ico` or application icon.",
+                    type: ["null", "string"],
+                },
+                uninstallerIcon: {
+                    description: "The path to uninstaller icon, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/uninstallerIcon.ico` or application icon.",
+                    type: ["null", "string"],
+                },
+                installerHeader: {
+                    description: "*assisted installer only.* `MUI_HEADERIMAGE`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.",
+                    default: "build/installerHeader.bmp",
+                    type: ["null", "string"],
+                },
+                installerHeaderIcon: {
+                    description: "*one-click installer only.* The path to header icon (above the progress bar), relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerHeaderIcon.ico` or application icon.",
+                    type: ["null", "string"],
+                },
+                installerSidebar: {
+                    description: "*assisted installer only.* `MUI_WELCOMEFINISHPAGE_BITMAP`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerSidebar.bmp` or `${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp`. Image size 164 × 314 pixels.",
+                    type: ["null", "string"],
+                },
+                uninstallerSidebar: {
+                    description: "*assisted installer only.* `MUI_UNWELCOMEFINISHPAGE_BITMAP`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `installerSidebar` option or `build/uninstallerSidebar.bmp` or `build/installerSidebar.bmp` or `${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp`",
+                    type: ["null", "string"],
+                },
+                uninstallDisplayName: {
+                    description: "The uninstaller display name in the control panel.",
+                    default: "${productName} ${version}",
+                    type: "string",
+                },
+                include: {
+                    description: "The path to NSIS include script to customize installer. Defaults to `build/installer.nsh`. See [Custom NSIS script](#custom-nsis-script).",
+                    type: ["null", "string"],
+                },
+                script: {
+                    description: "The path to NSIS script to customize installer. Defaults to `build/installer.nsi`. See [Custom NSIS script](#custom-nsis-script).",
+                    type: ["null", "string"],
+                },
+                license: {
+                    description: 'The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). In addition to `txt, `rtf` and `html` supported (don\'t forget to use `target="_blank"` for links).\n\nMultiple license files in different languages are supported — use lang postfix (e.g. `_de`, `_ru`)). For example, create files `license_de.txt` and `license_en.txt` in the build resources.\nIf OS language is german, `license_de.txt` will be displayed. See map of [language code to name](https://github.com/meikidd/iso-639-1/blob/master/src/data.js).\n\nAppropriate license file will be selected by user OS language.',
+                    type: ["null", "string"],
+                },
+                deleteAppDataOnUninstall: {
+                    description: "*one-click installer only.* Whether to delete app data on uninstall.",
+                    default: false,
+                    type: "boolean",
+                },
+                differentialPackage: {
+                    type: "boolean",
+                },
+                displayLanguageSelector: {
+                    description: "Whether to display a language selection dialog. Not recommended (by default will be detected using OS language).",
+                    default: false,
+                    type: "boolean",
+                },
+                installerLanguages: {
+                    description: "The installer languages (e.g. `en_US`, `de_DE`). Change only if you understand what do you do and for what.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                language: {
+                    description: "[LCID Dec](https://msdn.microsoft.com/en-au/goglobal/bb964664.aspx), defaults to `1033`(`English - United States`).",
+                    type: ["null", "string"],
+                },
+                multiLanguageInstaller: {
+                    description: "Whether to create multi-language installer. Defaults to `unicode` option value.",
+                    type: "boolean",
+                },
+                packElevateHelper: {
+                    description: "Whether to pack the elevate executable (required for electron-updater if per-machine installer used or can be used in the future). Ignored if `perMachine` is set to `true`.",
+                    default: true,
+                    type: "boolean",
+                },
+                preCompressedFileExtensions: {
+                    description: "The file extension of files that will be not compressed. Applicable only for `extraResources` and `extraFiles` files.",
+                    default: [".avi", ".mov", ".m4v", ".mp4", ".m4p", ".qt", ".mkv", ".webm", ".vmdk"],
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                unicode: {
+                    description: "Whether to create [Unicode installer](http://nsis.sourceforge.net/Docs/Chapter1.html#intro-unicode).",
+                    default: true,
+                    type: "boolean",
+                },
+                guid: {
+                    description: "See [GUID vs Application Name](../configuration/nsis#guid-vs-application-name).",
+                    type: ["null", "string"],
+                },
+                warningsAsErrors: {
+                    description: "If `warningsAsErrors` is `true` (default): NSIS will treat warnings as errors. If `warningsAsErrors` is `false`: NSIS will allow warnings.",
+                    default: true,
+                    type: "boolean",
+                },
+                useZip: {
+                    default: false,
+                    type: "boolean",
+                },
+                customNsisBinary: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/CustomNsisBinary",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                debugLogging: {
+                    description: "Whether or not to enable NSIS logging for debugging.\nNote: Requires a debug-enabled NSIS build.\nelectron-builder's included `makensis` only supports building debug-enabled NSIS installers on Windows currently\nhttps://github.com/electron-userland/electron-builder/issues/5119#issuecomment-811353612",
+                    type: ["null", "boolean"],
+                },
+                runAfterFinish: {
+                    description: "Whether to run the installed application after finish. For assisted installer corresponding checkbox will be removed.",
+                    default: true,
+                    type: "boolean",
+                },
+                createDesktopShortcut: {
+                    description: "Whether to create desktop shortcut. Set to `always` if to recreate also on reinstall (even if removed by user).",
+                    default: true,
+                    enum: ["always", false, true],
+                },
+                createStartMenuShortcut: {
+                    description: "Whether to create start menu shortcut.",
+                    default: true,
+                    type: "boolean",
+                },
+                menuCategory: {
+                    description: "Whether to create submenu for start menu shortcut and program files directory. If `true`, company name will be used. Or string value.",
+                    default: false,
+                    type: ["string", "boolean"],
+                },
+                shortcutName: {
+                    description: "The name that will be used for all shortcuts. Defaults to the application name.",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        PortableOptions: {
+            description: "Portable options.",
+            type: "object",
+            properties: {
+                requestExecutionLevel: {
+                    description: "The [requested execution level](http://nsis.sourceforge.net/Reference/RequestExecutionLevel) for Windows.",
+                    default: "user",
+                    enum: ["admin", "highest", "user"],
+                    type: "string",
+                },
+                unpackDirName: {
+                    description: "The unpack directory for the portable app resources.\n\nIf set to a string, it will be the name in [TEMP](https://www.askvg.com/where-does-windows-store-temporary-files-and-how-to-change-temp-folder-location/) directory\nIf set explicitly to `false`, it will use the Windows temp directory ($PLUGINSDIR) that is unique to each launch of the portable application.\n\nDefaults to [uuid](https://github.com/segmentio/ksuid) of build (changed on each build of portable executable).",
+                    type: ["string", "boolean"],
+                },
+                splashImage: {
+                    description: "The image to show while the portable executable is extracting. This image must be a bitmap (`.bmp`) image.",
+                    type: ["null", "string"],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                unicode: {
+                    description: "Whether to create [Unicode installer](http://nsis.sourceforge.net/Docs/Chapter1.html#intro-unicode).",
+                    default: true,
+                    type: "boolean",
+                },
+                guid: {
+                    description: "See [GUID vs Application Name](../configuration/nsis#guid-vs-application-name).",
+                    type: ["null", "string"],
+                },
+                warningsAsErrors: {
+                    description: "If `warningsAsErrors` is `true` (default): NSIS will treat warnings as errors. If `warningsAsErrors` is `false`: NSIS will allow warnings.",
+                    default: true,
+                    type: "boolean",
+                },
+                useZip: {
+                    default: false,
+                    type: "boolean",
+                },
+                customNsisBinary: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/CustomNsisBinary",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                debugLogging: {
+                    description: "Whether or not to enable NSIS logging for debugging.\nNote: Requires a debug-enabled NSIS build.\nelectron-builder's included `makensis` only supports building debug-enabled NSIS installers on Windows currently\nhttps://github.com/electron-userland/electron-builder/issues/5119#issuecomment-811353612",
+                    type: ["null", "boolean"],
+                },
+            },
+        },
+        AppXOptions: {
+            type: "object",
+            properties: {
+                applicationId: {
+                    description: "The application id. Defaults to `identityName`. Can’t start with numbers.",
+                    type: "string",
+                },
+                backgroundColor: {
+                    description: "The background color of the app tile. See [Visual Elements](https://msdn.microsoft.com/en-us/library/windows/apps/br211471.aspx).",
+                    default: "#464646",
+                    type: ["null", "string"],
+                },
+                displayName: {
+                    description: "A friendly name that can be displayed to users. Corresponds to [Properties.DisplayName](https://msdn.microsoft.com/en-us/library/windows/apps/br211432.aspx).\nDefaults to the application product name.",
+                    type: ["null", "string"],
+                },
+                identityName: {
+                    description: "The name. Corresponds to [Identity.Name](https://msdn.microsoft.com/en-us/library/windows/apps/br211441.aspx). Defaults to the [application name](/configuration/configuration#Metadata-name).",
+                    type: ["null", "string"],
+                },
+                publisher: {
+                    description: "The Windows Store publisher. Not used if AppX is build for testing. See [AppX Package Code Signing](#appx-package-code-signing) below.",
+                    type: ["null", "string"],
+                },
+                publisherDisplayName: {
+                    description: "A friendly name for the publisher that can be displayed to users. Corresponds to [Properties.PublisherDisplayName](https://msdn.microsoft.com/en-us/library/windows/apps/br211460.aspx).\nDefaults to company name from the application metadata.",
+                    type: ["null", "string"],
+                },
+                languages: {
+                    description: "The list of [supported languages](https://docs.microsoft.com/en-us/windows/uwp/globalizing/manage-language-and-region#specify-the-supported-languages-in-the-apps-manifest) that will be listed in the Windows Store.\nThe first entry (index 0) will be the default language.\nDefaults to en-US if omitted.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                addAutoLaunchExtension: {
+                    description: "Whether to add auto launch extension. Defaults to `true` if [electron-winstore-auto-launch](https://github.com/felixrieseberg/electron-winstore-auto-launch) in the dependencies.",
+                    type: "boolean",
+                },
+                customExtensionsPath: {
+                    description: "Relative path to custom extensions xml to be included in an `appmanifest.xml`.",
+                    type: "string",
+                },
+                showNameOnTiles: {
+                    description: "Whether to overlay the app's name on top of tile images on the Start screen. Defaults to `false`. (https://docs.microsoft.com/en-us/uwp/schemas/appxpackage/uapmanifestschema/element-uap-shownameontiles) in the dependencies.",
+                    default: false,
+                    type: "boolean",
+                },
+                electronUpdaterAware: {
+                    default: false,
+                    type: "boolean",
+                },
+                setBuildNumber: {
+                    description: "Whether to set build number. See https://github.com/electron-userland/electron-builder/issues/3875",
+                    default: false,
+                    type: "boolean",
+                },
+                makeappxArgs: {
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        MsiOptions: {
+            type: "object",
+            properties: {
+                oneClick: {
+                    description: "One-click installation.",
+                    default: true,
+                    type: "boolean",
+                },
+                upgradeCode: {
+                    description: "The [upgrade code](https://msdn.microsoft.com/en-us/library/windows/desktop/aa372375(v=vs.85).aspx). Optional, by default generated using app id.",
+                    type: ["null", "string"],
+                },
+                warningsAsErrors: {
+                    description: "If `warningsAsErrors` is `true` (default): treat warnings as errors. If `warningsAsErrors` is `false`: allow warnings.",
+                    default: true,
+                    type: "boolean",
+                },
+                additionalWixArgs: {
+                    description: 'Any additional arguments to be passed to the WiX installer compiler, such as `["-ext", "WixUtilExtension"]`',
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                perMachine: {
+                    description: "Whether to install per all users (per-machine).",
+                    default: false,
+                    type: "boolean",
+                },
+                runAfterFinish: {
+                    description: "Whether to run the installed application after finish. For assisted installer corresponding checkbox will be removed.",
+                    default: true,
+                    type: "boolean",
+                },
+                createDesktopShortcut: {
+                    description: "Whether to create desktop shortcut. Set to `always` if to recreate also on reinstall (even if removed by user).",
+                    default: true,
+                    enum: ["always", false, true],
+                },
+                createStartMenuShortcut: {
+                    description: "Whether to create start menu shortcut.",
+                    default: true,
+                    type: "boolean",
+                },
+                menuCategory: {
+                    description: "Whether to create submenu for start menu shortcut and program files directory. If `true`, company name will be used. Or string value.",
+                    default: false,
+                    type: ["string", "boolean"],
+                },
+                shortcutName: {
+                    description: "The name that will be used for all shortcuts. Defaults to the application name.",
+                    type: ["null", "string"],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        SquirrelWindowsOptions: {
+            type: "object",
+            properties: {
+                iconUrl: {
+                    description: "A URL to an ICO file to use as the application icon (displayed in Control Panel > Programs and Features). Defaults to the Electron icon.\n\nPlease note — [local icon file url is not accepted](https://github.com/atom/grunt-electron-installer/issues/73), must be https/http.\n\nIf you don't plan to build windows installer, you can omit it.\nIf your project repository is public on GitHub, it will be `https://github.com/${u}/${p}/blob/master/build/icon.ico?raw=true` by default.",
+                    type: ["null", "string"],
+                },
+                loadingGif: {
+                    description: "The path to a .gif file to display during install. `build/install-spinner.gif` will be used if exists (it is a recommended way to set)\n(otherwise [default](https://github.com/electron/windows-installer/blob/master/resources/install-spinner.gif)).",
+                    type: ["null", "string"],
+                },
+                msi: {
+                    description: "Whether to create an MSI installer. Defaults to `false` (MSI is not created).",
+                    type: "boolean",
+                },
+                remoteReleases: {
+                    description: "A URL to your existing updates. Or `true` to automatically set to your GitHub repository. If given, these will be downloaded to create delta updates.",
+                    type: ["null", "string", "boolean"],
+                },
+                remoteToken: {
+                    description: "Authentication token for remote updates",
+                    type: ["null", "string"],
+                },
+                useAppIdAsId: {
+                    description: "Use `appId` to identify package instead of `name`.",
+                    type: "boolean",
+                },
+                name: {
+                    description: "https://github.com/electron-userland/electron-builder/issues/1743",
+                    type: "string",
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        LinuxConfiguration: {
+            type: "object",
+            properties: {
+                target: {
+                    description: "Target package type: list of `AppImage`, `snap`, `deb`, `rpm`, `freebsd`, `pacman`, `p5p`, `apk`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir`.\n\nelectron-builder [docker image](/multi-platform-build#docker) can be used to build Linux targets on any platform.\n\nPlease [do not put an AppImage into another archive](https://github.com/probonopd/AppImageKit/wiki/Creating-AppImages#common-mistake) like a .zip or .tar.gz.",
+                    default: "AppImage",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/TargetConfiguration",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/TargetConfiguration",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                maintainer: {
+                    description: "The maintainer. Defaults to [author](/configuration/configuration#Metadata-author).",
+                    type: ["null", "string"],
+                },
+                vendor: {
+                    description: "The vendor. Defaults to [author](/configuration/configuration#Metadata-author).",
+                    type: ["null", "string"],
+                },
+                icon: {
+                    description: "The path to icon set directory or one png file, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory. The icon filename must contain the size (e.g. 32x32.png) of the icon.\nBy default will be generated automatically based on the macOS icns file.",
+                    type: "string",
+                },
+                packageCategory: {
+                    description: "backward compatibility + to allow specify fpm-only category for all possible fpm targets in one place",
+                    type: ["null", "string"],
+                },
+                synopsis: {
+                    description: "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
+                    type: ["null", "string"],
+                },
+                description: {
+                    description: "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
+                    type: ["null", "string"],
+                },
+                category: {
+                    description: "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
+                    type: ["null", "string"],
+                },
+                mimeTypes: {
+                    description: "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                desktop: {
+                    description: "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value).",
+                },
+                executableArgs: {
+                    description: "The executable parameters. Pass to executableName",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                appId: {
+                    description: "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
+                    default: "com.electron.${name}",
+                    type: ["null", "string"],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
+                    type: ["null", "string"],
+                },
+                executableName: {
+                    description: "The executable name. Defaults to `productName`.",
+                    type: ["null", "string"],
+                },
+                compression: {
+                    description: "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
+                    default: "normal",
+                    anyOf: [
+                        {
+                            enum: ["maximum", "normal", "store"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                files: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                extraResources: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                extraFiles: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                asar: {
+                    description: "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work.",
+                    default: true,
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/AsarOptions",
+                        },
+                        {
+                            type: ["null", "boolean"],
+                        },
+                    ],
+                },
+                asarUnpack: {
+                    description: "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                fileAssociations: {
+                    description: "The file associations.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileAssociation",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                $ref: "#/definitions/FileAssociation",
+                            },
+                        },
+                    ],
+                },
+                protocols: {
+                    description: "The URL protocol schemes.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/Protocol",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                $ref: "#/definitions/Protocol",
+                            },
+                        },
+                    ],
+                },
+                forceCodeSigning: {
+                    description: "Whether to fail if app will be not code signed.",
+                    type: "boolean",
+                },
+                electronUpdaterCompatibility: {
+                    description: "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                detectUpdateChannel: {
+                    description: "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
+                    default: true,
+                    type: "boolean",
+                },
+                generateUpdatesFilesForAllChannels: {
+                    description: "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
+                    default: false,
+                    type: "boolean",
+                },
+                releaseInfo: {
+                    description: 'The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes="new features"\n```',
+                    $ref: "#/definitions/ReleaseInfo",
+                },
+                cscLink: {
+                    type: ["null", "string"],
+                },
+                cscKeyPassword: {
+                    type: ["null", "string"],
+                },
+                defaultArch: {
+                    type: "string",
+                },
+            },
+        },
+        DebOptions: {
+            type: "object",
+            properties: {
+                depends: {
+                    description: 'Package dependencies. Defaults to `["gconf2", "gconf-service", "libnotify4", "libappindicator1", "libxtst6", "libnss3"]`.',
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                packageCategory: {
+                    description: "The [package category](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Section).",
+                    type: ["null", "string"],
+                },
+                priority: {
+                    description: "The [Priority](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Priority) attribute.",
+                    type: ["null", "string"],
+                },
+                compression: {
+                    description: "The compression type.",
+                    default: "xz",
+                    anyOf: [
+                        {
+                            enum: ["bzip2", "gz", "xz"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                icon: {
+                    type: "string",
+                },
+                packageName: {
+                    description: "The name of the package.",
+                    type: ["null", "string"],
+                },
+                vendor: {
+                    type: ["null", "string"],
+                },
+                maintainer: {
+                    type: ["null", "string"],
+                },
+                afterInstall: {
+                    type: ["null", "string"],
+                },
+                afterRemove: {
+                    type: ["null", "string"],
+                },
+                fpm: {
+                    description: '*Advanced only* The [fpm](https://github.com/jordansissel/fpm/wiki#usage) options.\n\nExample: `["--before-install=build/deb-preinstall.sh", "--after-upgrade=build/deb-postinstall.sh"]`',
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                synopsis: {
+                    description: "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
+                    type: ["null", "string"],
+                },
+                description: {
+                    description: "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
+                    type: ["null", "string"],
+                },
+                category: {
+                    description: "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
+                    type: ["null", "string"],
+                },
+                mimeTypes: {
+                    description: "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                desktop: {
+                    description: "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value).",
+                },
+                executableArgs: {
+                    description: "The executable parameters. Pass to executableName",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        SnapOptions: {
+            type: "object",
+            properties: {
+                confinement: {
+                    description: "The type of [confinement](https://snapcraft.io/docs/reference/confinement) supported by the snap.",
+                    default: "strict",
+                    anyOf: [
+                        {
+                            enum: ["classic", "devmode", "strict"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                environment: {
+                    description: 'The custom environment. Defaults to `{"TMPDIR: "$XDG_RUNTIME_DIR"}`. If you set custom, it will be merged with default.',
+                    anyOf: [
+                        {
+                            type: "object",
+                            additionalProperties: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                summary: {
+                    description: "The 78 character long summary. Defaults to [productName](/configuration/configuration#Configuration-productName).",
+                    type: ["null", "string"],
+                },
+                grade: {
+                    description: "The quality grade of the snap. It can be either `devel` (i.e. a development version of the snap, so not to be published to the “stable” or “candidate” channels) or “stable” (i.e. a stable release or release candidate, which can be released to all channels).",
+                    default: "stable",
+                    anyOf: [
+                        {
+                            enum: ["devel", "stable"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                assumes: {
+                    description: "The list of features that must be supported by the core in order for this snap to install.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                buildPackages: {
+                    description: "The list of debian packages needs to be installed for building this snap.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                stagePackages: {
+                    description: 'The list of Ubuntu packages to use that are needed to support the `app` part creation. Like `depends` for `deb`.\nDefaults to `["libnspr4", "libnss3", "libxss1", "libappindicator3-1", "libsecret-1-0"]`.\n\nIf list contains `default`, it will be replaced to default list, so, `["default", "foo"]` can be used to add custom package `foo` in addition to defaults.',
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                hooks: {
+                    description: "The [hooks](https://docs.snapcraft.io/build-snaps/hooks) directory, relative to `build` (build resources directory).",
+                    default: "build/snap-hooks",
+                    type: ["null", "string"],
+                },
+                plugs: {
+                    description: 'The list of [plugs](https://snapcraft.io/docs/reference/interfaces).\nDefaults to `["desktop", "desktop-legacy", "home", "x11", "unity7", "browser-support", "network", "gsettings", "audio-playback", "pulseaudio", "opengl"]`.\n\nIf list contains `default`, it will be replaced to default list, so, `["default", "foo"]` can be used to add custom plug `foo` in addition to defaults.\n\nAdditional attributes can be specified using object instead of just name of plug:\n```\n[\n {\n   "browser-sandbox": {\n     "interface": "browser-support",\n     "allow-sandbox": true\n   },\n },\n "another-simple-plug-name"\n]\n```',
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/PlugDescriptor",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/PlugDescriptor",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                slots: {
+                    description: 'The list of [slots](https://snapcraft.io/docs/reference/interfaces).\n\nAdditional attributes can be specified using object instead of just name of slot:\n```\n[\n {\n   "mpris": {\n     "name": "chromium"\n   },\n }\n]\n\nIn case you want your application to be a compliant MPris player, you will need to definie\nThe mpris slot with "chromium" name.\nThis electron has it [hardcoded](https://source.chromium.org/chromium/chromium/src/+/master:components/system_media_controls/linux/system_media_controls_linux.cc;l=51;bpv=0;bpt=1),\nand we need to pass this name so snap [will allow it](https://forum.snapcraft.io/t/unable-to-use-mpris-interface/15360/7) in strict confinement.',
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/PlugDescriptor",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/SlotDescriptor",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                after: {
+                    description: 'Specifies any [parts](https://snapcraft.io/docs/reference/parts) that should be built before this part.\nDefaults to `["desktop-gtk2""]`.\n\nIf list contains `default`, it will be replaced to default list, so, `["default", "foo"]` can be used to add custom parts `foo` in addition to defaults.',
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                useTemplateApp: {
+                    description: "Whether to use template snap. Defaults to `true` if `stagePackages` not specified.",
+                    type: "boolean",
+                },
+                autoStart: {
+                    description: "Whether or not the snap should automatically start on login.",
+                    default: false,
+                    type: "boolean",
+                },
+                layout: {
+                    description: "Specifies any files to make accessible from locations such as `/usr`, `/var`, and `/etc`. See [snap layouts](https://snapcraft.io/docs/snap-layouts) to learn more.",
+                    anyOf: [
+                        {
+                            type: "object",
+                            additionalProperties: {
+                                type: "object",
+                                additionalProperties: {
+                                    type: "string",
+                                },
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                appPartStage: {
+                    description: "Specifies which files from the app part to stage and which to exclude. Individual files, directories, wildcards, globstars, and exclusions are accepted. See [Snapcraft filesets](https://snapcraft.io/docs/snapcraft-filesets) to learn more about the format.\n\nThe defaults can be found in [snap.ts](https://github.com/electron-userland/electron-builder/blob/master/packages/app-builder-lib/templates/snap/snapcraft.yaml#L29).",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                title: {
+                    description: "An optional title for the snap, may contain uppercase letters and spaces. Defaults to `productName`. See [snap format documentation](https://snapcraft.io/docs/snap-format).",
+                    type: ["null", "string"],
+                },
+                synopsis: {
+                    description: "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
+                    type: ["null", "string"],
+                },
+                description: {
+                    description: "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
+                    type: ["null", "string"],
+                },
+                category: {
+                    description: "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
+                    type: ["null", "string"],
+                },
+                mimeTypes: {
+                    description: "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                desktop: {
+                    description: "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value).",
+                },
+                executableArgs: {
+                    description: "The executable parameters. Pass to executableName",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        PlugDescriptor: {
+            type: "object",
+            additionalProperties: {
+                anyOf: [
+                    {
+                        type: "object",
+                        additionalProperties: {},
+                    },
+                    {
+                        type: "null",
+                    },
+                ],
+            },
+        },
+        SlotDescriptor: {
+            type: "object",
+            additionalProperties: {
+                anyOf: [
+                    {
+                        type: "object",
+                        additionalProperties: {},
+                    },
+                    {
+                        type: "null",
+                    },
+                ],
+            },
+        },
+        AppImageOptions: {
+            type: "object",
+            properties: {
+                license: {
+                    description: "The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). Only plain text is supported.",
+                    type: ["null", "string"],
+                },
+                synopsis: {
+                    description: "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
+                    type: ["null", "string"],
+                },
+                description: {
+                    description: "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
+                    type: ["null", "string"],
+                },
+                category: {
+                    description: "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
+                    type: ["null", "string"],
+                },
+                mimeTypes: {
+                    description: "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                desktop: {
+                    description: "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value).",
+                },
+                executableArgs: {
+                    description: "The executable parameters. Pass to executableName",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        FlatpakOptions: {
+            type: "object",
+            properties: {
+                license: {
+                    description: "The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). Only plain text is supported.",
+                    type: ["null", "string"],
+                },
+                runtime: {
+                    description: "The name of the runtime that the application uses. Defaults to `org.freedesktop.Platform`.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    type: "string",
+                },
+                runtimeVersion: {
+                    description: "The version of the runtime that the application uses. Defaults to `20.08`.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    type: "string",
+                },
+                sdk: {
+                    description: "The name of the development runtime that the application builds with. Defaults to `org.freedesktop.Sdk`.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    type: "string",
+                },
+                base: {
+                    description: "Start with the files from the specified application. This can be used to create applications that extend another application.\nDefaults to [org.electronjs.Electron2.BaseApp](https://github.com/flathub/org.electronjs.Electron2.BaseApp).\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    type: "string",
+                },
+                baseVersion: {
+                    description: "Use this specific version of the application specified in base. Defaults to `20.08`.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    type: "string",
+                },
+                branch: {
+                    description: "The branch to use when exporting the application. Defaults to `master`.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    type: "string",
+                },
+                finishArgs: {
+                    description: 'An array of arguments passed to the flatpak build-finish command. Defaults to:\n```json\n[\n  // Wayland/X11 Rendering\n  "--socket=wayland",\n  "--socket=x11",\n  "--share=ipc",\n  // Open GL\n  "--device=dri",\n  // Audio output\n  "--socket=pulseaudio",\n  // Read/write home directory access\n  "--filesystem=home",\n  // Allow communication with network\n  "--share=network",\n  // System notifications with libnotify\n  "--talk-name=org.freedesktop.Notifications",\n]\n```\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).',
+                    type: "array",
+                    items: {
+                        type: "string",
+                    },
+                },
+                modules: {
+                    description: "An array of objects specifying the modules to be built in order.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    type: "array",
+                    items: {},
+                },
+                files: {
+                    description: "Files to copy directly into the app. Should be a list of [source, dest] tuples. Source should be a relative/absolute path to a file/directory to copy into the flatpak, and dest should be the path inside the app install prefix (e.g. /share/applications/).\n\nSee [@malept/flatpak-bundler documentation](https://github.com/malept/flatpak-bundler#build-options).",
+                    type: "array",
+                    items: {
+                        type: "array",
+                        items: [
+                            {
+                                type: "string",
+                            },
+                            {
+                                type: "string",
+                            },
+                        ],
+                        minItems: 2,
+                        maxItems: 2,
+                    },
+                },
+                symlinks: {
+                    description: "Symlinks to create in the app files. Should be a list of [target, location] symlink tuples. Target can be either a relative or absolute path inside the app install prefix, and location should be a absolute path inside the prefix to create the symlink at.\n\nSee [@malept/flatpak-bundler documentation](https://github.com/malept/flatpak-bundler#build-options).",
+                    type: "array",
+                    items: {
+                        type: "array",
+                        items: [
+                            {
+                                type: "string",
+                            },
+                            {
+                                type: "string",
+                            },
+                        ],
+                        minItems: 2,
+                        maxItems: 2,
+                    },
+                },
+                useWaylandFlags: {
+                    description: "Whether to enable the Wayland specific flags (`--enable-features=UseOzonePlatform --ozone-platform=wayland`) in the wrapper script. These flags are only available starting with Electron version 12. Defaults to `false`.",
+                    type: "boolean",
+                },
+                synopsis: {
+                    description: "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
+                    type: ["null", "string"],
+                },
+                description: {
+                    description: "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
+                    type: ["null", "string"],
+                },
+                category: {
+                    description: "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
+                    type: ["null", "string"],
+                },
+                mimeTypes: {
+                    description: "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                desktop: {
+                    description: "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value).",
+                },
+                executableArgs: {
+                    description: "The executable parameters. Pass to executableName",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        LinuxTargetSpecificOptions: {
+            type: "object",
+            properties: {
+                depends: {
+                    description: "Package dependencies.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                compression: {
+                    description: "The compression type.",
+                    default: "xz",
+                    anyOf: [
+                        {
+                            enum: ["bzip2", "gz", "xz"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                icon: {
+                    type: "string",
+                },
+                packageCategory: {
+                    description: "The package category.",
+                    type: ["null", "string"],
+                },
+                packageName: {
+                    description: "The name of the package.",
+                    type: ["null", "string"],
+                },
+                vendor: {
+                    type: ["null", "string"],
+                },
+                maintainer: {
+                    type: ["null", "string"],
+                },
+                afterInstall: {
+                    type: ["null", "string"],
+                },
+                afterRemove: {
+                    type: ["null", "string"],
+                },
+                fpm: {
+                    description: '*Advanced only* The [fpm](https://github.com/jordansissel/fpm/wiki#usage) options.\n\nExample: `["--before-install=build/deb-preinstall.sh", "--after-upgrade=build/deb-postinstall.sh"]`',
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                synopsis: {
+                    description: "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
+                    type: ["null", "string"],
+                },
+                description: {
+                    description: "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
+                    type: ["null", "string"],
+                },
+                category: {
+                    description: "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
+                    type: ["null", "string"],
+                },
+                mimeTypes: {
+                    description: "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                desktop: {
+                    description: "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value).",
+                },
+                executableArgs: {
+                    description: "The executable parameters. Pass to executableName",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        ElectronDownloadOptions: {
+            type: "object",
+            properties: {
+                version: {
+                    type: "string",
+                },
+                cache: {
+                    description: "The [cache location](https://github.com/electron-userland/electron-download#cache-location).",
+                    type: ["null", "string"],
+                },
+                mirror: {
+                    description: "The mirror.",
+                    type: ["null", "string"],
+                },
+                customDir: {
+                    type: ["null", "string"],
+                },
+                customFilename: {
+                    type: ["null", "string"],
+                },
+                strictSSL: {
+                    type: "boolean",
+                },
+                isVerifyChecksum: {
+                    type: "boolean",
+                },
+                platform: {
+                    enum: ["darwin", "linux", "mas", "win32"],
+                    type: "string",
+                },
+                arch: {
+                    type: "string",
+                },
+            },
+        },
+        ElectronBrandingOptions: {
+            description: "Electron distributables branding options.",
+            type: "object",
+            properties: {
+                projectName: {
+                    type: "string",
+                },
+                productName: {
+                    type: "string",
+                },
+            },
+        },
+        "PlatformPackager<any>": {
+            type: "object",
+            properties: {
+                packagerOptions: {
+                    $ref: "#/definitions/PackagerOptions",
+                },
+                buildResourcesDir: {
+                    type: "string",
+                },
+                projectDir: {
+                    type: "string",
+                },
+                config: {
+                    $ref: "#/definitions/Configuration",
+                },
+                platformSpecificBuildOptions: {},
+                resourceList: {
+                    $ref: "#/definitions/Promise<string[]>",
+                },
+                _resourceList: {
+                    $ref: "#/definitions/Lazy<string[]>",
+                },
+                appInfo: {
+                    $ref: "#/definitions/AppInfo",
+                },
+                info: {
+                    $ref: "#/definitions/Packager",
+                },
+                platform: {
+                    $ref: "#/definitions/Platform",
+                },
+                compression: {
+                    $ref: "#/definitions/CompressionLevel",
+                },
+                debugLogger: {
+                    $ref: "#/definitions/DebugLogger",
+                },
+                defaultTarget: {
+                    type: "array",
+                    items: {
+                        type: "string",
+                    },
+                },
+                fileAssociations: {
+                    type: "array",
+                    items: {
+                        $ref: "#/definitions/FileAssociation",
+                    },
+                },
+                forceCodeSigning: {
+                    type: "boolean",
+                },
+            },
+            required: [
+                "_resourceList",
+                "appInfo",
+                "buildResourcesDir",
+                "compression",
+                "config",
+                "debugLogger",
+                "defaultTarget",
+                "fileAssociations",
+                "forceCodeSigning",
+                "info",
+                "packagerOptions",
+                "platform",
+                "platformSpecificBuildOptions",
+                "projectDir",
+                "resourceList",
+            ],
+        },
+        PackagerOptions: {
+            type: "object",
+            properties: {
+                targets: {
+                    $ref: "#/definitions/Map<Platform,Map<Arch,string[]>>",
+                },
+                mac: {
+                    type: "array",
+                    items: {
+                        type: "string",
+                    },
+                },
+                linux: {
+                    type: "array",
+                    items: {
+                        type: "string",
+                    },
+                },
+                win: {
+                    type: "array",
+                    items: {
+                        type: "string",
+                    },
+                },
+                projectDir: {
+                    type: ["null", "string"],
+                },
+                platformPackagerFactory: {
+                    type: ["null", "object"],
+                },
+                config: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/Configuration",
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                effectiveOptionComputed: {
+                    type: "object",
+                },
+                prepackaged: {
+                    type: ["null", "string"],
+                },
+            },
+        },
+        "Map<Platform,Map<Arch,string[]>>": {
+            type: "object",
+            properties: {
+                size: {
+                    type: "number",
+                },
+                "__@toStringTag": {
+                    type: "string",
+                },
+            },
+            required: ["__@toStringTag", "size"],
+        },
+        Configuration: {
+            description: "Configuration Options",
+            type: "object",
+            properties: {
+                appId: {
+                    description: "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
+                    default: "com.electron.${name}",
+                    type: ["null", "string"],
+                },
+                productName: {
+                    description: "As [name](#Metadata-name), but allows you to specify a product name for your executable which contains spaces and other special characters not allowed in the [name property](https://docs.npmjs.com/files/package.json#name).",
+                    type: ["null", "string"],
+                },
+                copyright: {
+                    description: "The human-readable copyright line for the app.",
+                    default: "Copyright © year ${author}",
+                    type: ["null", "string"],
+                },
+                directories: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/MetadataDirectories",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                mac: {
+                    description: "Options related to how build macOS targets.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/MacConfiguration",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                mas: {
+                    description: "MAS (Mac Application Store) options.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/MasConfiguration",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                masDev: {
+                    description: "MAS (Mac Application Store) development options (`mas-dev` target).",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/MasConfiguration",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                dmg: {
+                    description: "macOS DMG options.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/DmgOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                pkg: {
+                    description: "macOS PKG options.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/PkgOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                win: {
+                    description: "Options related to how build Windows targets.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/WindowsConfiguration",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                nsis: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/NsisOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                nsisWeb: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/NsisWebOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                portable: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/PortableOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                appx: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/AppXOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                msi: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/MsiOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                squirrelWindows: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/SquirrelWindowsOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                linux: {
+                    description: "Options related to how build Linux targets.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/LinuxConfiguration",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                deb: {
+                    description: "Debian package options.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/DebOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                snap: {
+                    description: "Snap options.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/SnapOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                appImage: {
+                    description: "AppImage options.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/AppImageOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                flatpak: {
+                    description: "Flatpak options.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FlatpakOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                pacman: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/LinuxTargetSpecificOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                rpm: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/LinuxTargetSpecificOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                freebsd: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/LinuxTargetSpecificOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                p5p: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/LinuxTargetSpecificOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                apk: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/LinuxTargetSpecificOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                includeSubNodeModules: {
+                    description: "Whether to include *all* of the submodules node_modules directories",
+                    default: false,
+                    type: "boolean",
+                },
+                buildDependenciesFromSource: {
+                    description: "Whether to build the application native dependencies from source.",
+                    default: false,
+                    type: "boolean",
+                },
+                nodeGypRebuild: {
+                    description: "Whether to execute `node-gyp rebuild` before starting to package the app.\n\nDon't [use](https://github.com/electron-userland/electron-builder/issues/683#issuecomment-241214075) [npm](http://electron.atom.io/docs/tutorial/using-native-node-modules/#using-npm) (neither `.npmrc`) for configuring electron headers. Use `electron-builder node-gyp-rebuild` instead.",
+                    default: false,
+                    type: "boolean",
+                },
+                npmArgs: {
+                    description: "Additional command line arguments to use when installing app native deps.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                npmRebuild: {
+                    description: "Whether to [rebuild](https://docs.npmjs.com/cli/rebuild) native dependencies before starting to package the app.",
+                    default: true,
+                    type: "boolean",
+                },
+                buildVersion: {
+                    description: "The build version. Maps to the `CFBundleVersion` on macOS, and `FileVersion` metadata property on Windows. Defaults to the `version`.\nIf `TRAVIS_BUILD_NUMBER` or `APPVEYOR_BUILD_NUMBER` or `CIRCLE_BUILD_NUM` or `BUILD_NUMBER` or `bamboo.buildNumber` or `CI_PIPELINE_IID` env defined, it will be used as a build version (`version.build_number`).",
+                    type: ["null", "string"],
+                },
+                electronCompile: {
+                    description: "Whether to use [electron-compile](http://github.com/electron/electron-compile) to compile app. Defaults to `true` if `electron-compile` in the dependencies. And `false` if in the `devDependencies` or doesn't specified.",
+                    type: "boolean",
+                },
+                electronDist: {
+                    description: "Returns the path to custom Electron build (e.g. `~/electron/out/R`). Zip files must follow the pattern `electron-v${version}-${platformName}-${arch}.zip`, otherwise it will be assumed to be an unpacked Electron app directory",
+                    type: ["string", "object"],
+                },
+                electronDownload: {
+                    description: "The [electron-download](https://github.com/electron-userland/electron-download#usage) options.",
+                    $ref: "#/definitions/ElectronDownloadOptions",
+                },
+                electronBranding: {
+                    description: "The branding used by Electron's distributables. This is needed if a fork has modified Electron's BRANDING.json file.",
+                    $ref: "#/definitions/ElectronBrandingOptions",
+                },
+                electronVersion: {
+                    description: "The version of electron you are packaging for. Defaults to version of `electron`, `electron-prebuilt` or `electron-prebuilt-compile` dependency.",
+                    type: ["null", "string"],
+                },
+                extends: {
+                    description: "The name of a built-in configuration preset (currently, only `react-cra` is supported) or any number of paths to config files (relative to project dir).\n\nThe latter allows to mixin a config from multiple other configs, as if you `Object.assign` them, but properly combine `files` glob patterns.\n\nIf `react-scripts` in the app dependencies, `react-cra` will be set automatically. Set to `null` to disable automatic detection.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                extraMetadata: {
+                    description: "Inject properties to `package.json`.",
+                },
+                forceCodeSigning: {
+                    description: "Whether to fail if the application is not signed (to prevent unsigned app if code signing configuration is not correct).",
+                    default: false,
+                    type: "boolean",
+                },
+                nodeVersion: {
+                    description: "*libui-based frameworks only* The version of NodeJS you are packaging for.\nYou can set it to `current` to set the Node.js version that you use to run.",
+                    type: ["null", "string"],
+                },
+                launchUiVersion: {
+                    description: "*libui-based frameworks only* The version of LaunchUI you are packaging for. Applicable for Windows only. Defaults to version suitable for used framework version.",
+                    type: ["null", "string", "boolean"],
+                },
+                framework: {
+                    description: "The framework name. One of `electron`, `proton`, `libui`. Defaults to `electron`.",
+                    type: ["null", "string"],
+                },
+                afterPack: {
+                    description: "The function (or path to file or module id) to be [run after pack](#afterpack) (but before pack into distributable format and sign).",
+                    type: ["null", "string", "object"],
+                },
+                afterSign: {
+                    description: "The function (or path to file or module id) to be [run after pack and sign](#aftersign) (but before pack into distributable format).",
+                    type: ["null", "string", "object"],
+                },
+                artifactBuildStarted: {
+                    description: "The function (or path to file or module id) to be run on artifact build start.",
+                    type: ["null", "string", "object"],
+                },
+                artifactBuildCompleted: {
+                    description: "The function (or path to file or module id) to be run on artifact build completed.",
+                    type: ["null", "string", "object"],
+                },
+                afterAllArtifactBuild: {
+                    description: "The function (or path to file or module id) to be [run after all artifacts are build](#afterAllArtifactBuild).",
+                    type: ["null", "string", "object"],
+                },
+                msiProjectCreated: {
+                    description: "MSI project created on disk - not packed into .msi package yet.",
+                    type: ["null", "string", "object"],
+                },
+                appxManifestCreated: {
+                    description: "Appx manifest created on disk - not packed into .appx package yet.",
+                    type: ["null", "string", "object"],
+                },
+                onNodeModuleFile: {
+                    description: "The function (or path to file or module id) to be [run on each node module](#onnodemodulefile) file.",
+                    type: ["null", "string", "object"],
+                },
+                beforeBuild: {
+                    description: "The function (or path to file or module id) to be run before dependencies are installed or rebuilt. Works when `npmRebuild` is set to `true`. Resolving to `false` will skip dependencies install or rebuild.\n\nIf provided and `node_modules` are missing, it will not invoke production dependencies check.",
+                    type: ["null", "string", "object"],
+                },
+                remoteBuild: {
+                    description: "Whether to build using Electron Build Service if target not supported on current OS.",
+                    default: true,
+                    type: "boolean",
+                },
+                includePdb: {
+                    description: "Whether to include PDB files.",
+                    default: false,
+                    type: "boolean",
+                },
+                removePackageScripts: {
+                    description: "Whether to remove `scripts` field from `package.json` files.",
+                    default: true,
+                    type: "boolean",
+                },
+                removePackageKeywords: {
+                    description: "Whether to remove `keywords` field from `package.json` files.",
+                    default: true,
+                    type: "boolean",
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
+                    type: ["null", "string"],
+                },
+                executableName: {
+                    description: "The executable name. Defaults to `productName`.",
+                    type: ["null", "string"],
+                },
+                compression: {
+                    description: "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
+                    default: "normal",
+                    anyOf: [
+                        {
+                            enum: ["maximum", "normal", "store"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                files: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                extraResources: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                extraFiles: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                asar: {
+                    description: "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work.",
+                    default: true,
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/AsarOptions",
+                        },
+                        {
+                            type: ["null", "boolean"],
+                        },
+                    ],
+                },
+                asarUnpack: {
+                    description: "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                icon: {
+                    type: ["null", "string"],
+                },
+                fileAssociations: {
+                    description: "The file associations.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileAssociation",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                $ref: "#/definitions/FileAssociation",
+                            },
+                        },
+                    ],
+                },
+                protocols: {
+                    description: "The URL protocol schemes.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/Protocol",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                $ref: "#/definitions/Protocol",
+                            },
+                        },
+                    ],
+                },
+                electronUpdaterCompatibility: {
+                    description: "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                detectUpdateChannel: {
+                    description: "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
+                    default: true,
+                    type: "boolean",
+                },
+                generateUpdatesFilesForAllChannels: {
+                    description: "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
+                    default: false,
+                    type: "boolean",
+                },
+                releaseInfo: {
+                    description: 'The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes="new features"\n```',
+                    $ref: "#/definitions/ReleaseInfo",
+                },
+                target: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/TargetConfiguration",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/TargetConfiguration",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                cscLink: {
+                    type: ["null", "string"],
+                },
+                cscKeyPassword: {
+                    type: ["null", "string"],
+                },
+                defaultArch: {
+                    type: "string",
+                },
+            },
+        },
+        "Promise<string[]>": {
+            type: "object",
+            properties: {
+                "__@toStringTag": {
+                    type: "string",
+                },
+            },
+            required: ["__@toStringTag"],
+        },
+        "Lazy<string[]>": {
+            type: "object",
+            properties: {
+                _value: {},
+                creator: {},
+                hasValue: {
+                    type: "boolean",
+                },
+                value: {
+                    $ref: "#/definitions/Promise<string[]>",
+                },
+            },
+            required: ["_value", "creator", "hasValue", "value"],
+        },
+        AppInfo: {
+            type: "object",
+            properties: {
+                description: {
+                    type: "string",
+                },
+                version: {
+                    type: "string",
+                },
+                shortVersion: {
+                    type: "string",
+                },
+                shortVersionWindows: {
+                    type: "string",
+                },
+                buildNumber: {
+                    type: "string",
+                },
+                buildVersion: {
+                    type: "string",
+                },
+                productName: {
+                    type: "string",
+                },
+                sanitizedProductName: {
+                    type: "string",
+                },
+                productFilename: {
+                    type: "string",
+                },
+                info: {
+                    $ref: "#/definitions/Packager",
+                },
+                platformSpecificOptions: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/PlatformSpecificBuildOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                    default: null,
+                },
+                channel: {
+                    type: ["null", "string"],
+                },
+                notNullDevMetadata: {
+                    $ref: "#/definitions/Metadata",
+                },
+                companyName: {
+                    type: ["null", "string"],
+                },
+                id: {
+                    type: "string",
+                },
+                macBundleIdentifier: {
+                    type: "string",
+                },
+                name: {
+                    type: "string",
+                },
+                linuxPackageName: {
+                    type: "string",
+                },
+                sanitizedName: {
+                    type: "string",
+                },
+                updaterCacheDirName: {
+                    type: "string",
+                },
+                copyright: {
+                    type: "string",
+                },
+            },
+            required: [
+                "buildVersion",
+                "channel",
+                "companyName",
+                "copyright",
+                "description",
+                "id",
+                "info",
+                "linuxPackageName",
+                "macBundleIdentifier",
+                "name",
+                "notNullDevMetadata",
+                "platformSpecificOptions",
+                "productFilename",
+                "productName",
+                "sanitizedName",
+                "sanitizedProductName",
+                "updaterCacheDirName",
+                "version",
+            ],
+        },
+        Packager: {
+            type: "object",
+            properties: {
+                projectDir: {
+                    type: "string",
+                },
+                _appDir: {
+                    type: "string",
+                },
+                appDir: {
+                    type: "string",
+                },
+                _metadata: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/Metadata",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                    default: null,
+                },
+                metadata: {
+                    $ref: "#/definitions/Metadata",
+                },
+                _nodeModulesHandledExternally: {
+                    type: "boolean",
+                    default: false,
+                },
+                areNodeModulesHandledExternally: {
+                    type: "boolean",
+                },
+                _isPrepackedAppAsar: {
+                    type: "boolean",
+                    default: false,
+                },
+                isPrepackedAppAsar: {
+                    type: "boolean",
+                },
+                _devMetadata: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/Metadata",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                    default: null,
+                },
+                devMetadata: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/Metadata",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                _configuration: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/Configuration",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                    default: null,
+                },
+                config: {
+                    $ref: "#/definitions/Configuration",
+                },
+                isTwoPackageJsonProjectLayoutUsed: {
+                    type: "boolean",
+                    default: false,
+                },
+                eventEmitter: {
+                    $ref: "#/definitions/EventEmitter",
+                },
+                _appInfo: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/AppInfo",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                    default: null,
+                },
+                appInfo: {
+                    $ref: "#/definitions/AppInfo",
+                },
+                tempDirManager: {
+                    $ref: "#/definitions/TmpDir",
+                },
+                _repositoryInfo: {
+                    $ref: "#/definitions/Lazy<SourceRepositoryInfo|null>",
+                },
+                afterPackHandlers: {
+                    type: "array",
+                    items: {
+                        type: "object",
+                    },
+                    default: [],
+                },
+                options: {
+                    $ref: "#/definitions/PackagerOptions",
+                },
+                debugLogger: {
+                    $ref: "#/definitions/DebugLogger",
+                },
+                repositoryInfo: {
+                    $ref: "#/definitions/Promise<SourceRepositoryInfo|null>",
+                },
+                nodeDependencyInfo: {
+                    $ref: "#/definitions/Map<string,Lazy<any[]>>",
+                },
+                stageDirPathCustomizer: {
+                    type: "object",
+                },
+                _buildResourcesDir: {
+                    type: ["null", "string"],
+                    default: null,
+                },
+                buildResourcesDir: {
+                    type: "string",
+                },
+                relativeBuildResourcesDirname: {
+                    type: "string",
+                },
+                _framework: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/Framework",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                    default: null,
+                },
+                framework: {
+                    $ref: "#/definitions/Framework",
+                },
+                toDispose: {
+                    type: "array",
+                    items: {
+                        type: "object",
+                    },
+                    default: [],
+                },
+                cancellationToken: {
+                    $ref: "#/definitions/CancellationToken",
+                },
+            },
+            required: [
+                "_appDir",
+                "_appInfo",
+                "_buildResourcesDir",
+                "_configuration",
+                "_devMetadata",
+                "_framework",
+                "_isPrepackedAppAsar",
+                "_metadata",
+                "_nodeModulesHandledExternally",
+                "_repositoryInfo",
+                "afterPackHandlers",
+                "appDir",
+                "appInfo",
+                "areNodeModulesHandledExternally",
+                "buildResourcesDir",
+                "cancellationToken",
+                "config",
+                "debugLogger",
+                "devMetadata",
+                "eventEmitter",
+                "framework",
+                "isPrepackedAppAsar",
+                "isTwoPackageJsonProjectLayoutUsed",
+                "metadata",
+                "nodeDependencyInfo",
+                "options",
+                "projectDir",
+                "relativeBuildResourcesDirname",
+                "repositoryInfo",
+                "stageDirPathCustomizer",
+                "tempDirManager",
+                "toDispose",
+            ],
+        },
+        Metadata: {
+            type: "object",
+            properties: {
+                name: {
+                    description: "The application name.",
+                    type: "string",
+                },
+                description: {
+                    description: "The application description.",
+                    type: "string",
+                },
+                homepage: {
+                    description: "The url to the project [homepage](https://docs.npmjs.com/files/package.json#homepage) (NuGet Package `projectUrl` (optional) or Linux Package URL (required)).\n\nIf not specified and your project repository is public on GitHub, it will be `https://github.com/${user}/${project}` by default.",
+                    type: ["null", "string"],
+                },
+                license: {
+                    description: "*linux-only.* The [license](https://docs.npmjs.com/files/package.json#license) name.",
+                    type: ["null", "string"],
+                },
+                author: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/AuthorMetadata",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                repository: {
+                    description: "The [repository](https://docs.npmjs.com/files/package.json#repository).",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/RepositoryInfo",
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                build: {
+                    description: "The electron-builder configuration.",
+                    $ref: "#/definitions/Configuration",
+                },
+                dependencies: {
+                    type: "object",
+                    additionalProperties: {
+                        type: "string",
+                    },
+                },
+                version: {
+                    type: "string",
+                },
+                shortVersion: {
+                    type: ["null", "string"],
+                },
+                shortVersionWindows: {
+                    type: ["null", "string"],
+                },
+                productName: {
+                    type: ["null", "string"],
+                },
+                main: {
+                    type: ["null", "string"],
+                },
+            },
+        },
+        AuthorMetadata: {
+            type: "object",
+            properties: {
+                name: {
+                    type: "string",
+                },
+                email: {
+                    type: "string",
+                },
+            },
+            required: ["name"],
+        },
+        RepositoryInfo: {
+            type: "object",
+            properties: {
+                url: {
+                    type: "string",
+                },
+            },
+            required: ["url"],
+        },
+        EventEmitter: {
+            description: "The `EventEmitter` class is defined and exposed by the `events` module:\n\n```js\nconst EventEmitter = require('events');\n```\n\nAll `EventEmitter`s emit the event `'newListener'` when new listeners are\nadded and `'removeListener'` when existing listeners are removed.\n\nIt supports the following option:",
+            type: "object",
+        },
+        TmpDir: {
+            type: "object",
+            properties: {
+                debugName: {},
+                tempFiles: {},
+                registered: {},
+                rootTempDir: {
+                    $ref: "#/definitions/Promise<string>",
+                },
+            },
+            required: ["debugName", "registered", "rootTempDir", "tempFiles"],
+        },
+        "Promise<string>": {
+            type: "object",
+            properties: {
+                "__@toStringTag": {
+                    type: "string",
+                },
+            },
+            required: ["__@toStringTag"],
+        },
+        "Lazy<SourceRepositoryInfo|null>": {
+            type: "object",
+            properties: {
+                _value: {},
+                creator: {},
+                hasValue: {
+                    type: "boolean",
+                },
+                value: {
+                    $ref: "#/definitions/Promise<SourceRepositoryInfo|null>",
+                },
+            },
+            required: ["_value", "creator", "hasValue", "value"],
+        },
+        "Promise<SourceRepositoryInfo|null>": {
+            type: "object",
+            properties: {
+                "__@toStringTag": {
+                    type: "string",
+                },
+            },
+            required: ["__@toStringTag"],
+        },
+        DebugLogger: {
+            type: "object",
+            properties: {
+                isEnabled: {
+                    type: "boolean",
+                },
+                data: {},
+            },
+            required: ["data", "isEnabled"],
+        },
+        "Map<string,Lazy<any[]>>": {
+            type: "object",
+            properties: {
+                size: {
+                    type: "number",
+                },
+                "__@toStringTag": {
+                    type: "string",
+                },
+            },
+            required: ["__@toStringTag", "size"],
+        },
+        Framework: {
+            type: "object",
+            properties: {
+                name: {
+                    type: "string",
+                },
+                version: {
+                    type: "string",
+                },
+                distMacOsAppName: {
+                    type: "string",
+                },
+                macOsDefaultTargets: {
+                    type: "array",
+                    items: {
+                        type: "string",
+                    },
+                },
+                defaultAppIdPrefix: {
+                    type: "string",
+                },
+                isNpmRebuildRequired: {
+                    type: "boolean",
+                },
+                isCopyElevateHelper: {
+                    type: "boolean",
+                },
+            },
+            required: ["defaultAppIdPrefix", "distMacOsAppName", "isCopyElevateHelper", "isNpmRebuildRequired", "macOsDefaultTargets", "name", "version"],
+        },
+        CancellationToken: {
+            type: "object",
+            properties: {
+                parentCancelHandler: {},
+                _cancelled: {},
+                cancelled: {
+                    type: "boolean",
+                },
+                _parent: {},
+                parent: {
+                    $ref: "#/definitions/CancellationToken",
+                },
+                onCancel: {},
+                removeParentCancelHandler: {},
+            },
+            required: ["_cancelled", "_parent", "cancelled", "onCancel", "parent", "parentCancelHandler", "removeParentCancelHandler"],
+        },
+        PlatformSpecificBuildOptions: {
+            type: "object",
+            properties: {
+                appId: {
+                    description: "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
+                    default: "com.electron.${name}",
+                    type: ["null", "string"],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
+                    type: ["null", "string"],
+                },
+                executableName: {
+                    description: "The executable name. Defaults to `productName`.",
+                    type: ["null", "string"],
+                },
+                compression: {
+                    description: "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
+                    default: "normal",
+                    anyOf: [
+                        {
+                            enum: ["maximum", "normal", "store"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                files: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                extraResources: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                extraFiles: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                asar: {
+                    description: "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work.",
+                    default: true,
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/AsarOptions",
+                        },
+                        {
+                            type: ["null", "boolean"],
+                        },
+                    ],
+                },
+                asarUnpack: {
+                    description: "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                icon: {
+                    type: ["null", "string"],
+                },
+                fileAssociations: {
+                    description: "The file associations.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileAssociation",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                $ref: "#/definitions/FileAssociation",
+                            },
+                        },
+                    ],
+                },
+                protocols: {
+                    description: "The URL protocol schemes.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/Protocol",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                $ref: "#/definitions/Protocol",
+                            },
+                        },
+                    ],
+                },
+                forceCodeSigning: {
+                    description: "Whether to fail if app will be not code signed.",
+                    type: "boolean",
+                },
+                electronUpdaterCompatibility: {
+                    description: "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                detectUpdateChannel: {
+                    description: "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
+                    default: true,
+                    type: "boolean",
+                },
+                generateUpdatesFilesForAllChannels: {
+                    description: "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
+                    default: false,
+                    type: "boolean",
+                },
+                releaseInfo: {
+                    description: 'The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes="new features"\n```',
+                    $ref: "#/definitions/ReleaseInfo",
+                },
+                target: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/TargetConfiguration",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/TargetConfiguration",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                cscLink: {
+                    type: ["null", "string"],
+                },
+                cscKeyPassword: {
+                    type: ["null", "string"],
+                },
+                defaultArch: {
+                    type: "string",
+                },
+            },
+        },
+        Platform: {
+            type: "object",
+            properties: {
+                name: {
+                    type: "string",
+                },
+                buildConfigurationKey: {
+                    type: "string",
+                },
+                nodeName: {
+                    $ref: "#/definitions/global.NodeJS.Platform",
+                },
+            },
+            required: ["buildConfigurationKey", "name", "nodeName"],
+        },
+        "global.NodeJS.Platform": {
+            enum: ["aix", "android", "cygwin", "darwin", "freebsd", "haiku", "linux", "netbsd", "openbsd", "sunos", "win32"],
+            type: "string",
+        },
+        CompressionLevel: {
+            enum: ["maximum", "normal", "store"],
+            type: "string",
+        },
+        Arch: {
+            enum: [0, 1, 2, 3, 4],
+            type: "number",
+        },
+        Target: {
+            oneOf: [
+                {
+                    $ref: "#/definitions/FakeTarget",
+                },
+                {
+                    $ref: "#/definitions/default",
+                },
+                {
+                    $ref: "#/definitions/NsisTarget",
+                },
+                {
+                    $ref: "#/definitions/ArchiveTarget",
+                },
+                {
+                    $ref: "#/definitions/NoOpTarget",
+                },
+                {
+                    $ref: "#/definitions/default_1",
+                },
+                {
+                    $ref: "#/definitions/default_2",
+                },
+                {
+                    $ref: "#/definitions/default_3",
+                },
+                {
+                    $ref: "#/definitions/default_4",
+                },
+                {
+                    $ref: "#/definitions/RemoteTarget",
+                },
+                {
+                    $ref: "#/definitions/PkgTarget",
+                },
+            ],
+        },
+        FakeTarget: {
+            type: "object",
+            properties: {
+                outDir: {
+                    type: "string",
+                },
+                options: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/TargetSpecificOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                name: {
+                    type: "string",
+                },
+                isAsyncSupported: {
+                    type: "boolean",
+                    default: true,
+                },
+            },
+            required: ["isAsyncSupported", "name", "outDir"],
+        },
+        TargetSpecificOptions: {
+            type: "object",
+            properties: {
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        default: {
+            type: "object",
+            properties: {
+                options: {
+                    $ref: "#/definitions/AppXOptions",
+                },
+                packager: {
+                    $ref: "#/definitions/WinPackager",
+                },
+                outDir: {
+                    type: "string",
+                },
+                name: {
+                    type: "string",
+                },
+                isAsyncSupported: {
+                    type: "boolean",
+                    default: true,
+                },
+            },
+            required: ["isAsyncSupported", "name", "options", "outDir", "packager"],
+        },
+        WinPackager: {
+            type: "object",
+            properties: {
+                cscInfo: {
+                    $ref: "#/definitions/Lazy<FileCodeSigningInfo|CertificateFromStoreInfo|null>",
+                },
+                _iconPath: {
+                    $ref: "#/definitions/Lazy<string|null>",
+                },
+                vm: {
+                    $ref: "#/definitions/Lazy<VmManager>",
+                },
+                computedPublisherName: {
+                    $ref: "#/definitions/Lazy<string[]|null>",
+                },
+                lazyCertInfo: {
+                    $ref: "#/definitions/Lazy<CertificateInfo|null>",
+                },
+                isForceCodeSigningVerification: {
+                    type: "boolean",
+                },
+                defaultTarget: {
+                    type: "array",
+                    items: {
+                        type: "string",
+                    },
+                },
+                packagerOptions: {
+                    $ref: "#/definitions/PackagerOptions",
+                },
+                buildResourcesDir: {
+                    type: "string",
+                },
+                projectDir: {
+                    type: "string",
+                },
+                config: {
+                    $ref: "#/definitions/Configuration",
+                },
+                platformSpecificBuildOptions: {
+                    $ref: "#/definitions/WindowsConfiguration",
+                },
+                resourceList: {
+                    $ref: "#/definitions/Promise<string[]>",
+                },
+                _resourceList: {
+                    $ref: "#/definitions/Lazy<string[]>",
+                },
+                appInfo: {
+                    $ref: "#/definitions/AppInfo",
+                },
+                info: {
+                    $ref: "#/definitions/Packager",
+                },
+                platform: {
+                    $ref: "#/definitions/Platform",
+                },
+                compression: {
+                    $ref: "#/definitions/CompressionLevel",
+                },
+                debugLogger: {
+                    $ref: "#/definitions/DebugLogger",
+                },
+                fileAssociations: {
+                    type: "array",
+                    items: {
+                        $ref: "#/definitions/FileAssociation",
+                    },
+                },
+                forceCodeSigning: {
+                    type: "boolean",
+                },
+            },
+            required: [
+                "_iconPath",
+                "_resourceList",
+                "appInfo",
+                "buildResourcesDir",
+                "compression",
+                "computedPublisherName",
+                "config",
+                "cscInfo",
+                "debugLogger",
+                "defaultTarget",
+                "fileAssociations",
+                "forceCodeSigning",
+                "info",
+                "isForceCodeSigningVerification",
+                "lazyCertInfo",
+                "packagerOptions",
+                "platform",
+                "platformSpecificBuildOptions",
+                "projectDir",
+                "resourceList",
+                "vm",
+            ],
+        },
+        "Lazy<FileCodeSigningInfo|CertificateFromStoreInfo|null>": {
+            type: "object",
+            properties: {
+                _value: {},
+                creator: {},
+                hasValue: {
+                    type: "boolean",
+                },
+                value: {
+                    $ref: "#/definitions/Promise<FileCodeSigningInfo|CertificateFromStoreInfo|null>",
+                },
+            },
+            required: ["_value", "creator", "hasValue", "value"],
+        },
+        "Promise<FileCodeSigningInfo|CertificateFromStoreInfo|null>": {
+            type: "object",
+            properties: {
+                "__@toStringTag": {
+                    type: "string",
+                },
+            },
+            required: ["__@toStringTag"],
+        },
+        "Lazy<string|null>": {
+            type: "object",
+            properties: {
+                _value: {},
+                creator: {},
+                hasValue: {
+                    type: "boolean",
+                },
+                value: {
+                    $ref: "#/definitions/Promise<string|null>",
+                },
+            },
+            required: ["_value", "creator", "hasValue", "value"],
+        },
+        "Promise<string|null>": {
+            type: "object",
+            properties: {
+                "__@toStringTag": {
+                    type: "string",
+                },
+            },
+            required: ["__@toStringTag"],
+        },
+        "Lazy<VmManager>": {
+            type: "object",
+            properties: {
+                _value: {},
+                creator: {},
+                hasValue: {
+                    type: "boolean",
+                },
+                value: {
+                    $ref: "#/definitions/Promise<VmManager>",
+                },
+            },
+            required: ["_value", "creator", "hasValue", "value"],
+        },
+        "Promise<VmManager>": {
+            type: "object",
+            properties: {
+                "__@toStringTag": {
+                    type: "string",
+                },
+            },
+            required: ["__@toStringTag"],
+        },
+        "Lazy<string[]|null>": {
+            type: "object",
+            properties: {
+                _value: {},
+                creator: {},
+                hasValue: {
+                    type: "boolean",
+                },
+                value: {
+                    $ref: "#/definitions/Promise<string[]|null>",
+                },
+            },
+            required: ["_value", "creator", "hasValue", "value"],
+        },
+        "Promise<string[]|null>": {
+            type: "object",
+            properties: {
+                "__@toStringTag": {
+                    type: "string",
+                },
+            },
+            required: ["__@toStringTag"],
+        },
+        "Lazy<CertificateInfo|null>": {
+            type: "object",
+            properties: {
+                _value: {},
+                creator: {},
+                hasValue: {
+                    type: "boolean",
+                },
+                value: {
+                    $ref: "#/definitions/Promise<CertificateInfo|null>",
+                },
+            },
+            required: ["_value", "creator", "hasValue", "value"],
+        },
+        "Promise<CertificateInfo|null>": {
+            type: "object",
+            properties: {
+                "__@toStringTag": {
+                    type: "string",
+                },
+            },
+            required: ["__@toStringTag"],
+        },
+        NsisTarget: {
+            type: "object",
+            properties: {
+                options: {
+                    $ref: "#/definitions/NsisOptions",
+                },
+                archs: {
+                    $ref: "#/definitions/Map<Arch,string>",
+                },
+                packager: {
+                    $ref: "#/definitions/WinPackager",
+                },
+                outDir: {
+                    type: "string",
+                },
+                packageHelper: {
+                    $ref: "#/definitions/AppPackageHelper",
+                },
+                isBuildDifferentialAware: {
+                    type: "boolean",
+                },
+                installerFilenamePattern: {
+                    type: "string",
+                },
+                isPortable: {
+                    type: "boolean",
+                },
+                isUnicodeEnabled: {
+                    type: "boolean",
+                },
+                isWebInstaller: {
+                    type: "boolean",
+                },
+                name: {
+                    type: "string",
+                },
+                isAsyncSupported: {
+                    type: "boolean",
+                    default: true,
+                },
+            },
+            required: [
+                "archs",
+                "installerFilenamePattern",
+                "isAsyncSupported",
+                "isBuildDifferentialAware",
+                "isPortable",
+                "isUnicodeEnabled",
+                "isWebInstaller",
+                "name",
+                "options",
+                "outDir",
+                "packageHelper",
+                "packager",
+            ],
+        },
+        "Map<Arch,string>": {
+            type: "object",
+            properties: {
+                size: {
+                    type: "number",
+                },
+                "__@toStringTag": {
+                    type: "string",
+                },
+            },
+            required: ["__@toStringTag", "size"],
+        },
+        AppPackageHelper: {
+            type: "object",
+            properties: {
+                archToFileInfo: {
+                    $ref: "#/definitions/Map<Arch,Promise<PackageFileInfo>>",
+                },
+                infoToIsDelete: {
+                    $ref: "#/definitions/Map<PackageFileInfo,boolean>",
+                },
+                refCount: {
+                    type: "number",
+                    default: 0,
+                },
+                elevateHelper: {
+                    $ref: "#/definitions/CopyElevateHelper",
+                },
+            },
+            required: ["archToFileInfo", "elevateHelper", "infoToIsDelete", "refCount"],
+        },
+        "Map<Arch,Promise<PackageFileInfo>>": {
+            type: "object",
+            properties: {
+                size: {
+                    type: "number",
+                },
+                "__@toStringTag": {
+                    type: "string",
+                },
+            },
+            required: ["__@toStringTag", "size"],
+        },
+        "Map<PackageFileInfo,boolean>": {
+            type: "object",
+            properties: {
+                size: {
+                    type: "number",
+                },
+                "__@toStringTag": {
+                    type: "string",
+                },
+            },
+            required: ["__@toStringTag", "size"],
+        },
+        CopyElevateHelper: {
+            type: "object",
+            properties: {
+                copied: {
+                    $ref: "#/definitions/Map<string,Promise<any>>",
+                },
+            },
+            required: ["copied"],
+        },
+        "Map<string,Promise<any>>": {
+            type: "object",
+            properties: {
+                size: {
+                    type: "number",
+                },
+                "__@toStringTag": {
+                    type: "string",
+                },
+            },
+            required: ["__@toStringTag", "size"],
+        },
+        ArchiveTarget: {
+            type: "object",
+            properties: {
+                options: {
+                    $ref: "#/definitions/TargetSpecificOptions",
+                },
+                outDir: {
+                    type: "string",
+                },
+                packager: {
+                    $ref: "#/definitions/PlatformPackager<any>",
+                },
+                isWriteUpdateInfo: {
+                    type: "boolean",
+                    default: false,
+                },
+                name: {
+                    type: "string",
+                },
+                isAsyncSupported: {
+                    type: "boolean",
+                    default: true,
+                },
+            },
+            required: ["isAsyncSupported", "isWriteUpdateInfo", "name", "options", "outDir", "packager"],
+        },
+        NoOpTarget: {
+            type: "object",
+            properties: {
+                options: {
+                    type: "null",
+                    default: null,
+                },
+                outDir: {
+                    type: "string",
+                },
+                name: {
+                    type: "string",
+                },
+                isAsyncSupported: {
+                    type: "boolean",
+                    default: true,
+                },
+            },
+            required: ["isAsyncSupported", "name", "options", "outDir"],
+        },
+        default_1: {
+            type: "object",
+            properties: {
+                options: {
+                    $ref: "#/definitions/AppImageOptions",
+                },
+                desktopEntry: {
+                    $ref: "#/definitions/Lazy<string>",
+                },
+                packager: {
+                    $ref: "#/definitions/LinuxPackager",
+                },
+                helper: {
+                    $ref: "#/definitions/LinuxTargetHelper",
+                },
+                outDir: {
+                    type: "string",
+                },
+                name: {
+                    type: "string",
+                },
+                isAsyncSupported: {
+                    type: "boolean",
+                    default: true,
+                },
+            },
+            required: ["desktopEntry", "helper", "isAsyncSupported", "name", "options", "outDir", "packager"],
+        },
+        "Lazy<string>": {
+            type: "object",
+            properties: {
+                _value: {},
+                creator: {},
+                hasValue: {
+                    type: "boolean",
+                },
+                value: {
+                    $ref: "#/definitions/Promise<string>",
+                },
+            },
+            required: ["_value", "creator", "hasValue", "value"],
+        },
+        LinuxPackager: {
+            type: "object",
+            properties: {
+                executableName: {
+                    type: "string",
+                },
+                defaultTarget: {
+                    type: "array",
+                    items: {
+                        type: "string",
+                    },
+                },
+                packagerOptions: {
+                    $ref: "#/definitions/PackagerOptions",
+                },
+                buildResourcesDir: {
+                    type: "string",
+                },
+                projectDir: {
+                    type: "string",
+                },
+                config: {
+                    $ref: "#/definitions/Configuration",
+                },
+                platformSpecificBuildOptions: {
+                    $ref: "#/definitions/LinuxConfiguration",
+                },
+                resourceList: {
+                    $ref: "#/definitions/Promise<string[]>",
+                },
+                _resourceList: {
+                    $ref: "#/definitions/Lazy<string[]>",
+                },
+                appInfo: {
+                    $ref: "#/definitions/AppInfo",
+                },
+                info: {
+                    $ref: "#/definitions/Packager",
+                },
+                platform: {
+                    $ref: "#/definitions/Platform",
+                },
+                compression: {
+                    $ref: "#/definitions/CompressionLevel",
+                },
+                debugLogger: {
+                    $ref: "#/definitions/DebugLogger",
+                },
+                fileAssociations: {
+                    type: "array",
+                    items: {
+                        $ref: "#/definitions/FileAssociation",
+                    },
+                },
+                forceCodeSigning: {
+                    type: "boolean",
+                },
+            },
+            required: [
+                "_resourceList",
+                "appInfo",
+                "buildResourcesDir",
+                "compression",
+                "config",
+                "debugLogger",
+                "defaultTarget",
+                "executableName",
+                "fileAssociations",
+                "forceCodeSigning",
+                "info",
+                "packagerOptions",
+                "platform",
+                "platformSpecificBuildOptions",
+                "projectDir",
+                "resourceList",
+            ],
+        },
+        LinuxTargetHelper: {
+            type: "object",
+            properties: {
+                iconPromise: {
+                    $ref: "#/definitions/Lazy<IconInfo[]>",
+                },
+                mimeTypeFilesPromise: {
+                    $ref: "#/definitions/Lazy<string|null>",
+                },
+                maxIconPath: {
+                    type: ["null", "string"],
+                    default: null,
+                },
+                packager: {
+                    $ref: "#/definitions/LinuxPackager",
+                },
+                icons: {
+                    $ref: "#/definitions/Promise<IconInfo[]>",
+                },
+                mimeTypeFiles: {
+                    $ref: "#/definitions/Promise<string|null>",
+                },
+            },
+            required: ["iconPromise", "icons", "maxIconPath", "mimeTypeFiles", "mimeTypeFilesPromise", "packager"],
+        },
+        "Lazy<IconInfo[]>": {
+            type: "object",
+            properties: {
+                _value: {},
+                creator: {},
+                hasValue: {
+                    type: "boolean",
+                },
+                value: {
+                    $ref: "#/definitions/Promise<IconInfo[]>",
+                },
+            },
+            required: ["_value", "creator", "hasValue", "value"],
+        },
+        "Promise<IconInfo[]>": {
+            type: "object",
+            properties: {
+                "__@toStringTag": {
+                    type: "string",
+                },
+            },
+            required: ["__@toStringTag"],
+        },
+        default_2: {
+            type: "object",
+            properties: {
+                options: {
+                    $ref: "#/definitions/FlatpakOptions",
+                },
+                packager: {
+                    $ref: "#/definitions/LinuxPackager",
+                },
+                helper: {
+                    $ref: "#/definitions/LinuxTargetHelper",
+                },
+                outDir: {
+                    type: "string",
+                },
+                appId: {
+                    type: "string",
+                },
+                name: {
+                    type: "string",
+                },
+                isAsyncSupported: {
+                    type: "boolean",
+                    default: true,
+                },
+            },
+            required: ["appId", "helper", "isAsyncSupported", "name", "options", "outDir", "packager"],
+        },
+        default_3: {
+            type: "object",
+            properties: {
+                options: {
+                    $ref: "#/definitions/LinuxTargetSpecificOptions",
+                },
+                scriptFiles: {
+                    $ref: "#/definitions/Promise<string[]>",
+                },
+                packager: {
+                    $ref: "#/definitions/LinuxPackager",
+                },
+                helper: {
+                    $ref: "#/definitions/LinuxTargetHelper",
+                },
+                outDir: {
+                    type: "string",
+                },
+                name: {
+                    type: "string",
+                },
+                isAsyncSupported: {
+                    type: "boolean",
+                    default: true,
+                },
+            },
+            required: ["helper", "isAsyncSupported", "name", "options", "outDir", "packager", "scriptFiles"],
+        },
+        default_4: {
+            type: "object",
+            properties: {
+                options: {
+                    $ref: "#/definitions/SnapOptions",
+                },
+                isUseTemplateApp: {
+                    type: "boolean",
+                    default: false,
+                },
+                packager: {
+                    $ref: "#/definitions/LinuxPackager",
+                },
+                helper: {
+                    $ref: "#/definitions/LinuxTargetHelper",
+                },
+                outDir: {
+                    type: "string",
+                },
+                name: {
+                    type: "string",
+                },
+                isAsyncSupported: {
+                    type: "boolean",
+                    default: true,
+                },
+            },
+            required: ["helper", "isAsyncSupported", "isUseTemplateApp", "name", "options", "outDir", "packager"],
+        },
+        RemoteTarget: {
+            type: "object",
+            properties: {
+                buildTaskManager: {
+                    $ref: "#/definitions/AsyncTaskManager",
+                },
+                options: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/TargetSpecificOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                outDir: {
+                    type: "string",
+                },
+                target: {
+                    $ref: "#/definitions/Target",
+                },
+                remoteBuilder: {
+                    $ref: "#/definitions/RemoteBuilder",
+                },
+                name: {
+                    type: "string",
+                },
+                isAsyncSupported: {
+                    type: "boolean",
+                    default: true,
+                },
+            },
+            required: ["buildTaskManager", "isAsyncSupported", "name", "outDir", "remoteBuilder", "target"],
+        },
+        AsyncTaskManager: {
+            type: "object",
+            properties: {
+                cancellationToken: {},
+                tasks: {
+                    type: "array",
+                    items: {
+                        $ref: "#/definitions/Promise<any>",
+                    },
+                },
+                errors: {},
+            },
+            required: ["cancellationToken", "errors", "tasks"],
+        },
+        "Promise<any>": {
+            type: "object",
+            properties: {
+                "__@toStringTag": {
+                    type: "string",
+                },
+            },
+            required: ["__@toStringTag"],
+        },
+        RemoteBuilder: {
+            type: "object",
+            properties: {
+                toBuild: {
+                    $ref: "#/definitions/Map<Arch,TargetInfo[]>",
+                },
+                buildStarted: {
+                    type: "boolean",
+                    default: false,
+                },
+                packager: {
+                    $ref: "#/definitions/PlatformPackager<any>",
+                },
+            },
+            required: ["buildStarted", "packager", "toBuild"],
+        },
+        "Map<Arch,TargetInfo[]>": {
+            type: "object",
+            properties: {
+                size: {
+                    type: "number",
+                },
+                "__@toStringTag": {
+                    type: "string",
+                },
+            },
+            required: ["__@toStringTag", "size"],
+        },
+        PkgTarget: {
+            type: "object",
+            properties: {
+                options: {
+                    $ref: "#/definitions/PkgOptions",
+                },
+                packager: {
+                    $ref: "#/definitions/default_5",
+                },
+                outDir: {
+                    type: "string",
+                },
+                name: {
+                    type: "string",
+                },
+                isAsyncSupported: {
+                    type: "boolean",
+                    default: true,
+                },
+            },
+            required: ["isAsyncSupported", "name", "options", "outDir", "packager"],
+        },
+        default_5: {
+            type: "object",
+            properties: {
+                codeSigningInfo: {
+                    $ref: "#/definitions/Lazy<CodeSigningInfo>",
+                },
+                _iconPath: {
+                    $ref: "#/definitions/Lazy<string|null>",
+                },
+                defaultTarget: {
+                    type: "array",
+                    items: {
+                        type: "string",
+                    },
+                },
+                packagerOptions: {
+                    $ref: "#/definitions/PackagerOptions",
+                },
+                buildResourcesDir: {
+                    type: "string",
+                },
+                projectDir: {
+                    type: "string",
+                },
+                config: {
+                    $ref: "#/definitions/Configuration",
+                },
+                platformSpecificBuildOptions: {
+                    $ref: "#/definitions/MacConfiguration",
+                },
+                resourceList: {
+                    $ref: "#/definitions/Promise<string[]>",
+                },
+                _resourceList: {
+                    $ref: "#/definitions/Lazy<string[]>",
+                },
+                appInfo: {
+                    $ref: "#/definitions/AppInfo",
+                },
+                info: {
+                    $ref: "#/definitions/Packager",
+                },
+                platform: {
+                    $ref: "#/definitions/Platform",
+                },
+                compression: {
+                    $ref: "#/definitions/CompressionLevel",
+                },
+                debugLogger: {
+                    $ref: "#/definitions/DebugLogger",
+                },
+                fileAssociations: {
+                    type: "array",
+                    items: {
+                        $ref: "#/definitions/FileAssociation",
+                    },
+                },
+                forceCodeSigning: {
+                    type: "boolean",
+                },
+            },
+            required: [
+                "_iconPath",
+                "_resourceList",
+                "appInfo",
+                "buildResourcesDir",
+                "codeSigningInfo",
+                "compression",
+                "config",
+                "debugLogger",
+                "defaultTarget",
+                "fileAssociations",
+                "forceCodeSigning",
+                "info",
+                "packagerOptions",
+                "platform",
+                "platformSpecificBuildOptions",
+                "projectDir",
+                "resourceList",
+            ],
+        },
+        "Lazy<CodeSigningInfo>": {
+            type: "object",
+            properties: {
+                _value: {},
+                creator: {},
+                hasValue: {
+                    type: "boolean",
+                },
+                value: {
+                    $ref: "#/definitions/Promise<CodeSigningInfo>",
+                },
+            },
+            required: ["_value", "creator", "hasValue", "value"],
+        },
+        "Promise<CodeSigningInfo>": {
+            type: "object",
+            properties: {
+                "__@toStringTag": {
+                    type: "string",
+                },
+            },
+            required: ["__@toStringTag"],
+        },
+    },
+    $schema: "http://json-schema.org/draft-07/schema#",
+};
+//# sourceMappingURL=after-pack-context.jsc.js.map
\ No newline at end of file
diff --git a/node_modules/app-builder-lib/out/schema/after-pack-context.json b/node_modules/app-builder-lib/out/schema/after-pack-context.json
new file mode 100644
index 0000000..8652541
--- /dev/null
+++ b/node_modules/app-builder-lib/out/schema/after-pack-context.json
@@ -0,0 +1,9089 @@
+{
+    "type": "object",
+    "properties": {
+        "outDir": {
+            "type": "string"
+        },
+        "appOutDir": {
+            "type": "string"
+        },
+        "packager": {
+            "$ref": "#/definitions/PlatformPackager<any>"
+        },
+        "electronPlatformName": {
+            "type": "string"
+        },
+        "arch": {
+            "$ref": "#/definitions/Arch"
+        },
+        "targets": {
+            "type": "array",
+            "items": {
+                "$ref": "#/definitions/Target"
+            }
+        }
+    },
+    "required": [
+        "appOutDir",
+        "arch",
+        "electronPlatformName",
+        "outDir",
+        "packager",
+        "targets"
+    ],
+    "definitions": {
+        "MetadataDirectories": {
+            "type": "object",
+            "properties": {
+                "buildResources": {
+                    "description": "The path to build resources.\n\nPlease note — build resources are not packed into the app. If you need to use some files, e.g. as tray icon, please include required files explicitly: `\"files\": [\"**\\/*\", \"build/icon.*\"]`",
+                    "default": "build",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "output": {
+                    "description": "The output directory. [File macros](/file-patterns#file-macros) are supported.",
+                    "default": "dist",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "app": {
+                    "description": "The application directory (containing the application package.json), defaults to `app`, `www` or working directory.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                }
+            }
+        },
+        "MacConfiguration": {
+            "type": "object",
+            "properties": {
+                "category": {
+                    "description": "The application category type, as shown in the Finder via *View -> Arrange by Application Category* when viewing the Applications directory.\n\nFor example, `\"category\": \"public.app-category.developer-tools\"` will set the application category to *Developer Tools*.\n\nValid values are listed in [Apple's documentation](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/LaunchServicesKeys.html#//apple_ref/doc/uid/TP40009250-SW8).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "target": {
+                    "description": "The target package type: list of `default`, `dmg`, `mas`, `mas-dev`, `pkg`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir`. Defaults to `default` (dmg and zip for Squirrel.Mac).",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/TargetConfiguration"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/TargetConfiguration"
+                                    },
+                                    {
+                                        "enum": [
+                                            "7z",
+                                            "default",
+                                            "dir",
+                                            "dmg",
+                                            "mas",
+                                            "mas-dev",
+                                            "pkg",
+                                            "tar.bz2",
+                                            "tar.gz",
+                                            "tar.lz",
+                                            "tar.xz",
+                                            "zip"
+                                        ],
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "enum": [
+                                "7z",
+                                "default",
+                                "dir",
+                                "dmg",
+                                "mas",
+                                "mas-dev",
+                                "pkg",
+                                "tar.bz2",
+                                "tar.gz",
+                                "tar.lz",
+                                "tar.xz",
+                                "zip"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "identity": {
+                    "description": "The name of certificate to use when signing. Consider using environment variables [CSC_LINK or CSC_NAME](/code-signing) instead of specifying this option.\nMAS installer identity is specified in the [mas](/configuration/mas).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "icon": {
+                    "description": "The path to application icon.",
+                    "default": "build/icon.icns",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "entitlements": {
+                    "description": "The path to entitlements file for signing the app. `build/entitlements.mac.plist` will be used if exists (it is a recommended way to set).\nMAS entitlements is specified in the [mas](/configuration/mas).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "entitlementsInherit": {
+                    "description": "The path to child entitlements which inherit the security settings for signing frameworks and bundles of a distribution. `build/entitlements.mac.inherit.plist` will be used if exists (it is a recommended way to set).\nOtherwise [default](https://github.com/electron-userland/electron-osx-sign/blob/master/default.entitlements.darwin.inherit.plist).\n\nThis option only applies when signing with `entitlements` provided.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "entitlementsLoginHelper": {
+                    "description": "Path to login helper entitlement file.\nWhen using App Sandbox, the the `com.apple.security.inherit` key that is normally in the inherited entitlements cannot be inherited since the login helper is a standalone executable.\nDefaults to the value provided for `entitlements`. This option only applies when signing with `entitlements` provided.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "provisioningProfile": {
+                    "description": "The path to the provisioning profile to use when signing, absolute or relative to the app root.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "bundleVersion": {
+                    "description": "The `CFBundleVersion`. Do not use it unless [you need to](https://github.com/electron-userland/electron-builder/issues/565#issuecomment-230678643).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "bundleShortVersion": {
+                    "description": "The `CFBundleShortVersionString`. Do not use it unless you need to.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "darkModeSupport": {
+                    "description": "Whether a dark mode is supported. If your app does have a dark mode, you can make your app follow the system-wide dark mode setting.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "helperBundleId": {
+                    "description": "The bundle identifier to use in the application helper's plist.",
+                    "default": "${appBundleIdentifier}.helper",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "helperRendererBundleId": {
+                    "description": "The bundle identifier to use in the Renderer helper's plist.",
+                    "default": "${appBundleIdentifier}.helper.Renderer",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "helperPluginBundleId": {
+                    "description": "The bundle identifier to use in the Plugin helper's plist.",
+                    "default": "${appBundleIdentifier}.helper.Plugin",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "helperGPUBundleId": {
+                    "description": "The bundle identifier to use in the GPU helper's plist.",
+                    "default": "${appBundleIdentifier}.helper.GPU",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "helperEHBundleId": {
+                    "description": "The bundle identifier to use in the EH helper's plist.",
+                    "default": "${appBundleIdentifier}.helper.EH",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "helperNPBundleId": {
+                    "description": "The bundle identifier to use in the NP helper's plist.",
+                    "default": "${appBundleIdentifier}.helper.NP",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "type": {
+                    "description": "Whether to sign app for development or for distribution.",
+                    "default": "distribution",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "development",
+                                "distribution"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "extendInfo": {
+                    "description": "The extra entries for `Info.plist`."
+                },
+                "binaries": {
+                    "description": "Paths of any extra binaries that need to be signed.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "minimumSystemVersion": {
+                    "description": "The minimum version of macOS required for the app to run. Corresponds to `LSMinimumSystemVersion`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "requirements": {
+                    "description": "Path of [requirements file](https://developer.apple.com/library/mac/documentation/Security/Conceptual/CodeSigningGuide/RequirementLang/RequirementLang.html) used in signing. Not applicable for MAS.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "electronLanguages": {
+                    "description": "The electron locales. By default Electron locales used as is.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "string"
+                        }
+                    ]
+                },
+                "cscInstallerLink": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "cscInstallerKeyPassword": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "extraDistFiles": {
+                    "description": "Extra files to put in archive. Not applicable for `tar.*`.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "hardenedRuntime": {
+                    "description": "Whether your app has to be signed with hardened runtime.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "gatekeeperAssess": {
+                    "description": "Whether to let electron-osx-sign validate the signing or not.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "strictVerify": {
+                    "description": "Whether to let electron-osx-sign verify the contents or not.",
+                    "default": true,
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "string",
+                                "boolean"
+                            ]
+                        }
+                    ]
+                },
+                "signIgnore": {
+                    "description": "Regex or an array of regex's that signal skipping signing a file.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "timestamp": {
+                    "description": "Specify the URL of the timestamp authority server",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "appId": {
+                    "description": "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
+                    "default": "com.electron.${name}",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "executableName": {
+                    "description": "The executable name. Defaults to `productName`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "compression": {
+                    "description": "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
+                    "default": "normal",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "maximum",
+                                "normal",
+                                "store"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "files": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "extraResources": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "extraFiles": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "asar": {
+                    "description": "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work.",
+                    "default": true,
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/AsarOptions"
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "boolean"
+                            ]
+                        }
+                    ]
+                },
+                "asarUnpack": {
+                    "description": "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "fileAssociations": {
+                    "description": "The file associations.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileAssociation"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/FileAssociation"
+                            }
+                        }
+                    ]
+                },
+                "protocols": {
+                    "description": "The URL protocol schemes.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/Protocol"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/Protocol"
+                            }
+                        }
+                    ]
+                },
+                "forceCodeSigning": {
+                    "description": "Whether to fail if app will be not code signed.",
+                    "type": "boolean"
+                },
+                "electronUpdaterCompatibility": {
+                    "description": "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "detectUpdateChannel": {
+                    "description": "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "generateUpdatesFilesForAllChannels": {
+                    "description": "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "releaseInfo": {
+                    "description": "The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes=\"new features\"\n```",
+                    "$ref": "#/definitions/ReleaseInfo"
+                },
+                "cscLink": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "cscKeyPassword": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "defaultArch": {
+                    "type": "string"
+                }
+            }
+        },
+        "TargetConfiguration": {
+            "type": "object",
+            "properties": {
+                "target": {
+                    "description": "The target name. e.g. `snap`.",
+                    "type": "string"
+                },
+                "arch": {
+                    "description": "The arch or list of archs.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "enum": [
+                                    "arm64",
+                                    "armv7l",
+                                    "ia32",
+                                    "universal",
+                                    "x64"
+                                ],
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "enum": [
+                                "arm64",
+                                "armv7l",
+                                "ia32",
+                                "universal",
+                                "x64"
+                            ],
+                            "type": "string"
+                        }
+                    ]
+                }
+            },
+            "required": [
+                "target"
+            ]
+        },
+        "FileSet": {
+            "type": "object",
+            "properties": {
+                "from": {
+                    "description": "The source path relative to the project directory.",
+                    "type": "string"
+                },
+                "to": {
+                    "description": "The destination path relative to the app's content directory for `extraFiles` and the app's resource directory for `extraResources`.",
+                    "type": "string"
+                },
+                "filter": {
+                    "description": "The [glob patterns](/file-patterns).",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "string"
+                        }
+                    ]
+                }
+            }
+        },
+        "AsarOptions": {
+            "type": "object",
+            "properties": {
+                "smartUnpack": {
+                    "description": "Whether to automatically unpack executables files.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "ordering": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "externalAllowed": {
+                    "description": "Allows external asar files.",
+                    "default": false,
+                    "type": "boolean"
+                }
+            }
+        },
+        "FileAssociation": {
+            "description": "File associations.\n\nmacOS (corresponds to [CFBundleDocumentTypes](https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-101685)) and NSIS only.\n\nOn Windows works only if [nsis.perMachine](https://electron.build/configuration/configuration#NsisOptions-perMachine) is set to `true`.",
+            "type": "object",
+            "properties": {
+                "ext": {
+                    "description": "The extension (minus the leading period). e.g. `png`.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "string"
+                        }
+                    ]
+                },
+                "name": {
+                    "description": "The name. e.g. `PNG`. Defaults to `ext`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "description": {
+                    "description": "*windows-only.* The description.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "mimeType": {
+                    "description": "*linux-only.* The mime-type.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "icon": {
+                    "description": "The path to icon (`.icns` for MacOS and `.ico` for Windows), relative to `build` (build resources directory). Defaults to `${firstExt}.icns`/`${firstExt}.ico` (if several extensions specified, first is used) or to application icon.\n\nNot supported on Linux, file issue if need (default icon will be `x-office-document`).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "role": {
+                    "description": "*macOS-only* The app’s role with respect to the type. The value can be `Editor`, `Viewer`, `Shell`, or `None`. Corresponds to `CFBundleTypeRole`.",
+                    "default": "Editor",
+                    "type": "string"
+                },
+                "isPackage": {
+                    "description": "*macOS-only* Whether the document is distributed as a bundle. If set to true, the bundle directory is treated as a file. Corresponds to `LSTypeIsPackage`.",
+                    "type": "boolean"
+                },
+                "rank": {
+                    "description": "*macOS-only* The app’s rank with respect to the type. The value can be `Owner`, `Default`, `Alternate`, or `None`. Corresponds to `LSHandlerRank`.",
+                    "default": "Default",
+                    "type": "string"
+                }
+            },
+            "required": [
+                "ext"
+            ]
+        },
+        "Protocol": {
+            "description": "URL Protocol Schemes. Protocols to associate the app with. macOS only.\n\nPlease note — on macOS [you need to register an `open-url` event handler](http://electron.atom.io/docs/api/app/#event-open-url-macos).",
+            "type": "object",
+            "properties": {
+                "name": {
+                    "description": "The name. e.g. `IRC server URL`.",
+                    "type": "string"
+                },
+                "schemes": {
+                    "description": "The schemes. e.g. `[\"irc\", \"ircs\"]`.",
+                    "type": "array",
+                    "items": {
+                        "type": "string"
+                    }
+                },
+                "role": {
+                    "description": "*macOS-only* The app’s role with respect to the type.",
+                    "default": "Editor",
+                    "enum": [
+                        "Editor",
+                        "None",
+                        "Shell",
+                        "Viewer"
+                    ],
+                    "type": "string"
+                }
+            },
+            "required": [
+                "name",
+                "schemes"
+            ]
+        },
+        "GithubOptions": {
+            "description": "[GitHub](https://help.github.com/articles/about-releases/) options.\n\nGitHub [personal access token](https://help.github.com/articles/creating-an-access-token-for-command-line-use/) is required. You can generate by going to [https://github.com/settings/tokens/new](https://github.com/settings/tokens/new). The access token should have the repo scope/permission.\nDefine `GH_TOKEN` environment variable.",
+            "type": "object",
+            "properties": {
+                "provider": {
+                    "description": "The provider. Must be `github`.",
+                    "type": "string",
+                    "enum": [
+                        "github"
+                    ]
+                },
+                "repo": {
+                    "description": "The repository name. [Detected automatically](#github-repository-and-bintray-package).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "owner": {
+                    "description": "The owner.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "vPrefixedTagName": {
+                    "description": "Whether to use `v`-prefixed tag name.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "host": {
+                    "description": "The host (including the port if need).",
+                    "default": "github.com",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "protocol": {
+                    "description": "The protocol. GitHub Publisher supports only `https`.",
+                    "default": "https",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "http",
+                                "https"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "token": {
+                    "description": "The access token to support auto-update from private github repositories. Never specify it in the configuration files. Only for [setFeedURL](/auto-update#appupdatersetfeedurloptions).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "private": {
+                    "description": "Whether to use private github auto-update provider if `GH_TOKEN` environment variable is defined. See [Private GitHub Update Repo](/auto-update#private-github-update-repo).",
+                    "type": [
+                        "null",
+                        "boolean"
+                    ]
+                },
+                "releaseType": {
+                    "description": "The type of release. By default `draft` release will be created.\n\nAlso you can set release type using environment variable. If `EP_DRAFT`is set to `true` — `draft`, if `EP_PRE_RELEASE`is set to `true` — `prerelease`.",
+                    "default": "draft",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "draft",
+                                "prerelease",
+                                "release"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "publisherName": {
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "updaterCacheDirName": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publishAutoUpdate": {
+                    "description": "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "requestHeaders": {
+                    "description": "Any custom request headers",
+                    "$ref": "#/definitions/OutgoingHttpHeaders"
+                }
+            },
+            "required": [
+                "provider"
+            ]
+        },
+        "OutgoingHttpHeaders": {
+            "type": "object"
+        },
+        "S3Options": {
+            "type": "object",
+            "properties": {
+                "provider": {
+                    "description": "The provider. Must be `s3`.",
+                    "type": "string",
+                    "enum": [
+                        "s3"
+                    ]
+                },
+                "bucket": {
+                    "description": "The bucket name.",
+                    "type": "string"
+                },
+                "region": {
+                    "description": "The region. Is determined and set automatically when publishing.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "acl": {
+                    "description": "The ACL. Set to `null` to not [add](https://github.com/electron-userland/electron-builder/issues/1822).\n\nPlease see [required permissions for the S3 provider](https://github.com/electron-userland/electron-builder/issues/1618#issuecomment-314679128).",
+                    "default": "public-read",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "private",
+                                "public-read"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "storageClass": {
+                    "description": "The type of storage to use for the object.",
+                    "default": "STANDARD",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "REDUCED_REDUNDANCY",
+                                "STANDARD",
+                                "STANDARD_IA"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "encryption": {
+                    "description": "Server-side encryption algorithm to use for the object.",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "AES256",
+                                "aws:kms"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "endpoint": {
+                    "description": "The endpoint URI to send requests to. The default endpoint is built from the configured region.\nThe endpoint should be a string like `https://{service}.{region}.amazonaws.com`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "channel": {
+                    "description": "The update channel.",
+                    "default": "latest",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "path": {
+                    "description": "The directory path.",
+                    "default": "/",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publisherName": {
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "updaterCacheDirName": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publishAutoUpdate": {
+                    "description": "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "requestHeaders": {
+                    "description": "Any custom request headers",
+                    "$ref": "#/definitions/OutgoingHttpHeaders"
+                }
+            },
+            "required": [
+                "bucket",
+                "provider"
+            ]
+        },
+        "SpacesOptions": {
+            "description": "[DigitalOcean Spaces](https://www.digitalocean.com/community/tutorials/an-introduction-to-digitalocean-spaces) options.\nAccess key is required, define `DO_KEY_ID` and `DO_SECRET_KEY` environment variables.",
+            "type": "object",
+            "properties": {
+                "provider": {
+                    "description": "The provider. Must be `spaces`.",
+                    "type": "string",
+                    "enum": [
+                        "spaces"
+                    ]
+                },
+                "name": {
+                    "description": "The space name.",
+                    "type": "string"
+                },
+                "region": {
+                    "description": "The region (e.g. `nyc3`).",
+                    "type": "string"
+                },
+                "channel": {
+                    "description": "The update channel.",
+                    "default": "latest",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "path": {
+                    "description": "The directory path.",
+                    "default": "/",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "acl": {
+                    "description": "The ACL. Set to `null` to not [add](https://github.com/electron-userland/electron-builder/issues/1822).",
+                    "default": "public-read",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "private",
+                                "public-read"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "publisherName": {
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "updaterCacheDirName": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publishAutoUpdate": {
+                    "description": "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "requestHeaders": {
+                    "description": "Any custom request headers",
+                    "$ref": "#/definitions/OutgoingHttpHeaders"
+                }
+            },
+            "required": [
+                "name",
+                "provider",
+                "region"
+            ]
+        },
+        "GenericServerOptions": {
+            "description": "Generic (any HTTP(S) server) options.\nIn all publish options [File Macros](/file-patterns#file-macros) are supported.",
+            "type": "object",
+            "properties": {
+                "provider": {
+                    "description": "The provider. Must be `generic`.",
+                    "type": "string",
+                    "enum": [
+                        "generic"
+                    ]
+                },
+                "url": {
+                    "description": "The base url. e.g. `https://bucket_name.s3.amazonaws.com`.",
+                    "type": "string"
+                },
+                "channel": {
+                    "description": "The channel.",
+                    "default": "latest",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "useMultipleRangeRequest": {
+                    "description": "Whether to use multiple range requests for differential update. Defaults to `true` if `url` doesn't contain `s3.amazonaws.com`.",
+                    "type": "boolean"
+                },
+                "publisherName": {
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "updaterCacheDirName": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publishAutoUpdate": {
+                    "description": "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "requestHeaders": {
+                    "description": "Any custom request headers",
+                    "$ref": "#/definitions/OutgoingHttpHeaders"
+                }
+            },
+            "required": [
+                "provider",
+                "url"
+            ]
+        },
+        "BintrayOptions": {
+            "description": "[Bintray](https://bintray.com/) options. Requires an API key. An API key can be obtained from the user [profile](https://bintray.com/profile/edit) page (\"Edit Your Profile\" -> API Key).\nDefine `BT_TOKEN` environment variable.",
+            "type": "object",
+            "properties": {
+                "provider": {
+                    "description": "The provider. Must be `bintray`.",
+                    "type": "string",
+                    "enum": [
+                        "bintray"
+                    ]
+                },
+                "package": {
+                    "description": "The Bintray package name.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "repo": {
+                    "description": "The Bintray repository name.",
+                    "default": "generic",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "owner": {
+                    "description": "The owner.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "component": {
+                    "description": "The Bintray component (Debian only).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "distribution": {
+                    "description": "The Bintray distribution (Debian only).",
+                    "default": "stable",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "user": {
+                    "description": "The Bintray user account. Used in cases where the owner is an organization.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "token": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publisherName": {
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "updaterCacheDirName": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publishAutoUpdate": {
+                    "description": "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "requestHeaders": {
+                    "description": "Any custom request headers",
+                    "$ref": "#/definitions/OutgoingHttpHeaders"
+                }
+            },
+            "required": [
+                "provider"
+            ]
+        },
+        "CustomPublishOptions": {
+            "type": "object",
+            "additionalProperties": {},
+            "properties": {
+                "provider": {
+                    "description": "The provider. Must be `custom`.",
+                    "type": "string",
+                    "enum": [
+                        "custom"
+                    ]
+                },
+                "updateProvider": {
+                    "description": "The Provider to provide UpdateInfo regarding available updates.  Required\nto use custom providers with electron-updater.",
+                    "type": "object"
+                },
+                "publisherName": {
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "updaterCacheDirName": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publishAutoUpdate": {
+                    "description": "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "requestHeaders": {
+                    "description": "Any custom request headers",
+                    "$ref": "#/definitions/OutgoingHttpHeaders"
+                }
+            },
+            "required": [
+                "provider"
+            ]
+        },
+        "KeygenOptions": {
+            "description": "Keygen options.\nhttps://keygen.sh/\nDefine `KEYGEN_TOKEN` environment variable.",
+            "type": "object",
+            "properties": {
+                "provider": {
+                    "description": "The provider. Must be `keygen`.",
+                    "type": "string",
+                    "enum": [
+                        "keygen"
+                    ]
+                },
+                "account": {
+                    "description": "Keygen account's UUID",
+                    "type": "string"
+                },
+                "product": {
+                    "description": "Keygen product's UUID",
+                    "type": "string"
+                },
+                "channel": {
+                    "description": "The channel.",
+                    "default": "stable",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "platform": {
+                    "description": "The target Platform. Is set programmatically explicitly during publishing.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publisherName": {
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "updaterCacheDirName": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publishAutoUpdate": {
+                    "description": "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "requestHeaders": {
+                    "description": "Any custom request headers",
+                    "$ref": "#/definitions/OutgoingHttpHeaders"
+                }
+            },
+            "required": [
+                "account",
+                "product",
+                "provider"
+            ]
+        },
+        "SnapStoreOptions": {
+            "description": "[Snap Store](https://snapcraft.io/) options.",
+            "type": "object",
+            "properties": {
+                "channels": {
+                    "description": "The list of channels the snap would be released.",
+                    "default": [
+                        "edge"
+                    ],
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "provider": {
+                    "$ref": "#/definitions/PublishProvider",
+                    "description": "The provider."
+                },
+                "publisherName": {
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "updaterCacheDirName": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publishAutoUpdate": {
+                    "description": "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "requestHeaders": {
+                    "description": "Any custom request headers",
+                    "$ref": "#/definitions/OutgoingHttpHeaders"
+                }
+            },
+            "required": [
+                "provider"
+            ]
+        },
+        "PublishProvider": {
+            "enum": [
+                "bintray",
+                "custom",
+                "generic",
+                "github",
+                "keygen",
+                "s3",
+                "snapStore",
+                "spaces"
+            ],
+            "type": "string"
+        },
+        "ReleaseInfo": {
+            "type": "object",
+            "properties": {
+                "releaseName": {
+                    "description": "The release name.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "releaseNotes": {
+                    "description": "The release notes.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "releaseNotesFile": {
+                    "description": "The path to release notes file. Defaults to `release-notes-${platform}.md` (where `platform` it is current platform — `mac`, `linux` or `windows`) or `release-notes.md` in the [build resources](#MetadataDirectories-buildResources).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "releaseDate": {
+                    "description": "The release date.",
+                    "type": "string"
+                }
+            }
+        },
+        "MasConfiguration": {
+            "type": "object",
+            "properties": {
+                "entitlements": {
+                    "description": "The path to entitlements file for signing the app. `build/entitlements.mas.plist` will be used if exists (it is a recommended way to set).\nOtherwise [default](https://github.com/electron-userland/electron-osx-sign/blob/master/default.entitlements.mas.plist).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "entitlementsInherit": {
+                    "description": "The path to child entitlements which inherit the security settings for signing frameworks and bundles of a distribution. `build/entitlements.mas.inherit.plist` will be used if exists (it is a recommended way to set).\nOtherwise [default](https://github.com/electron-userland/electron-osx-sign/blob/master/default.entitlements.mas.inherit.plist).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "binaries": {
+                    "description": "Paths of any extra binaries that need to be signed.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "category": {
+                    "description": "The application category type, as shown in the Finder via *View -> Arrange by Application Category* when viewing the Applications directory.\n\nFor example, `\"category\": \"public.app-category.developer-tools\"` will set the application category to *Developer Tools*.\n\nValid values are listed in [Apple's documentation](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/LaunchServicesKeys.html#//apple_ref/doc/uid/TP40009250-SW8).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "target": {
+                    "description": "The target package type: list of `default`, `dmg`, `mas`, `mas-dev`, `pkg`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir`. Defaults to `default` (dmg and zip for Squirrel.Mac).",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/TargetConfiguration"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/TargetConfiguration"
+                                    },
+                                    {
+                                        "enum": [
+                                            "7z",
+                                            "default",
+                                            "dir",
+                                            "dmg",
+                                            "mas",
+                                            "mas-dev",
+                                            "pkg",
+                                            "tar.bz2",
+                                            "tar.gz",
+                                            "tar.lz",
+                                            "tar.xz",
+                                            "zip"
+                                        ],
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "enum": [
+                                "7z",
+                                "default",
+                                "dir",
+                                "dmg",
+                                "mas",
+                                "mas-dev",
+                                "pkg",
+                                "tar.bz2",
+                                "tar.gz",
+                                "tar.lz",
+                                "tar.xz",
+                                "zip"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "identity": {
+                    "description": "The name of certificate to use when signing. Consider using environment variables [CSC_LINK or CSC_NAME](/code-signing) instead of specifying this option.\nMAS installer identity is specified in the [mas](/configuration/mas).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "icon": {
+                    "description": "The path to application icon.",
+                    "default": "build/icon.icns",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "entitlementsLoginHelper": {
+                    "description": "Path to login helper entitlement file.\nWhen using App Sandbox, the the `com.apple.security.inherit` key that is normally in the inherited entitlements cannot be inherited since the login helper is a standalone executable.\nDefaults to the value provided for `entitlements`. This option only applies when signing with `entitlements` provided.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "provisioningProfile": {
+                    "description": "The path to the provisioning profile to use when signing, absolute or relative to the app root.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "bundleVersion": {
+                    "description": "The `CFBundleVersion`. Do not use it unless [you need to](https://github.com/electron-userland/electron-builder/issues/565#issuecomment-230678643).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "bundleShortVersion": {
+                    "description": "The `CFBundleShortVersionString`. Do not use it unless you need to.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "darkModeSupport": {
+                    "description": "Whether a dark mode is supported. If your app does have a dark mode, you can make your app follow the system-wide dark mode setting.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "helperBundleId": {
+                    "description": "The bundle identifier to use in the application helper's plist.",
+                    "default": "${appBundleIdentifier}.helper",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "helperRendererBundleId": {
+                    "description": "The bundle identifier to use in the Renderer helper's plist.",
+                    "default": "${appBundleIdentifier}.helper.Renderer",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "helperPluginBundleId": {
+                    "description": "The bundle identifier to use in the Plugin helper's plist.",
+                    "default": "${appBundleIdentifier}.helper.Plugin",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "helperGPUBundleId": {
+                    "description": "The bundle identifier to use in the GPU helper's plist.",
+                    "default": "${appBundleIdentifier}.helper.GPU",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "helperEHBundleId": {
+                    "description": "The bundle identifier to use in the EH helper's plist.",
+                    "default": "${appBundleIdentifier}.helper.EH",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "helperNPBundleId": {
+                    "description": "The bundle identifier to use in the NP helper's plist.",
+                    "default": "${appBundleIdentifier}.helper.NP",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "type": {
+                    "description": "Whether to sign app for development or for distribution.",
+                    "default": "distribution",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "development",
+                                "distribution"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "extendInfo": {
+                    "description": "The extra entries for `Info.plist`."
+                },
+                "minimumSystemVersion": {
+                    "description": "The minimum version of macOS required for the app to run. Corresponds to `LSMinimumSystemVersion`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "requirements": {
+                    "description": "Path of [requirements file](https://developer.apple.com/library/mac/documentation/Security/Conceptual/CodeSigningGuide/RequirementLang/RequirementLang.html) used in signing. Not applicable for MAS.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "electronLanguages": {
+                    "description": "The electron locales. By default Electron locales used as is.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "string"
+                        }
+                    ]
+                },
+                "cscInstallerLink": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "cscInstallerKeyPassword": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "extraDistFiles": {
+                    "description": "Extra files to put in archive. Not applicable for `tar.*`.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "hardenedRuntime": {
+                    "description": "Whether your app has to be signed with hardened runtime.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "gatekeeperAssess": {
+                    "description": "Whether to let electron-osx-sign validate the signing or not.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "strictVerify": {
+                    "description": "Whether to let electron-osx-sign verify the contents or not.",
+                    "default": true,
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "string",
+                                "boolean"
+                            ]
+                        }
+                    ]
+                },
+                "signIgnore": {
+                    "description": "Regex or an array of regex's that signal skipping signing a file.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "timestamp": {
+                    "description": "Specify the URL of the timestamp authority server",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "appId": {
+                    "description": "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
+                    "default": "com.electron.${name}",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "executableName": {
+                    "description": "The executable name. Defaults to `productName`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "compression": {
+                    "description": "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
+                    "default": "normal",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "maximum",
+                                "normal",
+                                "store"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "files": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "extraResources": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "extraFiles": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "asar": {
+                    "description": "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work.",
+                    "default": true,
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/AsarOptions"
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "boolean"
+                            ]
+                        }
+                    ]
+                },
+                "asarUnpack": {
+                    "description": "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "fileAssociations": {
+                    "description": "The file associations.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileAssociation"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/FileAssociation"
+                            }
+                        }
+                    ]
+                },
+                "protocols": {
+                    "description": "The URL protocol schemes.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/Protocol"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/Protocol"
+                            }
+                        }
+                    ]
+                },
+                "forceCodeSigning": {
+                    "description": "Whether to fail if app will be not code signed.",
+                    "type": "boolean"
+                },
+                "electronUpdaterCompatibility": {
+                    "description": "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "detectUpdateChannel": {
+                    "description": "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "generateUpdatesFilesForAllChannels": {
+                    "description": "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "releaseInfo": {
+                    "description": "The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes=\"new features\"\n```",
+                    "$ref": "#/definitions/ReleaseInfo"
+                },
+                "cscLink": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "cscKeyPassword": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "defaultArch": {
+                    "type": "string"
+                }
+            }
+        },
+        "DmgOptions": {
+            "type": "object",
+            "properties": {
+                "background": {
+                    "description": "The path to background image (default: `build/background.tiff` or `build/background.png` if exists). The resolution of this file determines the resolution of the installer window.\nIf background is not specified, use `window.size`. Default locations expected background size to be 540x380.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "backgroundColor": {
+                    "description": "The background color (accepts css colors). Defaults to `#ffffff` (white) if no background image.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "icon": {
+                    "description": "The path to DMG icon (volume icon), which will be shown when mounted, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to the application icon (`build/icon.icns`).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "iconSize": {
+                    "description": "The size of all the icons inside the DMG.",
+                    "default": 80,
+                    "type": [
+                        "null",
+                        "number"
+                    ]
+                },
+                "iconTextSize": {
+                    "description": "The size of all the icon texts inside the DMG.",
+                    "default": 12,
+                    "type": [
+                        "null",
+                        "number"
+                    ]
+                },
+                "title": {
+                    "description": "The title of the produced DMG, which will be shown when mounted (volume name).\n\nMacro `${productName}`, `${version}` and `${name}` are supported.",
+                    "default": "${productName} ${version}",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "contents": {
+                    "description": "The content — to customize icon locations. The x and y coordinates refer to the position of the **center** of the icon (at 1x scale), and do not take the label into account.",
+                    "type": "array",
+                    "items": {
+                        "$ref": "#/definitions/DmgContent"
+                    }
+                },
+                "format": {
+                    "description": "The disk image format. `ULFO` (lzfse-compressed image (OS X 10.11+ only)).",
+                    "default": "UDZO",
+                    "enum": [
+                        "UDBZ",
+                        "UDCO",
+                        "UDRO",
+                        "UDRW",
+                        "UDZO",
+                        "ULFO"
+                    ],
+                    "type": "string"
+                },
+                "window": {
+                    "description": "The DMG window position and size. With y co-ordinates running from bottom to top.\n\nThe Finder makes sure that the window will be on the user’s display, so if you want your window at the top left of the display you could use `\"x\": 0, \"y\": 100000` as the x, y co-ordinates.\nIt is not to be possible to position the window relative to the [top left](https://github.com/electron-userland/electron-builder/issues/3990#issuecomment-512960957) or relative to the center of the user’s screen.",
+                    "$ref": "#/definitions/DmgWindow"
+                },
+                "internetEnabled": {
+                    "description": "Whether to create internet-enabled disk image (when it is downloaded using a browser it will automatically decompress the image, put the application on the desktop, unmount and remove the disk image file).",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "sign": {
+                    "description": "Whether to sign the DMG or not. Signing is not required and will lead to unwanted errors in combination with notarization requirements.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "writeUpdateInfo": {
+                    "default": true,
+                    "type": "boolean"
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "DmgContent": {
+            "type": "object",
+            "properties": {
+                "x": {
+                    "description": "The device-independent pixel offset from the left of the window to the **center** of the icon.",
+                    "type": "number"
+                },
+                "y": {
+                    "description": "The device-independent pixel offset from the top of the window to the **center** of the icon.",
+                    "type": "number"
+                },
+                "type": {
+                    "enum": [
+                        "dir",
+                        "file",
+                        "link"
+                    ],
+                    "type": "string"
+                },
+                "name": {
+                    "description": "The name of the file within the DMG. Defaults to basename of `path`.",
+                    "type": "string"
+                },
+                "path": {
+                    "description": "The path of the file within the DMG.",
+                    "type": "string"
+                }
+            },
+            "required": [
+                "x",
+                "y"
+            ]
+        },
+        "DmgWindow": {
+            "type": "object",
+            "properties": {
+                "x": {
+                    "description": "The X position relative to left of the screen.",
+                    "default": 400,
+                    "type": "number"
+                },
+                "y": {
+                    "description": "The Y position relative to bottom of the screen.",
+                    "default": 100,
+                    "type": "number"
+                },
+                "width": {
+                    "description": "The width. Defaults to background image width or 540.",
+                    "type": "number"
+                },
+                "height": {
+                    "description": "The height. Defaults to background image height or 380.",
+                    "type": "number"
+                }
+            }
+        },
+        "PkgOptions": {
+            "description": "macOS product archive options.",
+            "type": "object",
+            "properties": {
+                "scripts": {
+                    "description": "The scripts directory, relative to `build` (build resources directory).\nThe scripts can be in any language so long as the files are marked executable and have the appropriate shebang indicating the path to the interpreter.\nScripts are required to be executable (`chmod +x file`).",
+                    "default": "build/pkg-scripts",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "productbuild": {
+                    "description": "should be not documented, only to experiment",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "installLocation": {
+                    "description": "The install location. [Do not use it](https://stackoverflow.com/questions/12863944/how-do-you-specify-a-default-install-location-to-home-with-pkgbuild) to create per-user package.\nMostly never you will need to change this option. `/Applications` would install it as expected into `/Applications` if the local system domain is chosen, or into `$HOME/Applications` if the home installation is chosen.",
+                    "default": "/Applications",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "allowAnywhere": {
+                    "description": "Whether can be installed at the root of any volume, including non-system volumes. Otherwise, it cannot be installed at the root of a volume.\n\nCorresponds to [enable_anywhere](https://developer.apple.com/library/content/documentation/DeveloperTools/Reference/DistributionDefinitionRef/Chapters/Distribution_XML_Ref.html#//apple_ref/doc/uid/TP40005370-CH100-SW70).",
+                    "default": true,
+                    "type": [
+                        "null",
+                        "boolean"
+                    ]
+                },
+                "allowCurrentUserHome": {
+                    "description": "Whether can be installed into the current user’s home directory.\nA home directory installation is done as the current user (not as root), and it cannot write outside of the home directory.\nIf the product cannot be installed in the user’s home directory and be not completely functional from user’s home directory.\n\nCorresponds to [enable_currentUserHome](https://developer.apple.com/library/content/documentation/DeveloperTools/Reference/DistributionDefinitionRef/Chapters/Distribution_XML_Ref.html#//apple_ref/doc/uid/TP40005370-CH100-SW70).",
+                    "default": true,
+                    "type": [
+                        "null",
+                        "boolean"
+                    ]
+                },
+                "allowRootDirectory": {
+                    "description": "Whether can be installed into the root directory. Should usually be `true` unless the product can be installed only to the user’s home directory.\n\nCorresponds to [enable_localSystem](https://developer.apple.com/library/content/documentation/DeveloperTools/Reference/DistributionDefinitionRef/Chapters/Distribution_XML_Ref.html#//apple_ref/doc/uid/TP40005370-CH100-SW70).",
+                    "default": true,
+                    "type": [
+                        "null",
+                        "boolean"
+                    ]
+                },
+                "identity": {
+                    "description": "The name of certificate to use when signing. Consider using environment variables [CSC_LINK or CSC_NAME](/code-signing) instead of specifying this option.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "license": {
+                    "description": "The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). In addition to `txt, `rtf` and `html` supported (don't forget to use `target=\"_blank\"` for links).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "background": {
+                    "description": "Options for the background image for the installer.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/PkgBackgroundOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "welcome": {
+                    "description": "The path to the welcome file. This may be used to customize the text on the Introduction page of the installer.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "mustClose": {
+                    "description": "Identifies applications that must be closed before the package is installed.\\n\\nCorresponds to [must-close](https://developer.apple.com/library/archive/documentation/DeveloperTools/Reference/DistributionDefinitionRef/Chapters/Distribution_XML_Ref.html#//apple_ref/doc/uid/TP40005370-CH100-SW77)",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "conclusion": {
+                    "description": "The path to the conclusion file. This may be used to customize the text on the final \"Summary\" page of the installer.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "isRelocatable": {
+                    "description": "Install bundle over previous version if moved by user?",
+                    "default": true,
+                    "type": [
+                        "null",
+                        "boolean"
+                    ]
+                },
+                "isVersionChecked": {
+                    "description": "Don't install bundle if newer version on disk?",
+                    "default": true,
+                    "type": [
+                        "null",
+                        "boolean"
+                    ]
+                },
+                "hasStrictIdentifier": {
+                    "description": "Require identical bundle identifiers at install path?",
+                    "default": true,
+                    "type": [
+                        "null",
+                        "boolean"
+                    ]
+                },
+                "overwriteAction": {
+                    "description": "Specifies how an existing version of the bundle on disk should be handled when the version in\nthe package is installed.\n\nIf you specify upgrade, the bundle in the package atomi-cally replaces any version on disk;\nthis has the effect of deleting old paths that no longer exist in the new version of\nthe bundle.\n\nIf you specify update, the bundle in the package overwrites the version on disk, and any files\nnot contained in the package will be left intact; this is appropriate when you are delivering\nan update-only package.\n\nAnother effect of update is that the package bundle will not be installed at all if there is\nnot already a version on disk; this allows a package to deliver an update for an app that\nthe user might have deleted.",
+                    "default": "upgrade",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "update",
+                                "upgrade"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "PkgBackgroundOptions": {
+            "description": "Options for the background image in a PKG installer",
+            "type": "object",
+            "properties": {
+                "file": {
+                    "description": "Path to the image to use as an installer background.",
+                    "type": "string"
+                },
+                "alignment": {
+                    "description": "Alignment of the background image.\nOptions are: center, left, right, top, bottom, topleft, topright, bottomleft, bottomright",
+                    "default": "center",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "bottom",
+                                "bottomleft",
+                                "bottomright",
+                                "center",
+                                "left",
+                                "right",
+                                "top",
+                                "topleft",
+                                "topright"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "scaling": {
+                    "description": "Scaling of the background image.\nOptions are: tofit, none, proportional",
+                    "default": "tofit",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "none",
+                                "proportional",
+                                "tofit"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                }
+            }
+        },
+        "WindowsConfiguration": {
+            "type": "object",
+            "properties": {
+                "target": {
+                    "description": "The target package type: list of `nsis`, `nsis-web` (Web installer), `portable` ([portable](/configuration/nsis#portable) app without installation), `appx`, `msi`, `squirrel`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir`.\nAppX package can be built only on Windows 10.\n\nTo use Squirrel.Windows please install `electron-builder-squirrel-windows` dependency.",
+                    "default": "nsis",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/TargetConfiguration"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/TargetConfiguration"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "icon": {
+                    "description": "The path to application icon.",
+                    "default": "build/icon.ico",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "legalTrademarks": {
+                    "description": "The trademarks and registered trademarks.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "signingHashAlgorithms": {
+                    "description": "Array of signing algorithms used. For AppX `sha256` is always used.",
+                    "default": "['sha1', 'sha256']",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "enum": [
+                                    "sha1",
+                                    "sha256"
+                                ],
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "sign": {
+                    "description": "The custom function (or path to file or module id) to sign Windows executable.",
+                    "type": [
+                        "null",
+                        "string",
+                        "object"
+                    ]
+                },
+                "certificateFile": {
+                    "description": "The path to the *.pfx certificate you want to sign with. Please use it only if you cannot use env variable `CSC_LINK` (`WIN_CSC_LINK`) for some reason.\nPlease see [Code Signing](/code-signing).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "certificatePassword": {
+                    "description": "The password to the certificate provided in `certificateFile`. Please use it only if you cannot use env variable `CSC_KEY_PASSWORD` (`WIN_CSC_KEY_PASSWORD`) for some reason.\nPlease see [Code Signing](/code-signing).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "certificateSubjectName": {
+                    "description": "The name of the subject of the signing certificate. Required only for EV Code Signing and works only on Windows (or on macOS if [Parallels Desktop](https://www.parallels.com/products/desktop/) Windows 10 virtual machines exits).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "certificateSha1": {
+                    "description": "The SHA1 hash of the signing certificate. The SHA1 hash is commonly specified when multiple certificates satisfy the criteria specified by the remaining switches. Works only on Windows (or on macOS if [Parallels Desktop](https://www.parallels.com/products/desktop/) Windows 10 virtual machines exits).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "additionalCertificateFile": {
+                    "description": "The path to an additional certificate file you want to add to the signature block.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "rfc3161TimeStampServer": {
+                    "description": "The URL of the RFC 3161 time stamp server.",
+                    "default": "http://timestamp.digicert.com",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "timeStampServer": {
+                    "description": "The URL of the time stamp server.",
+                    "default": "http://timestamp.digicert.com",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publisherName": {
+                    "description": "[The publisher name](https://github.com/electron-userland/electron-builder/issues/1187#issuecomment-278972073), exactly as in your code signed certificate. Several names can be provided.\nDefaults to common name from your code signing certificate.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "verifyUpdateCodeSignature": {
+                    "description": "Whether to verify the signature of an available update before installation.\nThe [publisher name](#publisherName) will be used for the signature verification.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "requestedExecutionLevel": {
+                    "description": "The [security level](https://msdn.microsoft.com/en-us/library/6ad1fshk.aspx#Anchor_9) at which the application requests to be executed.\nCannot be specified per target, allowed only in the `win`.",
+                    "default": "asInvoker",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "asInvoker",
+                                "highestAvailable",
+                                "requireAdministrator"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "signAndEditExecutable": {
+                    "description": "Whether to sign and add metadata to executable. Advanced option.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "signDlls": {
+                    "description": "Whether to sign DLL files. Advanced option.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "appId": {
+                    "description": "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
+                    "default": "com.electron.${name}",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "executableName": {
+                    "description": "The executable name. Defaults to `productName`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "compression": {
+                    "description": "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
+                    "default": "normal",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "maximum",
+                                "normal",
+                                "store"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "files": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "extraResources": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "extraFiles": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "asar": {
+                    "description": "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work.",
+                    "default": true,
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/AsarOptions"
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "boolean"
+                            ]
+                        }
+                    ]
+                },
+                "asarUnpack": {
+                    "description": "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "fileAssociations": {
+                    "description": "The file associations.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileAssociation"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/FileAssociation"
+                            }
+                        }
+                    ]
+                },
+                "protocols": {
+                    "description": "The URL protocol schemes.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/Protocol"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/Protocol"
+                            }
+                        }
+                    ]
+                },
+                "forceCodeSigning": {
+                    "description": "Whether to fail if app will be not code signed.",
+                    "type": "boolean"
+                },
+                "electronUpdaterCompatibility": {
+                    "description": "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "detectUpdateChannel": {
+                    "description": "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "generateUpdatesFilesForAllChannels": {
+                    "description": "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "releaseInfo": {
+                    "description": "The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes=\"new features\"\n```",
+                    "$ref": "#/definitions/ReleaseInfo"
+                },
+                "cscLink": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "cscKeyPassword": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "defaultArch": {
+                    "type": "string"
+                }
+            }
+        },
+        "NsisOptions": {
+            "type": "object",
+            "properties": {
+                "oneClick": {
+                    "description": "Whether to create one-click installer or assisted.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "perMachine": {
+                    "description": "Whether to show install mode installer page (choice per-machine or per-user) for assisted installer. Or whether installation always per all users (per-machine).\n\nIf `oneClick` is `true` (default): Whether to install per all users (per-machine).\n\nIf `oneClick` is `false` and `perMachine` is `true`: no install mode installer page, always install per-machine.\n\nIf `oneClick` is `false` and `perMachine` is `false` (default): install mode installer page.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "allowElevation": {
+                    "description": "*assisted installer only.* Allow requesting for elevation. If false, user will have to restart installer with elevated permissions.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "allowToChangeInstallationDirectory": {
+                    "description": "*assisted installer only.* Whether to allow user to change installation directory.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "installerIcon": {
+                    "description": "The path to installer icon, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerIcon.ico` or application icon.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "uninstallerIcon": {
+                    "description": "The path to uninstaller icon, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/uninstallerIcon.ico` or application icon.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "installerHeader": {
+                    "description": "*assisted installer only.* `MUI_HEADERIMAGE`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.",
+                    "default": "build/installerHeader.bmp",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "installerHeaderIcon": {
+                    "description": "*one-click installer only.* The path to header icon (above the progress bar), relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerHeaderIcon.ico` or application icon.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "installerSidebar": {
+                    "description": "*assisted installer only.* `MUI_WELCOMEFINISHPAGE_BITMAP`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerSidebar.bmp` or `${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp`. Image size 164 × 314 pixels.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "uninstallerSidebar": {
+                    "description": "*assisted installer only.* `MUI_UNWELCOMEFINISHPAGE_BITMAP`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `installerSidebar` option or `build/uninstallerSidebar.bmp` or `build/installerSidebar.bmp` or `${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp`",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "uninstallDisplayName": {
+                    "description": "The uninstaller display name in the control panel.",
+                    "default": "${productName} ${version}",
+                    "type": "string"
+                },
+                "include": {
+                    "description": "The path to NSIS include script to customize installer. Defaults to `build/installer.nsh`. See [Custom NSIS script](#custom-nsis-script).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "script": {
+                    "description": "The path to NSIS script to customize installer. Defaults to `build/installer.nsi`. See [Custom NSIS script](#custom-nsis-script).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "license": {
+                    "description": "The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). In addition to `txt, `rtf` and `html` supported (don't forget to use `target=\"_blank\"` for links).\n\nMultiple license files in different languages are supported — use lang postfix (e.g. `_de`, `_ru`)). For example, create files `license_de.txt` and `license_en.txt` in the build resources.\nIf OS language is german, `license_de.txt` will be displayed. See map of [language code to name](https://github.com/meikidd/iso-639-1/blob/master/src/data.js).\n\nAppropriate license file will be selected by user OS language.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName} Setup ${version}.${ext}`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "deleteAppDataOnUninstall": {
+                    "description": "*one-click installer only.* Whether to delete app data on uninstall.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "differentialPackage": {
+                    "type": "boolean"
+                },
+                "displayLanguageSelector": {
+                    "description": "Whether to display a language selection dialog. Not recommended (by default will be detected using OS language).",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "installerLanguages": {
+                    "description": "The installer languages (e.g. `en_US`, `de_DE`). Change only if you understand what do you do and for what.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "language": {
+                    "description": "[LCID Dec](https://msdn.microsoft.com/en-au/goglobal/bb964664.aspx), defaults to `1033`(`English - United States`).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "multiLanguageInstaller": {
+                    "description": "Whether to create multi-language installer. Defaults to `unicode` option value.",
+                    "type": "boolean"
+                },
+                "packElevateHelper": {
+                    "description": "Whether to pack the elevate executable (required for electron-updater if per-machine installer used or can be used in the future). Ignored if `perMachine` is set to `true`.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "preCompressedFileExtensions": {
+                    "description": "The file extension of files that will be not compressed. Applicable only for `extraResources` and `extraFiles` files.",
+                    "default": [
+                        ".avi",
+                        ".mov",
+                        ".m4v",
+                        ".mp4",
+                        ".m4p",
+                        ".qt",
+                        ".mkv",
+                        ".webm",
+                        ".vmdk"
+                    ],
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "unicode": {
+                    "description": "Whether to create [Unicode installer](http://nsis.sourceforge.net/Docs/Chapter1.html#intro-unicode).",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "guid": {
+                    "description": "See [GUID vs Application Name](../configuration/nsis#guid-vs-application-name).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "warningsAsErrors": {
+                    "description": "If `warningsAsErrors` is `true` (default): NSIS will treat warnings as errors. If `warningsAsErrors` is `false`: NSIS will allow warnings.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "useZip": {
+                    "default": false,
+                    "type": "boolean"
+                },
+                "customNsisBinary": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/CustomNsisBinary"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "debugLogging": {
+                    "description": "Whether or not to enable NSIS logging for debugging.\nNote: Requires a debug-enabled NSIS build.\nelectron-builder's included `makensis` only supports building debug-enabled NSIS installers on Windows currently\nhttps://github.com/electron-userland/electron-builder/issues/5119#issuecomment-811353612",
+                    "type": [
+                        "null",
+                        "boolean"
+                    ]
+                },
+                "runAfterFinish": {
+                    "description": "Whether to run the installed application after finish. For assisted installer corresponding checkbox will be removed.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "createDesktopShortcut": {
+                    "description": "Whether to create desktop shortcut. Set to `always` if to recreate also on reinstall (even if removed by user).",
+                    "default": true,
+                    "enum": [
+                        "always",
+                        false,
+                        true
+                    ]
+                },
+                "createStartMenuShortcut": {
+                    "description": "Whether to create start menu shortcut.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "menuCategory": {
+                    "description": "Whether to create submenu for start menu shortcut and program files directory. If `true`, company name will be used. Or string value.",
+                    "default": false,
+                    "type": [
+                        "string",
+                        "boolean"
+                    ]
+                },
+                "shortcutName": {
+                    "description": "The name that will be used for all shortcuts. Defaults to the application name.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "CustomNsisBinary": {
+            "type": "object",
+            "properties": {
+                "url": {
+                    "default": "https://github.com/electron-userland/electron-builder-binaries/releases/download",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "checksum": {
+                    "default": "o+YZsXHp8LNihhuk7JsCDhdIgx0MKKK+1b3sGD+4zX5djZULe4/4QMcAsfQ+0r+a8FnwBt7BVBHkIkJHjKQ0sg==",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "version": {
+                    "default": "3.0.4.2",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                }
+            },
+            "required": [
+                "url"
+            ]
+        },
+        "NsisWebOptions": {
+            "description": "Web Installer options.",
+            "type": "object",
+            "properties": {
+                "appPackageUrl": {
+                    "description": "The application package download URL. Optional — by default computed using publish configuration.\n\nURL like `https://example.com/download/latest` allows web installer to be version independent (installer will download latest application package).\nPlease note — it is [full URL](https://github.com/electron-userland/electron-builder/issues/1810#issuecomment-317650878).\n\nCustom `X-Arch` http header is set to `32` or `64`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName} Web Setup ${version}.${ext}`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "oneClick": {
+                    "description": "Whether to create one-click installer or assisted.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "perMachine": {
+                    "description": "Whether to show install mode installer page (choice per-machine or per-user) for assisted installer. Or whether installation always per all users (per-machine).\n\nIf `oneClick` is `true` (default): Whether to install per all users (per-machine).\n\nIf `oneClick` is `false` and `perMachine` is `true`: no install mode installer page, always install per-machine.\n\nIf `oneClick` is `false` and `perMachine` is `false` (default): install mode installer page.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "allowElevation": {
+                    "description": "*assisted installer only.* Allow requesting for elevation. If false, user will have to restart installer with elevated permissions.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "allowToChangeInstallationDirectory": {
+                    "description": "*assisted installer only.* Whether to allow user to change installation directory.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "installerIcon": {
+                    "description": "The path to installer icon, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerIcon.ico` or application icon.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "uninstallerIcon": {
+                    "description": "The path to uninstaller icon, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/uninstallerIcon.ico` or application icon.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "installerHeader": {
+                    "description": "*assisted installer only.* `MUI_HEADERIMAGE`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.",
+                    "default": "build/installerHeader.bmp",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "installerHeaderIcon": {
+                    "description": "*one-click installer only.* The path to header icon (above the progress bar), relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerHeaderIcon.ico` or application icon.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "installerSidebar": {
+                    "description": "*assisted installer only.* `MUI_WELCOMEFINISHPAGE_BITMAP`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerSidebar.bmp` or `${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp`. Image size 164 × 314 pixels.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "uninstallerSidebar": {
+                    "description": "*assisted installer only.* `MUI_UNWELCOMEFINISHPAGE_BITMAP`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `installerSidebar` option or `build/uninstallerSidebar.bmp` or `build/installerSidebar.bmp` or `${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp`",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "uninstallDisplayName": {
+                    "description": "The uninstaller display name in the control panel.",
+                    "default": "${productName} ${version}",
+                    "type": "string"
+                },
+                "include": {
+                    "description": "The path to NSIS include script to customize installer. Defaults to `build/installer.nsh`. See [Custom NSIS script](#custom-nsis-script).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "script": {
+                    "description": "The path to NSIS script to customize installer. Defaults to `build/installer.nsi`. See [Custom NSIS script](#custom-nsis-script).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "license": {
+                    "description": "The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). In addition to `txt, `rtf` and `html` supported (don't forget to use `target=\"_blank\"` for links).\n\nMultiple license files in different languages are supported — use lang postfix (e.g. `_de`, `_ru`)). For example, create files `license_de.txt` and `license_en.txt` in the build resources.\nIf OS language is german, `license_de.txt` will be displayed. See map of [language code to name](https://github.com/meikidd/iso-639-1/blob/master/src/data.js).\n\nAppropriate license file will be selected by user OS language.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "deleteAppDataOnUninstall": {
+                    "description": "*one-click installer only.* Whether to delete app data on uninstall.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "differentialPackage": {
+                    "type": "boolean"
+                },
+                "displayLanguageSelector": {
+                    "description": "Whether to display a language selection dialog. Not recommended (by default will be detected using OS language).",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "installerLanguages": {
+                    "description": "The installer languages (e.g. `en_US`, `de_DE`). Change only if you understand what do you do and for what.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "language": {
+                    "description": "[LCID Dec](https://msdn.microsoft.com/en-au/goglobal/bb964664.aspx), defaults to `1033`(`English - United States`).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "multiLanguageInstaller": {
+                    "description": "Whether to create multi-language installer. Defaults to `unicode` option value.",
+                    "type": "boolean"
+                },
+                "packElevateHelper": {
+                    "description": "Whether to pack the elevate executable (required for electron-updater if per-machine installer used or can be used in the future). Ignored if `perMachine` is set to `true`.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "preCompressedFileExtensions": {
+                    "description": "The file extension of files that will be not compressed. Applicable only for `extraResources` and `extraFiles` files.",
+                    "default": [
+                        ".avi",
+                        ".mov",
+                        ".m4v",
+                        ".mp4",
+                        ".m4p",
+                        ".qt",
+                        ".mkv",
+                        ".webm",
+                        ".vmdk"
+                    ],
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "unicode": {
+                    "description": "Whether to create [Unicode installer](http://nsis.sourceforge.net/Docs/Chapter1.html#intro-unicode).",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "guid": {
+                    "description": "See [GUID vs Application Name](../configuration/nsis#guid-vs-application-name).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "warningsAsErrors": {
+                    "description": "If `warningsAsErrors` is `true` (default): NSIS will treat warnings as errors. If `warningsAsErrors` is `false`: NSIS will allow warnings.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "useZip": {
+                    "default": false,
+                    "type": "boolean"
+                },
+                "customNsisBinary": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/CustomNsisBinary"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "debugLogging": {
+                    "description": "Whether or not to enable NSIS logging for debugging.\nNote: Requires a debug-enabled NSIS build.\nelectron-builder's included `makensis` only supports building debug-enabled NSIS installers on Windows currently\nhttps://github.com/electron-userland/electron-builder/issues/5119#issuecomment-811353612",
+                    "type": [
+                        "null",
+                        "boolean"
+                    ]
+                },
+                "runAfterFinish": {
+                    "description": "Whether to run the installed application after finish. For assisted installer corresponding checkbox will be removed.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "createDesktopShortcut": {
+                    "description": "Whether to create desktop shortcut. Set to `always` if to recreate also on reinstall (even if removed by user).",
+                    "default": true,
+                    "enum": [
+                        "always",
+                        false,
+                        true
+                    ]
+                },
+                "createStartMenuShortcut": {
+                    "description": "Whether to create start menu shortcut.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "menuCategory": {
+                    "description": "Whether to create submenu for start menu shortcut and program files directory. If `true`, company name will be used. Or string value.",
+                    "default": false,
+                    "type": [
+                        "string",
+                        "boolean"
+                    ]
+                },
+                "shortcutName": {
+                    "description": "The name that will be used for all shortcuts. Defaults to the application name.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "PortableOptions": {
+            "description": "Portable options.",
+            "type": "object",
+            "properties": {
+                "requestExecutionLevel": {
+                    "description": "The [requested execution level](http://nsis.sourceforge.net/Reference/RequestExecutionLevel) for Windows.",
+                    "default": "user",
+                    "enum": [
+                        "admin",
+                        "highest",
+                        "user"
+                    ],
+                    "type": "string"
+                },
+                "unpackDirName": {
+                    "description": "The unpack directory for the portable app resources.\n\nIf set to a string, it will be the name in [TEMP](https://www.askvg.com/where-does-windows-store-temporary-files-and-how-to-change-temp-folder-location/) directory\nIf set explicitly to `false`, it will use the Windows temp directory ($PLUGINSDIR) that is unique to each launch of the portable application.\n\nDefaults to [uuid](https://github.com/segmentio/ksuid) of build (changed on each build of portable executable).",
+                    "type": [
+                        "string",
+                        "boolean"
+                    ]
+                },
+                "splashImage": {
+                    "description": "The image to show while the portable executable is extracting. This image must be a bitmap (`.bmp`) image.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "unicode": {
+                    "description": "Whether to create [Unicode installer](http://nsis.sourceforge.net/Docs/Chapter1.html#intro-unicode).",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "guid": {
+                    "description": "See [GUID vs Application Name](../configuration/nsis#guid-vs-application-name).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "warningsAsErrors": {
+                    "description": "If `warningsAsErrors` is `true` (default): NSIS will treat warnings as errors. If `warningsAsErrors` is `false`: NSIS will allow warnings.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "useZip": {
+                    "default": false,
+                    "type": "boolean"
+                },
+                "customNsisBinary": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/CustomNsisBinary"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "debugLogging": {
+                    "description": "Whether or not to enable NSIS logging for debugging.\nNote: Requires a debug-enabled NSIS build.\nelectron-builder's included `makensis` only supports building debug-enabled NSIS installers on Windows currently\nhttps://github.com/electron-userland/electron-builder/issues/5119#issuecomment-811353612",
+                    "type": [
+                        "null",
+                        "boolean"
+                    ]
+                }
+            }
+        },
+        "AppXOptions": {
+            "type": "object",
+            "properties": {
+                "applicationId": {
+                    "description": "The application id. Defaults to `identityName`. Can’t start with numbers.",
+                    "type": "string"
+                },
+                "backgroundColor": {
+                    "description": "The background color of the app tile. See [Visual Elements](https://msdn.microsoft.com/en-us/library/windows/apps/br211471.aspx).",
+                    "default": "#464646",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "displayName": {
+                    "description": "A friendly name that can be displayed to users. Corresponds to [Properties.DisplayName](https://msdn.microsoft.com/en-us/library/windows/apps/br211432.aspx).\nDefaults to the application product name.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "identityName": {
+                    "description": "The name. Corresponds to [Identity.Name](https://msdn.microsoft.com/en-us/library/windows/apps/br211441.aspx). Defaults to the [application name](/configuration/configuration#Metadata-name).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publisher": {
+                    "description": "The Windows Store publisher. Not used if AppX is build for testing. See [AppX Package Code Signing](#appx-package-code-signing) below.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publisherDisplayName": {
+                    "description": "A friendly name for the publisher that can be displayed to users. Corresponds to [Properties.PublisherDisplayName](https://msdn.microsoft.com/en-us/library/windows/apps/br211460.aspx).\nDefaults to company name from the application metadata.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "languages": {
+                    "description": "The list of [supported languages](https://docs.microsoft.com/en-us/windows/uwp/globalizing/manage-language-and-region#specify-the-supported-languages-in-the-apps-manifest) that will be listed in the Windows Store.\nThe first entry (index 0) will be the default language.\nDefaults to en-US if omitted.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "addAutoLaunchExtension": {
+                    "description": "Whether to add auto launch extension. Defaults to `true` if [electron-winstore-auto-launch](https://github.com/felixrieseberg/electron-winstore-auto-launch) in the dependencies.",
+                    "type": "boolean"
+                },
+                "customExtensionsPath": {
+                    "description": "Relative path to custom extensions xml to be included in an `appmanifest.xml`.",
+                    "type": "string"
+                },
+                "showNameOnTiles": {
+                    "description": "Whether to overlay the app's name on top of tile images on the Start screen. Defaults to `false`. (https://docs.microsoft.com/en-us/uwp/schemas/appxpackage/uapmanifestschema/element-uap-shownameontiles) in the dependencies.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "electronUpdaterAware": {
+                    "default": false,
+                    "type": "boolean"
+                },
+                "setBuildNumber": {
+                    "description": "Whether to set build number. See https://github.com/electron-userland/electron-builder/issues/3875",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "makeappxArgs": {
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "MsiOptions": {
+            "type": "object",
+            "properties": {
+                "oneClick": {
+                    "description": "One-click installation.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "upgradeCode": {
+                    "description": "The [upgrade code](https://msdn.microsoft.com/en-us/library/windows/desktop/aa372375(v=vs.85).aspx). Optional, by default generated using app id.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "warningsAsErrors": {
+                    "description": "If `warningsAsErrors` is `true` (default): treat warnings as errors. If `warningsAsErrors` is `false`: allow warnings.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "additionalWixArgs": {
+                    "description": "Any additional arguments to be passed to the WiX installer compiler, such as `[\"-ext\", \"WixUtilExtension\"]`",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "perMachine": {
+                    "description": "Whether to install per all users (per-machine).",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "runAfterFinish": {
+                    "description": "Whether to run the installed application after finish. For assisted installer corresponding checkbox will be removed.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "createDesktopShortcut": {
+                    "description": "Whether to create desktop shortcut. Set to `always` if to recreate also on reinstall (even if removed by user).",
+                    "default": true,
+                    "enum": [
+                        "always",
+                        false,
+                        true
+                    ]
+                },
+                "createStartMenuShortcut": {
+                    "description": "Whether to create start menu shortcut.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "menuCategory": {
+                    "description": "Whether to create submenu for start menu shortcut and program files directory. If `true`, company name will be used. Or string value.",
+                    "default": false,
+                    "type": [
+                        "string",
+                        "boolean"
+                    ]
+                },
+                "shortcutName": {
+                    "description": "The name that will be used for all shortcuts. Defaults to the application name.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "SquirrelWindowsOptions": {
+            "type": "object",
+            "properties": {
+                "iconUrl": {
+                    "description": "A URL to an ICO file to use as the application icon (displayed in Control Panel > Programs and Features). Defaults to the Electron icon.\n\nPlease note — [local icon file url is not accepted](https://github.com/atom/grunt-electron-installer/issues/73), must be https/http.\n\nIf you don't plan to build windows installer, you can omit it.\nIf your project repository is public on GitHub, it will be `https://github.com/${u}/${p}/blob/master/build/icon.ico?raw=true` by default.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "loadingGif": {
+                    "description": "The path to a .gif file to display during install. `build/install-spinner.gif` will be used if exists (it is a recommended way to set)\n(otherwise [default](https://github.com/electron/windows-installer/blob/master/resources/install-spinner.gif)).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "msi": {
+                    "description": "Whether to create an MSI installer. Defaults to `false` (MSI is not created).",
+                    "type": "boolean"
+                },
+                "remoteReleases": {
+                    "description": "A URL to your existing updates. Or `true` to automatically set to your GitHub repository. If given, these will be downloaded to create delta updates.",
+                    "type": [
+                        "null",
+                        "string",
+                        "boolean"
+                    ]
+                },
+                "remoteToken": {
+                    "description": "Authentication token for remote updates",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "useAppIdAsId": {
+                    "description": "Use `appId` to identify package instead of `name`.",
+                    "type": "boolean"
+                },
+                "name": {
+                    "description": "https://github.com/electron-userland/electron-builder/issues/1743",
+                    "type": "string"
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "LinuxConfiguration": {
+            "type": "object",
+            "properties": {
+                "target": {
+                    "description": "Target package type: list of `AppImage`, `snap`, `deb`, `rpm`, `freebsd`, `pacman`, `p5p`, `apk`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir`.\n\nelectron-builder [docker image](/multi-platform-build#docker) can be used to build Linux targets on any platform.\n\nPlease [do not put an AppImage into another archive](https://github.com/probonopd/AppImageKit/wiki/Creating-AppImages#common-mistake) like a .zip or .tar.gz.",
+                    "default": "AppImage",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/TargetConfiguration"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/TargetConfiguration"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "maintainer": {
+                    "description": "The maintainer. Defaults to [author](/configuration/configuration#Metadata-author).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "vendor": {
+                    "description": "The vendor. Defaults to [author](/configuration/configuration#Metadata-author).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "icon": {
+                    "description": "The path to icon set directory or one png file, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory. The icon filename must contain the size (e.g. 32x32.png) of the icon.\nBy default will be generated automatically based on the macOS icns file.",
+                    "type": "string"
+                },
+                "packageCategory": {
+                    "description": "backward compatibility + to allow specify fpm-only category for all possible fpm targets in one place",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "synopsis": {
+                    "description": "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "description": {
+                    "description": "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "category": {
+                    "description": "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "mimeTypes": {
+                    "description": "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "desktop": {
+                    "description": "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value)."
+                },
+                "executableArgs": {
+                    "description": "The executable parameters. Pass to executableName",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "appId": {
+                    "description": "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
+                    "default": "com.electron.${name}",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "executableName": {
+                    "description": "The executable name. Defaults to `productName`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "compression": {
+                    "description": "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
+                    "default": "normal",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "maximum",
+                                "normal",
+                                "store"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "files": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "extraResources": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "extraFiles": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "asar": {
+                    "description": "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work.",
+                    "default": true,
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/AsarOptions"
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "boolean"
+                            ]
+                        }
+                    ]
+                },
+                "asarUnpack": {
+                    "description": "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "fileAssociations": {
+                    "description": "The file associations.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileAssociation"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/FileAssociation"
+                            }
+                        }
+                    ]
+                },
+                "protocols": {
+                    "description": "The URL protocol schemes.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/Protocol"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/Protocol"
+                            }
+                        }
+                    ]
+                },
+                "forceCodeSigning": {
+                    "description": "Whether to fail if app will be not code signed.",
+                    "type": "boolean"
+                },
+                "electronUpdaterCompatibility": {
+                    "description": "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "detectUpdateChannel": {
+                    "description": "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "generateUpdatesFilesForAllChannels": {
+                    "description": "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "releaseInfo": {
+                    "description": "The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes=\"new features\"\n```",
+                    "$ref": "#/definitions/ReleaseInfo"
+                },
+                "cscLink": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "cscKeyPassword": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "defaultArch": {
+                    "type": "string"
+                }
+            }
+        },
+        "DebOptions": {
+            "type": "object",
+            "properties": {
+                "depends": {
+                    "description": "Package dependencies. Defaults to `[\"gconf2\", \"gconf-service\", \"libnotify4\", \"libappindicator1\", \"libxtst6\", \"libnss3\"]`.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "packageCategory": {
+                    "description": "The [package category](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Section).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "priority": {
+                    "description": "The [Priority](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Priority) attribute.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "compression": {
+                    "description": "The compression type.",
+                    "default": "xz",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "bzip2",
+                                "gz",
+                                "xz"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "icon": {
+                    "type": "string"
+                },
+                "packageName": {
+                    "description": "The name of the package.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "vendor": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "maintainer": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "afterInstall": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "afterRemove": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "fpm": {
+                    "description": "*Advanced only* The [fpm](https://github.com/jordansissel/fpm/wiki#usage) options.\n\nExample: `[\"--before-install=build/deb-preinstall.sh\", \"--after-upgrade=build/deb-postinstall.sh\"]`",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "synopsis": {
+                    "description": "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "description": {
+                    "description": "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "category": {
+                    "description": "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "mimeTypes": {
+                    "description": "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "desktop": {
+                    "description": "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value)."
+                },
+                "executableArgs": {
+                    "description": "The executable parameters. Pass to executableName",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "SnapOptions": {
+            "type": "object",
+            "properties": {
+                "confinement": {
+                    "description": "The type of [confinement](https://snapcraft.io/docs/reference/confinement) supported by the snap.",
+                    "default": "strict",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "classic",
+                                "devmode",
+                                "strict"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "environment": {
+                    "description": "The custom environment. Defaults to `{\"TMPDIR: \"$XDG_RUNTIME_DIR\"}`. If you set custom, it will be merged with default.",
+                    "anyOf": [
+                        {
+                            "type": "object",
+                            "additionalProperties": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "summary": {
+                    "description": "The 78 character long summary. Defaults to [productName](/configuration/configuration#Configuration-productName).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "grade": {
+                    "description": "The quality grade of the snap. It can be either `devel` (i.e. a development version of the snap, so not to be published to the “stable” or “candidate” channels) or “stable” (i.e. a stable release or release candidate, which can be released to all channels).",
+                    "default": "stable",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "devel",
+                                "stable"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "assumes": {
+                    "description": "The list of features that must be supported by the core in order for this snap to install.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "buildPackages": {
+                    "description": "The list of debian packages needs to be installed for building this snap.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "stagePackages": {
+                    "description": "The list of Ubuntu packages to use that are needed to support the `app` part creation. Like `depends` for `deb`.\nDefaults to `[\"libnspr4\", \"libnss3\", \"libxss1\", \"libappindicator3-1\", \"libsecret-1-0\"]`.\n\nIf list contains `default`, it will be replaced to default list, so, `[\"default\", \"foo\"]` can be used to add custom package `foo` in addition to defaults.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "hooks": {
+                    "description": "The [hooks](https://docs.snapcraft.io/build-snaps/hooks) directory, relative to `build` (build resources directory).",
+                    "default": "build/snap-hooks",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "plugs": {
+                    "description": "The list of [plugs](https://snapcraft.io/docs/reference/interfaces).\nDefaults to `[\"desktop\", \"desktop-legacy\", \"home\", \"x11\", \"unity7\", \"browser-support\", \"network\", \"gsettings\", \"audio-playback\", \"pulseaudio\", \"opengl\"]`.\n\nIf list contains `default`, it will be replaced to default list, so, `[\"default\", \"foo\"]` can be used to add custom plug `foo` in addition to defaults.\n\nAdditional attributes can be specified using object instead of just name of plug:\n```\n[\n {\n   \"browser-sandbox\": {\n     \"interface\": \"browser-support\",\n     \"allow-sandbox\": true\n   },\n },\n \"another-simple-plug-name\"\n]\n```",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/PlugDescriptor"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/PlugDescriptor"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "slots": {
+                    "description": "The list of [slots](https://snapcraft.io/docs/reference/interfaces).\n\nAdditional attributes can be specified using object instead of just name of slot:\n```\n[\n {\n   \"mpris\": {\n     \"name\": \"chromium\"\n   },\n }\n]\n\nIn case you want your application to be a compliant MPris player, you will need to definie\nThe mpris slot with \"chromium\" name.\nThis electron has it [hardcoded](https://source.chromium.org/chromium/chromium/src/+/master:components/system_media_controls/linux/system_media_controls_linux.cc;l=51;bpv=0;bpt=1),\nand we need to pass this name so snap [will allow it](https://forum.snapcraft.io/t/unable-to-use-mpris-interface/15360/7) in strict confinement.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/PlugDescriptor"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/SlotDescriptor"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "after": {
+                    "description": "Specifies any [parts](https://snapcraft.io/docs/reference/parts) that should be built before this part.\nDefaults to `[\"desktop-gtk2\"\"]`.\n\nIf list contains `default`, it will be replaced to default list, so, `[\"default\", \"foo\"]` can be used to add custom parts `foo` in addition to defaults.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "useTemplateApp": {
+                    "description": "Whether to use template snap. Defaults to `true` if `stagePackages` not specified.",
+                    "type": "boolean"
+                },
+                "autoStart": {
+                    "description": "Whether or not the snap should automatically start on login.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "layout": {
+                    "description": "Specifies any files to make accessible from locations such as `/usr`, `/var`, and `/etc`. See [snap layouts](https://snapcraft.io/docs/snap-layouts) to learn more.",
+                    "anyOf": [
+                        {
+                            "type": "object",
+                            "additionalProperties": {
+                                "type": "object",
+                                "additionalProperties": {
+                                    "type": "string"
+                                }
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "appPartStage": {
+                    "description": "Specifies which files from the app part to stage and which to exclude. Individual files, directories, wildcards, globstars, and exclusions are accepted. See [Snapcraft filesets](https://snapcraft.io/docs/snapcraft-filesets) to learn more about the format.\n\nThe defaults can be found in [snap.ts](https://github.com/electron-userland/electron-builder/blob/master/packages/app-builder-lib/templates/snap/snapcraft.yaml#L29).",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "title": {
+                    "description": "An optional title for the snap, may contain uppercase letters and spaces. Defaults to `productName`. See [snap format documentation](https://snapcraft.io/docs/snap-format).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "synopsis": {
+                    "description": "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "description": {
+                    "description": "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "category": {
+                    "description": "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "mimeTypes": {
+                    "description": "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "desktop": {
+                    "description": "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value)."
+                },
+                "executableArgs": {
+                    "description": "The executable parameters. Pass to executableName",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "PlugDescriptor": {
+            "type": "object",
+            "additionalProperties": {
+                "anyOf": [
+                    {
+                        "type": "object",
+                        "additionalProperties": {}
+                    },
+                    {
+                        "type": "null"
+                    }
+                ]
+            }
+        },
+        "SlotDescriptor": {
+            "type": "object",
+            "additionalProperties": {
+                "anyOf": [
+                    {
+                        "type": "object",
+                        "additionalProperties": {}
+                    },
+                    {
+                        "type": "null"
+                    }
+                ]
+            }
+        },
+        "AppImageOptions": {
+            "type": "object",
+            "properties": {
+                "license": {
+                    "description": "The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). Only plain text is supported.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "synopsis": {
+                    "description": "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "description": {
+                    "description": "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "category": {
+                    "description": "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "mimeTypes": {
+                    "description": "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "desktop": {
+                    "description": "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value)."
+                },
+                "executableArgs": {
+                    "description": "The executable parameters. Pass to executableName",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "FlatpakOptions": {
+            "type": "object",
+            "properties": {
+                "license": {
+                    "description": "The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). Only plain text is supported.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "runtime": {
+                    "description": "The name of the runtime that the application uses. Defaults to `org.freedesktop.Platform`.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    "type": "string"
+                },
+                "runtimeVersion": {
+                    "description": "The version of the runtime that the application uses. Defaults to `20.08`.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    "type": "string"
+                },
+                "sdk": {
+                    "description": "The name of the development runtime that the application builds with. Defaults to `org.freedesktop.Sdk`.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    "type": "string"
+                },
+                "base": {
+                    "description": "Start with the files from the specified application. This can be used to create applications that extend another application.\nDefaults to [org.electronjs.Electron2.BaseApp](https://github.com/flathub/org.electronjs.Electron2.BaseApp).\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    "type": "string"
+                },
+                "baseVersion": {
+                    "description": "Use this specific version of the application specified in base. Defaults to `20.08`.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    "type": "string"
+                },
+                "branch": {
+                    "description": "The branch to use when exporting the application. Defaults to `master`.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    "type": "string"
+                },
+                "finishArgs": {
+                    "description": "An array of arguments passed to the flatpak build-finish command. Defaults to:\n```json\n[\n  // Wayland/X11 Rendering\n  \"--socket=wayland\",\n  \"--socket=x11\",\n  \"--share=ipc\",\n  // Open GL\n  \"--device=dri\",\n  // Audio output\n  \"--socket=pulseaudio\",\n  // Read/write home directory access\n  \"--filesystem=home\",\n  // Allow communication with network\n  \"--share=network\",\n  // System notifications with libnotify\n  \"--talk-name=org.freedesktop.Notifications\",\n]\n```\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    "type": "array",
+                    "items": {
+                        "type": "string"
+                    }
+                },
+                "modules": {
+                    "description": "An array of objects specifying the modules to be built in order.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    "type": "array",
+                    "items": {}
+                },
+                "files": {
+                    "description": "Files to copy directly into the app. Should be a list of [source, dest] tuples. Source should be a relative/absolute path to a file/directory to copy into the flatpak, and dest should be the path inside the app install prefix (e.g. /share/applications/).\n\nSee [@malept/flatpak-bundler documentation](https://github.com/malept/flatpak-bundler#build-options).",
+                    "type": "array",
+                    "items": {
+                        "type": "array",
+                        "items": [
+                            {
+                                "type": "string"
+                            },
+                            {
+                                "type": "string"
+                            }
+                        ],
+                        "minItems": 2,
+                        "maxItems": 2
+                    }
+                },
+                "symlinks": {
+                    "description": "Symlinks to create in the app files. Should be a list of [target, location] symlink tuples. Target can be either a relative or absolute path inside the app install prefix, and location should be a absolute path inside the prefix to create the symlink at.\n\nSee [@malept/flatpak-bundler documentation](https://github.com/malept/flatpak-bundler#build-options).",
+                    "type": "array",
+                    "items": {
+                        "type": "array",
+                        "items": [
+                            {
+                                "type": "string"
+                            },
+                            {
+                                "type": "string"
+                            }
+                        ],
+                        "minItems": 2,
+                        "maxItems": 2
+                    }
+                },
+                "useWaylandFlags": {
+                    "description": "Whether to enable the Wayland specific flags (`--enable-features=UseOzonePlatform --ozone-platform=wayland`) in the wrapper script. These flags are only available starting with Electron version 12. Defaults to `false`.",
+                    "type": "boolean"
+                },
+                "synopsis": {
+                    "description": "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "description": {
+                    "description": "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "category": {
+                    "description": "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "mimeTypes": {
+                    "description": "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "desktop": {
+                    "description": "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value)."
+                },
+                "executableArgs": {
+                    "description": "The executable parameters. Pass to executableName",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "LinuxTargetSpecificOptions": {
+            "type": "object",
+            "properties": {
+                "depends": {
+                    "description": "Package dependencies.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "compression": {
+                    "description": "The compression type.",
+                    "default": "xz",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "bzip2",
+                                "gz",
+                                "xz"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "icon": {
+                    "type": "string"
+                },
+                "packageCategory": {
+                    "description": "The package category.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "packageName": {
+                    "description": "The name of the package.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "vendor": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "maintainer": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "afterInstall": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "afterRemove": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "fpm": {
+                    "description": "*Advanced only* The [fpm](https://github.com/jordansissel/fpm/wiki#usage) options.\n\nExample: `[\"--before-install=build/deb-preinstall.sh\", \"--after-upgrade=build/deb-postinstall.sh\"]`",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "synopsis": {
+                    "description": "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "description": {
+                    "description": "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "category": {
+                    "description": "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "mimeTypes": {
+                    "description": "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "desktop": {
+                    "description": "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value)."
+                },
+                "executableArgs": {
+                    "description": "The executable parameters. Pass to executableName",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "ElectronDownloadOptions": {
+            "type": "object",
+            "properties": {
+                "version": {
+                    "type": "string"
+                },
+                "cache": {
+                    "description": "The [cache location](https://github.com/electron-userland/electron-download#cache-location).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "mirror": {
+                    "description": "The mirror.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "customDir": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "customFilename": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "strictSSL": {
+                    "type": "boolean"
+                },
+                "isVerifyChecksum": {
+                    "type": "boolean"
+                },
+                "platform": {
+                    "enum": [
+                        "darwin",
+                        "linux",
+                        "mas",
+                        "win32"
+                    ],
+                    "type": "string"
+                },
+                "arch": {
+                    "type": "string"
+                }
+            }
+        },
+        "ElectronBrandingOptions": {
+            "description": "Electron distributables branding options.",
+            "type": "object",
+            "properties": {
+                "projectName": {
+                    "type": "string"
+                },
+                "productName": {
+                    "type": "string"
+                }
+            }
+        },
+        "PlatformPackager<any>": {
+            "type": "object",
+            "properties": {
+                "packagerOptions": {
+                    "$ref": "#/definitions/PackagerOptions"
+                },
+                "buildResourcesDir": {
+                    "type": "string"
+                },
+                "projectDir": {
+                    "type": "string"
+                },
+                "config": {
+                    "$ref": "#/definitions/Configuration"
+                },
+                "platformSpecificBuildOptions": {},
+                "resourceList": {
+                    "$ref": "#/definitions/Promise<string[]>"
+                },
+                "_resourceList": {
+                    "$ref": "#/definitions/Lazy<string[]>"
+                },
+                "appInfo": {
+                    "$ref": "#/definitions/AppInfo"
+                },
+                "info": {
+                    "$ref": "#/definitions/Packager"
+                },
+                "platform": {
+                    "$ref": "#/definitions/Platform"
+                },
+                "compression": {
+                    "$ref": "#/definitions/CompressionLevel"
+                },
+                "debugLogger": {
+                    "$ref": "#/definitions/DebugLogger"
+                },
+                "defaultTarget": {
+                    "type": "array",
+                    "items": {
+                        "type": "string"
+                    }
+                },
+                "fileAssociations": {
+                    "type": "array",
+                    "items": {
+                        "$ref": "#/definitions/FileAssociation"
+                    }
+                },
+                "forceCodeSigning": {
+                    "type": "boolean"
+                }
+            },
+            "required": [
+                "_resourceList",
+                "appInfo",
+                "buildResourcesDir",
+                "compression",
+                "config",
+                "debugLogger",
+                "defaultTarget",
+                "fileAssociations",
+                "forceCodeSigning",
+                "info",
+                "packagerOptions",
+                "platform",
+                "platformSpecificBuildOptions",
+                "projectDir",
+                "resourceList"
+            ]
+        },
+        "PackagerOptions": {
+            "type": "object",
+            "properties": {
+                "targets": {
+                    "$ref": "#/definitions/Map<Platform,Map<Arch,string[]>>"
+                },
+                "mac": {
+                    "type": "array",
+                    "items": {
+                        "type": "string"
+                    }
+                },
+                "linux": {
+                    "type": "array",
+                    "items": {
+                        "type": "string"
+                    }
+                },
+                "win": {
+                    "type": "array",
+                    "items": {
+                        "type": "string"
+                    }
+                },
+                "projectDir": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "platformPackagerFactory": {
+                    "type": [
+                        "null",
+                        "object"
+                    ]
+                },
+                "config": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/Configuration"
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "effectiveOptionComputed": {
+                    "type": "object"
+                },
+                "prepackaged": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                }
+            }
+        },
+        "Map<Platform,Map<Arch,string[]>>": {
+            "type": "object",
+            "properties": {
+                "size": {
+                    "type": "number"
+                },
+                "__@toStringTag": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "__@toStringTag",
+                "size"
+            ]
+        },
+        "Configuration": {
+            "description": "Configuration Options",
+            "type": "object",
+            "properties": {
+                "appId": {
+                    "description": "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
+                    "default": "com.electron.${name}",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "productName": {
+                    "description": "As [name](#Metadata-name), but allows you to specify a product name for your executable which contains spaces and other special characters not allowed in the [name property](https://docs.npmjs.com/files/package.json#name).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "copyright": {
+                    "description": "The human-readable copyright line for the app.",
+                    "default": "Copyright © year ${author}",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "directories": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/MetadataDirectories"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "mac": {
+                    "description": "Options related to how build macOS targets.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/MacConfiguration"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "mas": {
+                    "description": "MAS (Mac Application Store) options.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/MasConfiguration"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "masDev": {
+                    "description": "MAS (Mac Application Store) development options (`mas-dev` target).",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/MasConfiguration"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "dmg": {
+                    "description": "macOS DMG options.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/DmgOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "pkg": {
+                    "description": "macOS PKG options.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/PkgOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "win": {
+                    "description": "Options related to how build Windows targets.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/WindowsConfiguration"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "nsis": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/NsisOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "nsisWeb": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/NsisWebOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "portable": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/PortableOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "appx": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/AppXOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "msi": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/MsiOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "squirrelWindows": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/SquirrelWindowsOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "linux": {
+                    "description": "Options related to how build Linux targets.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/LinuxConfiguration"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "deb": {
+                    "description": "Debian package options.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/DebOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "snap": {
+                    "description": "Snap options.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/SnapOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "appImage": {
+                    "description": "AppImage options.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/AppImageOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "flatpak": {
+                    "description": "Flatpak options.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FlatpakOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "pacman": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/LinuxTargetSpecificOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "rpm": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/LinuxTargetSpecificOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "freebsd": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/LinuxTargetSpecificOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "p5p": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/LinuxTargetSpecificOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "apk": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/LinuxTargetSpecificOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "includeSubNodeModules": {
+                    "description": "Whether to include *all* of the submodules node_modules directories",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "buildDependenciesFromSource": {
+                    "description": "Whether to build the application native dependencies from source.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "nodeGypRebuild": {
+                    "description": "Whether to execute `node-gyp rebuild` before starting to package the app.\n\nDon't [use](https://github.com/electron-userland/electron-builder/issues/683#issuecomment-241214075) [npm](http://electron.atom.io/docs/tutorial/using-native-node-modules/#using-npm) (neither `.npmrc`) for configuring electron headers. Use `electron-builder node-gyp-rebuild` instead.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "npmArgs": {
+                    "description": "Additional command line arguments to use when installing app native deps.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "npmRebuild": {
+                    "description": "Whether to [rebuild](https://docs.npmjs.com/cli/rebuild) native dependencies before starting to package the app.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "buildVersion": {
+                    "description": "The build version. Maps to the `CFBundleVersion` on macOS, and `FileVersion` metadata property on Windows. Defaults to the `version`.\nIf `TRAVIS_BUILD_NUMBER` or `APPVEYOR_BUILD_NUMBER` or `CIRCLE_BUILD_NUM` or `BUILD_NUMBER` or `bamboo.buildNumber` or `CI_PIPELINE_IID` env defined, it will be used as a build version (`version.build_number`).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "electronCompile": {
+                    "description": "Whether to use [electron-compile](http://github.com/electron/electron-compile) to compile app. Defaults to `true` if `electron-compile` in the dependencies. And `false` if in the `devDependencies` or doesn't specified.",
+                    "type": "boolean"
+                },
+                "electronDist": {
+                    "description": "Returns the path to custom Electron build (e.g. `~/electron/out/R`). Zip files must follow the pattern `electron-v${version}-${platformName}-${arch}.zip`, otherwise it will be assumed to be an unpacked Electron app directory",
+                    "type": [
+                        "string",
+                        "object"
+                    ]
+                },
+                "electronDownload": {
+                    "description": "The [electron-download](https://github.com/electron-userland/electron-download#usage) options.",
+                    "$ref": "#/definitions/ElectronDownloadOptions"
+                },
+                "electronBranding": {
+                    "description": "The branding used by Electron's distributables. This is needed if a fork has modified Electron's BRANDING.json file.",
+                    "$ref": "#/definitions/ElectronBrandingOptions"
+                },
+                "electronVersion": {
+                    "description": "The version of electron you are packaging for. Defaults to version of `electron`, `electron-prebuilt` or `electron-prebuilt-compile` dependency.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "extends": {
+                    "description": "The name of a built-in configuration preset (currently, only `react-cra` is supported) or any number of paths to config files (relative to project dir).\n\nThe latter allows to mixin a config from multiple other configs, as if you `Object.assign` them, but properly combine `files` glob patterns.\n\nIf `react-scripts` in the app dependencies, `react-cra` will be set automatically. Set to `null` to disable automatic detection.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "extraMetadata": {
+                    "description": "Inject properties to `package.json`."
+                },
+                "forceCodeSigning": {
+                    "description": "Whether to fail if the application is not signed (to prevent unsigned app if code signing configuration is not correct).",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "nodeVersion": {
+                    "description": "*libui-based frameworks only* The version of NodeJS you are packaging for.\nYou can set it to `current` to set the Node.js version that you use to run.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "launchUiVersion": {
+                    "description": "*libui-based frameworks only* The version of LaunchUI you are packaging for. Applicable for Windows only. Defaults to version suitable for used framework version.",
+                    "type": [
+                        "null",
+                        "string",
+                        "boolean"
+                    ]
+                },
+                "framework": {
+                    "description": "The framework name. One of `electron`, `proton`, `libui`. Defaults to `electron`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "afterPack": {
+                    "description": "The function (or path to file or module id) to be [run after pack](#afterpack) (but before pack into distributable format and sign).",
+                    "type": [
+                        "null",
+                        "string",
+                        "object"
+                    ]
+                },
+                "afterSign": {
+                    "description": "The function (or path to file or module id) to be [run after pack and sign](#aftersign) (but before pack into distributable format).",
+                    "type": [
+                        "null",
+                        "string",
+                        "object"
+                    ]
+                },
+                "artifactBuildStarted": {
+                    "description": "The function (or path to file or module id) to be run on artifact build start.",
+                    "type": [
+                        "null",
+                        "string",
+                        "object"
+                    ]
+                },
+                "artifactBuildCompleted": {
+                    "description": "The function (or path to file or module id) to be run on artifact build completed.",
+                    "type": [
+                        "null",
+                        "string",
+                        "object"
+                    ]
+                },
+                "afterAllArtifactBuild": {
+                    "description": "The function (or path to file or module id) to be [run after all artifacts are build](#afterAllArtifactBuild).",
+                    "type": [
+                        "null",
+                        "string",
+                        "object"
+                    ]
+                },
+                "msiProjectCreated": {
+                    "description": "MSI project created on disk - not packed into .msi package yet.",
+                    "type": [
+                        "null",
+                        "string",
+                        "object"
+                    ]
+                },
+                "appxManifestCreated": {
+                    "description": "Appx manifest created on disk - not packed into .appx package yet.",
+                    "type": [
+                        "null",
+                        "string",
+                        "object"
+                    ]
+                },
+                "onNodeModuleFile": {
+                    "description": "The function (or path to file or module id) to be [run on each node module](#onnodemodulefile) file.",
+                    "type": [
+                        "null",
+                        "string",
+                        "object"
+                    ]
+                },
+                "beforeBuild": {
+                    "description": "The function (or path to file or module id) to be run before dependencies are installed or rebuilt. Works when `npmRebuild` is set to `true`. Resolving to `false` will skip dependencies install or rebuild.\n\nIf provided and `node_modules` are missing, it will not invoke production dependencies check.",
+                    "type": [
+                        "null",
+                        "string",
+                        "object"
+                    ]
+                },
+                "remoteBuild": {
+                    "description": "Whether to build using Electron Build Service if target not supported on current OS.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "includePdb": {
+                    "description": "Whether to include PDB files.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "removePackageScripts": {
+                    "description": "Whether to remove `scripts` field from `package.json` files.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "removePackageKeywords": {
+                    "description": "Whether to remove `keywords` field from `package.json` files.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "executableName": {
+                    "description": "The executable name. Defaults to `productName`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "compression": {
+                    "description": "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
+                    "default": "normal",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "maximum",
+                                "normal",
+                                "store"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "files": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "extraResources": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "extraFiles": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "asar": {
+                    "description": "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work.",
+                    "default": true,
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/AsarOptions"
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "boolean"
+                            ]
+                        }
+                    ]
+                },
+                "asarUnpack": {
+                    "description": "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "icon": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "fileAssociations": {
+                    "description": "The file associations.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileAssociation"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/FileAssociation"
+                            }
+                        }
+                    ]
+                },
+                "protocols": {
+                    "description": "The URL protocol schemes.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/Protocol"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/Protocol"
+                            }
+                        }
+                    ]
+                },
+                "electronUpdaterCompatibility": {
+                    "description": "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "detectUpdateChannel": {
+                    "description": "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "generateUpdatesFilesForAllChannels": {
+                    "description": "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "releaseInfo": {
+                    "description": "The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes=\"new features\"\n```",
+                    "$ref": "#/definitions/ReleaseInfo"
+                },
+                "target": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/TargetConfiguration"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/TargetConfiguration"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "cscLink": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "cscKeyPassword": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "defaultArch": {
+                    "type": "string"
+                }
+            }
+        },
+        "Promise<string[]>": {
+            "type": "object",
+            "properties": {
+                "__@toStringTag": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "__@toStringTag"
+            ]
+        },
+        "Lazy<string[]>": {
+            "type": "object",
+            "properties": {
+                "_value": {},
+                "creator": {},
+                "hasValue": {
+                    "type": "boolean"
+                },
+                "value": {
+                    "$ref": "#/definitions/Promise<string[]>"
+                }
+            },
+            "required": [
+                "_value",
+                "creator",
+                "hasValue",
+                "value"
+            ]
+        },
+        "AppInfo": {
+            "type": "object",
+            "properties": {
+                "description": {
+                    "type": "string"
+                },
+                "version": {
+                    "type": "string"
+                },
+                "shortVersion": {
+                    "type": "string"
+                },
+                "shortVersionWindows": {
+                    "type": "string"
+                },
+                "buildNumber": {
+                    "type": "string"
+                },
+                "buildVersion": {
+                    "type": "string"
+                },
+                "productName": {
+                    "type": "string"
+                },
+                "sanitizedProductName": {
+                    "type": "string"
+                },
+                "productFilename": {
+                    "type": "string"
+                },
+                "info": {
+                    "$ref": "#/definitions/Packager"
+                },
+                "platformSpecificOptions": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/PlatformSpecificBuildOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ],
+                    "default": null
+                },
+                "channel": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "notNullDevMetadata": {
+                    "$ref": "#/definitions/Metadata"
+                },
+                "companyName": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "id": {
+                    "type": "string"
+                },
+                "macBundleIdentifier": {
+                    "type": "string"
+                },
+                "name": {
+                    "type": "string"
+                },
+                "linuxPackageName": {
+                    "type": "string"
+                },
+                "sanitizedName": {
+                    "type": "string"
+                },
+                "updaterCacheDirName": {
+                    "type": "string"
+                },
+                "copyright": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "buildVersion",
+                "channel",
+                "companyName",
+                "copyright",
+                "description",
+                "id",
+                "info",
+                "linuxPackageName",
+                "macBundleIdentifier",
+                "name",
+                "notNullDevMetadata",
+                "platformSpecificOptions",
+                "productFilename",
+                "productName",
+                "sanitizedName",
+                "sanitizedProductName",
+                "updaterCacheDirName",
+                "version"
+            ]
+        },
+        "Packager": {
+            "type": "object",
+            "properties": {
+                "projectDir": {
+                    "type": "string"
+                },
+                "_appDir": {
+                    "type": "string"
+                },
+                "appDir": {
+                    "type": "string"
+                },
+                "_metadata": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/Metadata"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ],
+                    "default": null
+                },
+                "metadata": {
+                    "$ref": "#/definitions/Metadata"
+                },
+                "_nodeModulesHandledExternally": {
+                    "type": "boolean",
+                    "default": false
+                },
+                "areNodeModulesHandledExternally": {
+                    "type": "boolean"
+                },
+                "_isPrepackedAppAsar": {
+                    "type": "boolean",
+                    "default": false
+                },
+                "isPrepackedAppAsar": {
+                    "type": "boolean"
+                },
+                "_devMetadata": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/Metadata"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ],
+                    "default": null
+                },
+                "devMetadata": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/Metadata"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "_configuration": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/Configuration"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ],
+                    "default": null
+                },
+                "config": {
+                    "$ref": "#/definitions/Configuration"
+                },
+                "isTwoPackageJsonProjectLayoutUsed": {
+                    "type": "boolean",
+                    "default": false
+                },
+                "eventEmitter": {
+                    "$ref": "#/definitions/EventEmitter"
+                },
+                "_appInfo": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/AppInfo"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ],
+                    "default": null
+                },
+                "appInfo": {
+                    "$ref": "#/definitions/AppInfo"
+                },
+                "tempDirManager": {
+                    "$ref": "#/definitions/TmpDir"
+                },
+                "_repositoryInfo": {
+                    "$ref": "#/definitions/Lazy<SourceRepositoryInfo|null>"
+                },
+                "afterPackHandlers": {
+                    "type": "array",
+                    "items": {
+                        "type": "object"
+                    },
+                    "default": []
+                },
+                "options": {
+                    "$ref": "#/definitions/PackagerOptions"
+                },
+                "debugLogger": {
+                    "$ref": "#/definitions/DebugLogger"
+                },
+                "repositoryInfo": {
+                    "$ref": "#/definitions/Promise<SourceRepositoryInfo|null>"
+                },
+                "nodeDependencyInfo": {
+                    "$ref": "#/definitions/Map<string,Lazy<any[]>>"
+                },
+                "stageDirPathCustomizer": {
+                    "type": "object"
+                },
+                "_buildResourcesDir": {
+                    "type": [
+                        "null",
+                        "string"
+                    ],
+                    "default": null
+                },
+                "buildResourcesDir": {
+                    "type": "string"
+                },
+                "relativeBuildResourcesDirname": {
+                    "type": "string"
+                },
+                "_framework": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/Framework"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ],
+                    "default": null
+                },
+                "framework": {
+                    "$ref": "#/definitions/Framework"
+                },
+                "toDispose": {
+                    "type": "array",
+                    "items": {
+                        "type": "object"
+                    },
+                    "default": []
+                },
+                "cancellationToken": {
+                    "$ref": "#/definitions/CancellationToken"
+                }
+            },
+            "required": [
+                "_appDir",
+                "_appInfo",
+                "_buildResourcesDir",
+                "_configuration",
+                "_devMetadata",
+                "_framework",
+                "_isPrepackedAppAsar",
+                "_metadata",
+                "_nodeModulesHandledExternally",
+                "_repositoryInfo",
+                "afterPackHandlers",
+                "appDir",
+                "appInfo",
+                "areNodeModulesHandledExternally",
+                "buildResourcesDir",
+                "cancellationToken",
+                "config",
+                "debugLogger",
+                "devMetadata",
+                "eventEmitter",
+                "framework",
+                "isPrepackedAppAsar",
+                "isTwoPackageJsonProjectLayoutUsed",
+                "metadata",
+                "nodeDependencyInfo",
+                "options",
+                "projectDir",
+                "relativeBuildResourcesDirname",
+                "repositoryInfo",
+                "stageDirPathCustomizer",
+                "tempDirManager",
+                "toDispose"
+            ]
+        },
+        "Metadata": {
+            "type": "object",
+            "properties": {
+                "name": {
+                    "description": "The application name.",
+                    "type": "string"
+                },
+                "description": {
+                    "description": "The application description.",
+                    "type": "string"
+                },
+                "homepage": {
+                    "description": "The url to the project [homepage](https://docs.npmjs.com/files/package.json#homepage) (NuGet Package `projectUrl` (optional) or Linux Package URL (required)).\n\nIf not specified and your project repository is public on GitHub, it will be `https://github.com/${user}/${project}` by default.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "license": {
+                    "description": "*linux-only.* The [license](https://docs.npmjs.com/files/package.json#license) name.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "author": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/AuthorMetadata"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "repository": {
+                    "description": "The [repository](https://docs.npmjs.com/files/package.json#repository).",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/RepositoryInfo"
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "build": {
+                    "description": "The electron-builder configuration.",
+                    "$ref": "#/definitions/Configuration"
+                },
+                "dependencies": {
+                    "type": "object",
+                    "additionalProperties": {
+                        "type": "string"
+                    }
+                },
+                "version": {
+                    "type": "string"
+                },
+                "shortVersion": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "shortVersionWindows": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "productName": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "main": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                }
+            }
+        },
+        "AuthorMetadata": {
+            "type": "object",
+            "properties": {
+                "name": {
+                    "type": "string"
+                },
+                "email": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "name"
+            ]
+        },
+        "RepositoryInfo": {
+            "type": "object",
+            "properties": {
+                "url": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "url"
+            ]
+        },
+        "EventEmitter": {
+            "description": "The `EventEmitter` class is defined and exposed by the `events` module:\n\n```js\nconst EventEmitter = require('events');\n```\n\nAll `EventEmitter`s emit the event `'newListener'` when new listeners are\nadded and `'removeListener'` when existing listeners are removed.\n\nIt supports the following option:",
+            "type": "object"
+        },
+        "TmpDir": {
+            "type": "object",
+            "properties": {
+                "debugName": {},
+                "tempFiles": {},
+                "registered": {},
+                "rootTempDir": {
+                    "$ref": "#/definitions/Promise<string>"
+                }
+            },
+            "required": [
+                "debugName",
+                "registered",
+                "rootTempDir",
+                "tempFiles"
+            ]
+        },
+        "Promise<string>": {
+            "type": "object",
+            "properties": {
+                "__@toStringTag": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "__@toStringTag"
+            ]
+        },
+        "Lazy<SourceRepositoryInfo|null>": {
+            "type": "object",
+            "properties": {
+                "_value": {},
+                "creator": {},
+                "hasValue": {
+                    "type": "boolean"
+                },
+                "value": {
+                    "$ref": "#/definitions/Promise<SourceRepositoryInfo|null>"
+                }
+            },
+            "required": [
+                "_value",
+                "creator",
+                "hasValue",
+                "value"
+            ]
+        },
+        "Promise<SourceRepositoryInfo|null>": {
+            "type": "object",
+            "properties": {
+                "__@toStringTag": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "__@toStringTag"
+            ]
+        },
+        "DebugLogger": {
+            "type": "object",
+            "properties": {
+                "isEnabled": {
+                    "type": "boolean"
+                },
+                "data": {}
+            },
+            "required": [
+                "data",
+                "isEnabled"
+            ]
+        },
+        "Map<string,Lazy<any[]>>": {
+            "type": "object",
+            "properties": {
+                "size": {
+                    "type": "number"
+                },
+                "__@toStringTag": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "__@toStringTag",
+                "size"
+            ]
+        },
+        "Framework": {
+            "type": "object",
+            "properties": {
+                "name": {
+                    "type": "string"
+                },
+                "version": {
+                    "type": "string"
+                },
+                "distMacOsAppName": {
+                    "type": "string"
+                },
+                "macOsDefaultTargets": {
+                    "type": "array",
+                    "items": {
+                        "type": "string"
+                    }
+                },
+                "defaultAppIdPrefix": {
+                    "type": "string"
+                },
+                "isNpmRebuildRequired": {
+                    "type": "boolean"
+                },
+                "isCopyElevateHelper": {
+                    "type": "boolean"
+                }
+            },
+            "required": [
+                "defaultAppIdPrefix",
+                "distMacOsAppName",
+                "isCopyElevateHelper",
+                "isNpmRebuildRequired",
+                "macOsDefaultTargets",
+                "name",
+                "version"
+            ]
+        },
+        "CancellationToken": {
+            "type": "object",
+            "properties": {
+                "parentCancelHandler": {},
+                "_cancelled": {},
+                "cancelled": {
+                    "type": "boolean"
+                },
+                "_parent": {},
+                "parent": {
+                    "$ref": "#/definitions/CancellationToken"
+                },
+                "onCancel": {},
+                "removeParentCancelHandler": {}
+            },
+            "required": [
+                "_cancelled",
+                "_parent",
+                "cancelled",
+                "onCancel",
+                "parent",
+                "parentCancelHandler",
+                "removeParentCancelHandler"
+            ]
+        },
+        "PlatformSpecificBuildOptions": {
+            "type": "object",
+            "properties": {
+                "appId": {
+                    "description": "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
+                    "default": "com.electron.${name}",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "executableName": {
+                    "description": "The executable name. Defaults to `productName`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "compression": {
+                    "description": "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
+                    "default": "normal",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "maximum",
+                                "normal",
+                                "store"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "files": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "extraResources": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "extraFiles": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "asar": {
+                    "description": "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work.",
+                    "default": true,
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/AsarOptions"
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "boolean"
+                            ]
+                        }
+                    ]
+                },
+                "asarUnpack": {
+                    "description": "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "icon": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "fileAssociations": {
+                    "description": "The file associations.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileAssociation"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/FileAssociation"
+                            }
+                        }
+                    ]
+                },
+                "protocols": {
+                    "description": "The URL protocol schemes.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/Protocol"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/Protocol"
+                            }
+                        }
+                    ]
+                },
+                "forceCodeSigning": {
+                    "description": "Whether to fail if app will be not code signed.",
+                    "type": "boolean"
+                },
+                "electronUpdaterCompatibility": {
+                    "description": "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "detectUpdateChannel": {
+                    "description": "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "generateUpdatesFilesForAllChannels": {
+                    "description": "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "releaseInfo": {
+                    "description": "The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes=\"new features\"\n```",
+                    "$ref": "#/definitions/ReleaseInfo"
+                },
+                "target": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/TargetConfiguration"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/TargetConfiguration"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "cscLink": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "cscKeyPassword": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "defaultArch": {
+                    "type": "string"
+                }
+            }
+        },
+        "Platform": {
+            "type": "object",
+            "properties": {
+                "name": {
+                    "type": "string"
+                },
+                "buildConfigurationKey": {
+                    "type": "string"
+                },
+                "nodeName": {
+                    "$ref": "#/definitions/global.NodeJS.Platform"
+                }
+            },
+            "required": [
+                "buildConfigurationKey",
+                "name",
+                "nodeName"
+            ]
+        },
+        "global.NodeJS.Platform": {
+            "enum": [
+                "aix",
+                "android",
+                "cygwin",
+                "darwin",
+                "freebsd",
+                "haiku",
+                "linux",
+                "netbsd",
+                "openbsd",
+                "sunos",
+                "win32"
+            ],
+            "type": "string"
+        },
+        "CompressionLevel": {
+            "enum": [
+                "maximum",
+                "normal",
+                "store"
+            ],
+            "type": "string"
+        },
+        "Arch": {
+            "enum": [
+                0,
+                1,
+                2,
+                3,
+                4
+            ],
+            "type": "number"
+        },
+        "Target": {
+            "oneOf": [
+                {
+                    "$ref": "#/definitions/FakeTarget"
+                },
+                {
+                    "$ref": "#/definitions/default"
+                },
+                {
+                    "$ref": "#/definitions/NsisTarget"
+                },
+                {
+                    "$ref": "#/definitions/ArchiveTarget"
+                },
+                {
+                    "$ref": "#/definitions/NoOpTarget"
+                },
+                {
+                    "$ref": "#/definitions/default_1"
+                },
+                {
+                    "$ref": "#/definitions/default_2"
+                },
+                {
+                    "$ref": "#/definitions/default_3"
+                },
+                {
+                    "$ref": "#/definitions/default_4"
+                },
+                {
+                    "$ref": "#/definitions/RemoteTarget"
+                },
+                {
+                    "$ref": "#/definitions/PkgTarget"
+                }
+            ]
+        },
+        "FakeTarget": {
+            "type": "object",
+            "properties": {
+                "outDir": {
+                    "type": "string"
+                },
+                "options": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/TargetSpecificOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "name": {
+                    "type": "string"
+                },
+                "isAsyncSupported": {
+                    "type": "boolean",
+                    "default": true
+                }
+            },
+            "required": [
+                "isAsyncSupported",
+                "name",
+                "outDir"
+            ]
+        },
+        "TargetSpecificOptions": {
+            "type": "object",
+            "properties": {
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "default": {
+            "type": "object",
+            "properties": {
+                "options": {
+                    "$ref": "#/definitions/AppXOptions"
+                },
+                "packager": {
+                    "$ref": "#/definitions/WinPackager"
+                },
+                "outDir": {
+                    "type": "string"
+                },
+                "name": {
+                    "type": "string"
+                },
+                "isAsyncSupported": {
+                    "type": "boolean",
+                    "default": true
+                }
+            },
+            "required": [
+                "isAsyncSupported",
+                "name",
+                "options",
+                "outDir",
+                "packager"
+            ]
+        },
+        "WinPackager": {
+            "type": "object",
+            "properties": {
+                "cscInfo": {
+                    "$ref": "#/definitions/Lazy<FileCodeSigningInfo|CertificateFromStoreInfo|null>"
+                },
+                "_iconPath": {
+                    "$ref": "#/definitions/Lazy<string|null>"
+                },
+                "vm": {
+                    "$ref": "#/definitions/Lazy<VmManager>"
+                },
+                "computedPublisherName": {
+                    "$ref": "#/definitions/Lazy<string[]|null>"
+                },
+                "lazyCertInfo": {
+                    "$ref": "#/definitions/Lazy<CertificateInfo|null>"
+                },
+                "isForceCodeSigningVerification": {
+                    "type": "boolean"
+                },
+                "defaultTarget": {
+                    "type": "array",
+                    "items": {
+                        "type": "string"
+                    }
+                },
+                "packagerOptions": {
+                    "$ref": "#/definitions/PackagerOptions"
+                },
+                "buildResourcesDir": {
+                    "type": "string"
+                },
+                "projectDir": {
+                    "type": "string"
+                },
+                "config": {
+                    "$ref": "#/definitions/Configuration"
+                },
+                "platformSpecificBuildOptions": {
+                    "$ref": "#/definitions/WindowsConfiguration"
+                },
+                "resourceList": {
+                    "$ref": "#/definitions/Promise<string[]>"
+                },
+                "_resourceList": {
+                    "$ref": "#/definitions/Lazy<string[]>"
+                },
+                "appInfo": {
+                    "$ref": "#/definitions/AppInfo"
+                },
+                "info": {
+                    "$ref": "#/definitions/Packager"
+                },
+                "platform": {
+                    "$ref": "#/definitions/Platform"
+                },
+                "compression": {
+                    "$ref": "#/definitions/CompressionLevel"
+                },
+                "debugLogger": {
+                    "$ref": "#/definitions/DebugLogger"
+                },
+                "fileAssociations": {
+                    "type": "array",
+                    "items": {
+                        "$ref": "#/definitions/FileAssociation"
+                    }
+                },
+                "forceCodeSigning": {
+                    "type": "boolean"
+                }
+            },
+            "required": [
+                "_iconPath",
+                "_resourceList",
+                "appInfo",
+                "buildResourcesDir",
+                "compression",
+                "computedPublisherName",
+                "config",
+                "cscInfo",
+                "debugLogger",
+                "defaultTarget",
+                "fileAssociations",
+                "forceCodeSigning",
+                "info",
+                "isForceCodeSigningVerification",
+                "lazyCertInfo",
+                "packagerOptions",
+                "platform",
+                "platformSpecificBuildOptions",
+                "projectDir",
+                "resourceList",
+                "vm"
+            ]
+        },
+        "Lazy<FileCodeSigningInfo|CertificateFromStoreInfo|null>": {
+            "type": "object",
+            "properties": {
+                "_value": {},
+                "creator": {},
+                "hasValue": {
+                    "type": "boolean"
+                },
+                "value": {
+                    "$ref": "#/definitions/Promise<FileCodeSigningInfo|CertificateFromStoreInfo|null>"
+                }
+            },
+            "required": [
+                "_value",
+                "creator",
+                "hasValue",
+                "value"
+            ]
+        },
+        "Promise<FileCodeSigningInfo|CertificateFromStoreInfo|null>": {
+            "type": "object",
+            "properties": {
+                "__@toStringTag": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "__@toStringTag"
+            ]
+        },
+        "Lazy<string|null>": {
+            "type": "object",
+            "properties": {
+                "_value": {},
+                "creator": {},
+                "hasValue": {
+                    "type": "boolean"
+                },
+                "value": {
+                    "$ref": "#/definitions/Promise<string|null>"
+                }
+            },
+            "required": [
+                "_value",
+                "creator",
+                "hasValue",
+                "value"
+            ]
+        },
+        "Promise<string|null>": {
+            "type": "object",
+            "properties": {
+                "__@toStringTag": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "__@toStringTag"
+            ]
+        },
+        "Lazy<VmManager>": {
+            "type": "object",
+            "properties": {
+                "_value": {},
+                "creator": {},
+                "hasValue": {
+                    "type": "boolean"
+                },
+                "value": {
+                    "$ref": "#/definitions/Promise<VmManager>"
+                }
+            },
+            "required": [
+                "_value",
+                "creator",
+                "hasValue",
+                "value"
+            ]
+        },
+        "Promise<VmManager>": {
+            "type": "object",
+            "properties": {
+                "__@toStringTag": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "__@toStringTag"
+            ]
+        },
+        "Lazy<string[]|null>": {
+            "type": "object",
+            "properties": {
+                "_value": {},
+                "creator": {},
+                "hasValue": {
+                    "type": "boolean"
+                },
+                "value": {
+                    "$ref": "#/definitions/Promise<string[]|null>"
+                }
+            },
+            "required": [
+                "_value",
+                "creator",
+                "hasValue",
+                "value"
+            ]
+        },
+        "Promise<string[]|null>": {
+            "type": "object",
+            "properties": {
+                "__@toStringTag": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "__@toStringTag"
+            ]
+        },
+        "Lazy<CertificateInfo|null>": {
+            "type": "object",
+            "properties": {
+                "_value": {},
+                "creator": {},
+                "hasValue": {
+                    "type": "boolean"
+                },
+                "value": {
+                    "$ref": "#/definitions/Promise<CertificateInfo|null>"
+                }
+            },
+            "required": [
+                "_value",
+                "creator",
+                "hasValue",
+                "value"
+            ]
+        },
+        "Promise<CertificateInfo|null>": {
+            "type": "object",
+            "properties": {
+                "__@toStringTag": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "__@toStringTag"
+            ]
+        },
+        "NsisTarget": {
+            "type": "object",
+            "properties": {
+                "options": {
+                    "$ref": "#/definitions/NsisOptions"
+                },
+                "archs": {
+                    "$ref": "#/definitions/Map<Arch,string>"
+                },
+                "packager": {
+                    "$ref": "#/definitions/WinPackager"
+                },
+                "outDir": {
+                    "type": "string"
+                },
+                "packageHelper": {
+                    "$ref": "#/definitions/AppPackageHelper"
+                },
+                "isBuildDifferentialAware": {
+                    "type": "boolean"
+                },
+                "installerFilenamePattern": {
+                    "type": "string"
+                },
+                "isPortable": {
+                    "type": "boolean"
+                },
+                "isUnicodeEnabled": {
+                    "type": "boolean"
+                },
+                "isWebInstaller": {
+                    "type": "boolean"
+                },
+                "name": {
+                    "type": "string"
+                },
+                "isAsyncSupported": {
+                    "type": "boolean",
+                    "default": true
+                }
+            },
+            "required": [
+                "archs",
+                "installerFilenamePattern",
+                "isAsyncSupported",
+                "isBuildDifferentialAware",
+                "isPortable",
+                "isUnicodeEnabled",
+                "isWebInstaller",
+                "name",
+                "options",
+                "outDir",
+                "packageHelper",
+                "packager"
+            ]
+        },
+        "Map<Arch,string>": {
+            "type": "object",
+            "properties": {
+                "size": {
+                    "type": "number"
+                },
+                "__@toStringTag": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "__@toStringTag",
+                "size"
+            ]
+        },
+        "AppPackageHelper": {
+            "type": "object",
+            "properties": {
+                "archToFileInfo": {
+                    "$ref": "#/definitions/Map<Arch,Promise<PackageFileInfo>>"
+                },
+                "infoToIsDelete": {
+                    "$ref": "#/definitions/Map<PackageFileInfo,boolean>"
+                },
+                "refCount": {
+                    "type": "number",
+                    "default": 0
+                },
+                "elevateHelper": {
+                    "$ref": "#/definitions/CopyElevateHelper"
+                }
+            },
+            "required": [
+                "archToFileInfo",
+                "elevateHelper",
+                "infoToIsDelete",
+                "refCount"
+            ]
+        },
+        "Map<Arch,Promise<PackageFileInfo>>": {
+            "type": "object",
+            "properties": {
+                "size": {
+                    "type": "number"
+                },
+                "__@toStringTag": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "__@toStringTag",
+                "size"
+            ]
+        },
+        "Map<PackageFileInfo,boolean>": {
+            "type": "object",
+            "properties": {
+                "size": {
+                    "type": "number"
+                },
+                "__@toStringTag": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "__@toStringTag",
+                "size"
+            ]
+        },
+        "CopyElevateHelper": {
+            "type": "object",
+            "properties": {
+                "copied": {
+                    "$ref": "#/definitions/Map<string,Promise<any>>"
+                }
+            },
+            "required": [
+                "copied"
+            ]
+        },
+        "Map<string,Promise<any>>": {
+            "type": "object",
+            "properties": {
+                "size": {
+                    "type": "number"
+                },
+                "__@toStringTag": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "__@toStringTag",
+                "size"
+            ]
+        },
+        "ArchiveTarget": {
+            "type": "object",
+            "properties": {
+                "options": {
+                    "$ref": "#/definitions/TargetSpecificOptions"
+                },
+                "outDir": {
+                    "type": "string"
+                },
+                "packager": {
+                    "$ref": "#/definitions/PlatformPackager<any>"
+                },
+                "isWriteUpdateInfo": {
+                    "type": "boolean",
+                    "default": false
+                },
+                "name": {
+                    "type": "string"
+                },
+                "isAsyncSupported": {
+                    "type": "boolean",
+                    "default": true
+                }
+            },
+            "required": [
+                "isAsyncSupported",
+                "isWriteUpdateInfo",
+                "name",
+                "options",
+                "outDir",
+                "packager"
+            ]
+        },
+        "NoOpTarget": {
+            "type": "object",
+            "properties": {
+                "options": {
+                    "type": "null",
+                    "default": null
+                },
+                "outDir": {
+                    "type": "string"
+                },
+                "name": {
+                    "type": "string"
+                },
+                "isAsyncSupported": {
+                    "type": "boolean",
+                    "default": true
+                }
+            },
+            "required": [
+                "isAsyncSupported",
+                "name",
+                "options",
+                "outDir"
+            ]
+        },
+        "default_1": {
+            "type": "object",
+            "properties": {
+                "options": {
+                    "$ref": "#/definitions/AppImageOptions"
+                },
+                "desktopEntry": {
+                    "$ref": "#/definitions/Lazy<string>"
+                },
+                "packager": {
+                    "$ref": "#/definitions/LinuxPackager"
+                },
+                "helper": {
+                    "$ref": "#/definitions/LinuxTargetHelper"
+                },
+                "outDir": {
+                    "type": "string"
+                },
+                "name": {
+                    "type": "string"
+                },
+                "isAsyncSupported": {
+                    "type": "boolean",
+                    "default": true
+                }
+            },
+            "required": [
+                "desktopEntry",
+                "helper",
+                "isAsyncSupported",
+                "name",
+                "options",
+                "outDir",
+                "packager"
+            ]
+        },
+        "Lazy<string>": {
+            "type": "object",
+            "properties": {
+                "_value": {},
+                "creator": {},
+                "hasValue": {
+                    "type": "boolean"
+                },
+                "value": {
+                    "$ref": "#/definitions/Promise<string>"
+                }
+            },
+            "required": [
+                "_value",
+                "creator",
+                "hasValue",
+                "value"
+            ]
+        },
+        "LinuxPackager": {
+            "type": "object",
+            "properties": {
+                "executableName": {
+                    "type": "string"
+                },
+                "defaultTarget": {
+                    "type": "array",
+                    "items": {
+                        "type": "string"
+                    }
+                },
+                "packagerOptions": {
+                    "$ref": "#/definitions/PackagerOptions"
+                },
+                "buildResourcesDir": {
+                    "type": "string"
+                },
+                "projectDir": {
+                    "type": "string"
+                },
+                "config": {
+                    "$ref": "#/definitions/Configuration"
+                },
+                "platformSpecificBuildOptions": {
+                    "$ref": "#/definitions/LinuxConfiguration"
+                },
+                "resourceList": {
+                    "$ref": "#/definitions/Promise<string[]>"
+                },
+                "_resourceList": {
+                    "$ref": "#/definitions/Lazy<string[]>"
+                },
+                "appInfo": {
+                    "$ref": "#/definitions/AppInfo"
+                },
+                "info": {
+                    "$ref": "#/definitions/Packager"
+                },
+                "platform": {
+                    "$ref": "#/definitions/Platform"
+                },
+                "compression": {
+                    "$ref": "#/definitions/CompressionLevel"
+                },
+                "debugLogger": {
+                    "$ref": "#/definitions/DebugLogger"
+                },
+                "fileAssociations": {
+                    "type": "array",
+                    "items": {
+                        "$ref": "#/definitions/FileAssociation"
+                    }
+                },
+                "forceCodeSigning": {
+                    "type": "boolean"
+                }
+            },
+            "required": [
+                "_resourceList",
+                "appInfo",
+                "buildResourcesDir",
+                "compression",
+                "config",
+                "debugLogger",
+                "defaultTarget",
+                "executableName",
+                "fileAssociations",
+                "forceCodeSigning",
+                "info",
+                "packagerOptions",
+                "platform",
+                "platformSpecificBuildOptions",
+                "projectDir",
+                "resourceList"
+            ]
+        },
+        "LinuxTargetHelper": {
+            "type": "object",
+            "properties": {
+                "iconPromise": {
+                    "$ref": "#/definitions/Lazy<IconInfo[]>"
+                },
+                "mimeTypeFilesPromise": {
+                    "$ref": "#/definitions/Lazy<string|null>"
+                },
+                "maxIconPath": {
+                    "type": [
+                        "null",
+                        "string"
+                    ],
+                    "default": null
+                },
+                "packager": {
+                    "$ref": "#/definitions/LinuxPackager"
+                },
+                "icons": {
+                    "$ref": "#/definitions/Promise<IconInfo[]>"
+                },
+                "mimeTypeFiles": {
+                    "$ref": "#/definitions/Promise<string|null>"
+                }
+            },
+            "required": [
+                "iconPromise",
+                "icons",
+                "maxIconPath",
+                "mimeTypeFiles",
+                "mimeTypeFilesPromise",
+                "packager"
+            ]
+        },
+        "Lazy<IconInfo[]>": {
+            "type": "object",
+            "properties": {
+                "_value": {},
+                "creator": {},
+                "hasValue": {
+                    "type": "boolean"
+                },
+                "value": {
+                    "$ref": "#/definitions/Promise<IconInfo[]>"
+                }
+            },
+            "required": [
+                "_value",
+                "creator",
+                "hasValue",
+                "value"
+            ]
+        },
+        "Promise<IconInfo[]>": {
+            "type": "object",
+            "properties": {
+                "__@toStringTag": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "__@toStringTag"
+            ]
+        },
+        "default_2": {
+            "type": "object",
+            "properties": {
+                "options": {
+                    "$ref": "#/definitions/FlatpakOptions"
+                },
+                "packager": {
+                    "$ref": "#/definitions/LinuxPackager"
+                },
+                "helper": {
+                    "$ref": "#/definitions/LinuxTargetHelper"
+                },
+                "outDir": {
+                    "type": "string"
+                },
+                "appId": {
+                    "type": "string"
+                },
+                "name": {
+                    "type": "string"
+                },
+                "isAsyncSupported": {
+                    "type": "boolean",
+                    "default": true
+                }
+            },
+            "required": [
+                "appId",
+                "helper",
+                "isAsyncSupported",
+                "name",
+                "options",
+                "outDir",
+                "packager"
+            ]
+        },
+        "default_3": {
+            "type": "object",
+            "properties": {
+                "options": {
+                    "$ref": "#/definitions/LinuxTargetSpecificOptions"
+                },
+                "scriptFiles": {
+                    "$ref": "#/definitions/Promise<string[]>"
+                },
+                "packager": {
+                    "$ref": "#/definitions/LinuxPackager"
+                },
+                "helper": {
+                    "$ref": "#/definitions/LinuxTargetHelper"
+                },
+                "outDir": {
+                    "type": "string"
+                },
+                "name": {
+                    "type": "string"
+                },
+                "isAsyncSupported": {
+                    "type": "boolean",
+                    "default": true
+                }
+            },
+            "required": [
+                "helper",
+                "isAsyncSupported",
+                "name",
+                "options",
+                "outDir",
+                "packager",
+                "scriptFiles"
+            ]
+        },
+        "default_4": {
+            "type": "object",
+            "properties": {
+                "options": {
+                    "$ref": "#/definitions/SnapOptions"
+                },
+                "isUseTemplateApp": {
+                    "type": "boolean",
+                    "default": false
+                },
+                "packager": {
+                    "$ref": "#/definitions/LinuxPackager"
+                },
+                "helper": {
+                    "$ref": "#/definitions/LinuxTargetHelper"
+                },
+                "outDir": {
+                    "type": "string"
+                },
+                "name": {
+                    "type": "string"
+                },
+                "isAsyncSupported": {
+                    "type": "boolean",
+                    "default": true
+                }
+            },
+            "required": [
+                "helper",
+                "isAsyncSupported",
+                "isUseTemplateApp",
+                "name",
+                "options",
+                "outDir",
+                "packager"
+            ]
+        },
+        "RemoteTarget": {
+            "type": "object",
+            "properties": {
+                "buildTaskManager": {
+                    "$ref": "#/definitions/AsyncTaskManager"
+                },
+                "options": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/TargetSpecificOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "outDir": {
+                    "type": "string"
+                },
+                "target": {
+                    "$ref": "#/definitions/Target"
+                },
+                "remoteBuilder": {
+                    "$ref": "#/definitions/RemoteBuilder"
+                },
+                "name": {
+                    "type": "string"
+                },
+                "isAsyncSupported": {
+                    "type": "boolean",
+                    "default": true
+                }
+            },
+            "required": [
+                "buildTaskManager",
+                "isAsyncSupported",
+                "name",
+                "outDir",
+                "remoteBuilder",
+                "target"
+            ]
+        },
+        "AsyncTaskManager": {
+            "type": "object",
+            "properties": {
+                "cancellationToken": {},
+                "tasks": {
+                    "type": "array",
+                    "items": {
+                        "$ref": "#/definitions/Promise<any>"
+                    }
+                },
+                "errors": {}
+            },
+            "required": [
+                "cancellationToken",
+                "errors",
+                "tasks"
+            ]
+        },
+        "Promise<any>": {
+            "type": "object",
+            "properties": {
+                "__@toStringTag": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "__@toStringTag"
+            ]
+        },
+        "RemoteBuilder": {
+            "type": "object",
+            "properties": {
+                "toBuild": {
+                    "$ref": "#/definitions/Map<Arch,TargetInfo[]>"
+                },
+                "buildStarted": {
+                    "type": "boolean",
+                    "default": false
+                },
+                "packager": {
+                    "$ref": "#/definitions/PlatformPackager<any>"
+                }
+            },
+            "required": [
+                "buildStarted",
+                "packager",
+                "toBuild"
+            ]
+        },
+        "Map<Arch,TargetInfo[]>": {
+            "type": "object",
+            "properties": {
+                "size": {
+                    "type": "number"
+                },
+                "__@toStringTag": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "__@toStringTag",
+                "size"
+            ]
+        },
+        "PkgTarget": {
+            "type": "object",
+            "properties": {
+                "options": {
+                    "$ref": "#/definitions/PkgOptions"
+                },
+                "packager": {
+                    "$ref": "#/definitions/default_5"
+                },
+                "outDir": {
+                    "type": "string"
+                },
+                "name": {
+                    "type": "string"
+                },
+                "isAsyncSupported": {
+                    "type": "boolean",
+                    "default": true
+                }
+            },
+            "required": [
+                "isAsyncSupported",
+                "name",
+                "options",
+                "outDir",
+                "packager"
+            ]
+        },
+        "default_5": {
+            "type": "object",
+            "properties": {
+                "codeSigningInfo": {
+                    "$ref": "#/definitions/Lazy<CodeSigningInfo>"
+                },
+                "_iconPath": {
+                    "$ref": "#/definitions/Lazy<string|null>"
+                },
+                "defaultTarget": {
+                    "type": "array",
+                    "items": {
+                        "type": "string"
+                    }
+                },
+                "packagerOptions": {
+                    "$ref": "#/definitions/PackagerOptions"
+                },
+                "buildResourcesDir": {
+                    "type": "string"
+                },
+                "projectDir": {
+                    "type": "string"
+                },
+                "config": {
+                    "$ref": "#/definitions/Configuration"
+                },
+                "platformSpecificBuildOptions": {
+                    "$ref": "#/definitions/MacConfiguration"
+                },
+                "resourceList": {
+                    "$ref": "#/definitions/Promise<string[]>"
+                },
+                "_resourceList": {
+                    "$ref": "#/definitions/Lazy<string[]>"
+                },
+                "appInfo": {
+                    "$ref": "#/definitions/AppInfo"
+                },
+                "info": {
+                    "$ref": "#/definitions/Packager"
+                },
+                "platform": {
+                    "$ref": "#/definitions/Platform"
+                },
+                "compression": {
+                    "$ref": "#/definitions/CompressionLevel"
+                },
+                "debugLogger": {
+                    "$ref": "#/definitions/DebugLogger"
+                },
+                "fileAssociations": {
+                    "type": "array",
+                    "items": {
+                        "$ref": "#/definitions/FileAssociation"
+                    }
+                },
+                "forceCodeSigning": {
+                    "type": "boolean"
+                }
+            },
+            "required": [
+                "_iconPath",
+                "_resourceList",
+                "appInfo",
+                "buildResourcesDir",
+                "codeSigningInfo",
+                "compression",
+                "config",
+                "debugLogger",
+                "defaultTarget",
+                "fileAssociations",
+                "forceCodeSigning",
+                "info",
+                "packagerOptions",
+                "platform",
+                "platformSpecificBuildOptions",
+                "projectDir",
+                "resourceList"
+            ]
+        },
+        "Lazy<CodeSigningInfo>": {
+            "type": "object",
+            "properties": {
+                "_value": {},
+                "creator": {},
+                "hasValue": {
+                    "type": "boolean"
+                },
+                "value": {
+                    "$ref": "#/definitions/Promise<CodeSigningInfo>"
+                }
+            },
+            "required": [
+                "_value",
+                "creator",
+                "hasValue",
+                "value"
+            ]
+        },
+        "Promise<CodeSigningInfo>": {
+            "type": "object",
+            "properties": {
+                "__@toStringTag": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "__@toStringTag"
+            ]
+        }
+    },
+    "$schema": "http://json-schema.org/draft-07/schema#"
+}
diff --git a/node_modules/app-builder-lib/out/schema/configuration.jsc.js b/node_modules/app-builder-lib/out/schema/configuration.jsc.js
new file mode 100644
index 0000000..fe1604f
--- /dev/null
+++ b/node_modules/app-builder-lib/out/schema/configuration.jsc.js
@@ -0,0 +1,5517 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.default = {
+    description: "Configuration Options",
+    type: "object",
+    properties: {
+        appId: {
+            description: "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
+            default: "com.electron.${name}",
+            type: ["null", "string"],
+        },
+        productName: {
+            description: "As [name](#Metadata-name), but allows you to specify a product name for your executable which contains spaces and other special characters not allowed in the [name property](https://docs.npmjs.com/files/package.json#name).",
+            type: ["null", "string"],
+        },
+        copyright: {
+            description: "The human-readable copyright line for the app.",
+            default: "Copyright © year ${author}",
+            type: ["null", "string"],
+        },
+        directories: {
+            anyOf: [
+                {
+                    $ref: "#/definitions/MetadataDirectories",
+                },
+                {
+                    type: "null",
+                },
+            ],
+        },
+        mac: {
+            description: "Options related to how build macOS targets.",
+            anyOf: [
+                {
+                    $ref: "#/definitions/MacConfiguration",
+                },
+                {
+                    type: "null",
+                },
+            ],
+        },
+        mas: {
+            description: "MAS (Mac Application Store) options.",
+            anyOf: [
+                {
+                    $ref: "#/definitions/MasConfiguration",
+                },
+                {
+                    type: "null",
+                },
+            ],
+        },
+        masDev: {
+            description: "MAS (Mac Application Store) development options (`mas-dev` target).",
+            anyOf: [
+                {
+                    $ref: "#/definitions/MasConfiguration",
+                },
+                {
+                    type: "null",
+                },
+            ],
+        },
+        dmg: {
+            description: "macOS DMG options.",
+            anyOf: [
+                {
+                    $ref: "#/definitions/DmgOptions",
+                },
+                {
+                    type: "null",
+                },
+            ],
+        },
+        pkg: {
+            description: "macOS PKG options.",
+            anyOf: [
+                {
+                    $ref: "#/definitions/PkgOptions",
+                },
+                {
+                    type: "null",
+                },
+            ],
+        },
+        win: {
+            description: "Options related to how build Windows targets.",
+            anyOf: [
+                {
+                    $ref: "#/definitions/WindowsConfiguration",
+                },
+                {
+                    type: "null",
+                },
+            ],
+        },
+        nsis: {
+            anyOf: [
+                {
+                    $ref: "#/definitions/NsisOptions",
+                },
+                {
+                    type: "null",
+                },
+            ],
+        },
+        nsisWeb: {
+            anyOf: [
+                {
+                    $ref: "#/definitions/NsisWebOptions",
+                },
+                {
+                    type: "null",
+                },
+            ],
+        },
+        portable: {
+            anyOf: [
+                {
+                    $ref: "#/definitions/PortableOptions",
+                },
+                {
+                    type: "null",
+                },
+            ],
+        },
+        appx: {
+            anyOf: [
+                {
+                    $ref: "#/definitions/AppXOptions",
+                },
+                {
+                    type: "null",
+                },
+            ],
+        },
+        msi: {
+            anyOf: [
+                {
+                    $ref: "#/definitions/MsiOptions",
+                },
+                {
+                    type: "null",
+                },
+            ],
+        },
+        squirrelWindows: {
+            anyOf: [
+                {
+                    $ref: "#/definitions/SquirrelWindowsOptions",
+                },
+                {
+                    type: "null",
+                },
+            ],
+        },
+        linux: {
+            description: "Options related to how build Linux targets.",
+            anyOf: [
+                {
+                    $ref: "#/definitions/LinuxConfiguration",
+                },
+                {
+                    type: "null",
+                },
+            ],
+        },
+        deb: {
+            description: "Debian package options.",
+            anyOf: [
+                {
+                    $ref: "#/definitions/DebOptions",
+                },
+                {
+                    type: "null",
+                },
+            ],
+        },
+        snap: {
+            description: "Snap options.",
+            anyOf: [
+                {
+                    $ref: "#/definitions/SnapOptions",
+                },
+                {
+                    type: "null",
+                },
+            ],
+        },
+        appImage: {
+            description: "AppImage options.",
+            anyOf: [
+                {
+                    $ref: "#/definitions/AppImageOptions",
+                },
+                {
+                    type: "null",
+                },
+            ],
+        },
+        flatpak: {
+            description: "Flatpak options.",
+            anyOf: [
+                {
+                    $ref: "#/definitions/FlatpakOptions",
+                },
+                {
+                    type: "null",
+                },
+            ],
+        },
+        pacman: {
+            anyOf: [
+                {
+                    $ref: "#/definitions/LinuxTargetSpecificOptions",
+                },
+                {
+                    type: "null",
+                },
+            ],
+        },
+        rpm: {
+            anyOf: [
+                {
+                    $ref: "#/definitions/LinuxTargetSpecificOptions",
+                },
+                {
+                    type: "null",
+                },
+            ],
+        },
+        freebsd: {
+            anyOf: [
+                {
+                    $ref: "#/definitions/LinuxTargetSpecificOptions",
+                },
+                {
+                    type: "null",
+                },
+            ],
+        },
+        p5p: {
+            anyOf: [
+                {
+                    $ref: "#/definitions/LinuxTargetSpecificOptions",
+                },
+                {
+                    type: "null",
+                },
+            ],
+        },
+        apk: {
+            anyOf: [
+                {
+                    $ref: "#/definitions/LinuxTargetSpecificOptions",
+                },
+                {
+                    type: "null",
+                },
+            ],
+        },
+        includeSubNodeModules: {
+            description: "Whether to include *all* of the submodules node_modules directories",
+            default: false,
+            type: "boolean",
+        },
+        buildDependenciesFromSource: {
+            description: "Whether to build the application native dependencies from source.",
+            default: false,
+            type: "boolean",
+        },
+        nodeGypRebuild: {
+            description: "Whether to execute `node-gyp rebuild` before starting to package the app.\n\nDon't [use](https://github.com/electron-userland/electron-builder/issues/683#issuecomment-241214075) [npm](http://electron.atom.io/docs/tutorial/using-native-node-modules/#using-npm) (neither `.npmrc`) for configuring electron headers. Use `electron-builder node-gyp-rebuild` instead.",
+            default: false,
+            type: "boolean",
+        },
+        npmArgs: {
+            description: "Additional command line arguments to use when installing app native deps.",
+            anyOf: [
+                {
+                    type: "array",
+                    items: {
+                        type: "string",
+                    },
+                },
+                {
+                    type: ["null", "string"],
+                },
+            ],
+        },
+        npmRebuild: {
+            description: "Whether to [rebuild](https://docs.npmjs.com/cli/rebuild) native dependencies before starting to package the app.",
+            default: true,
+            type: "boolean",
+        },
+        buildVersion: {
+            description: "The build version. Maps to the `CFBundleVersion` on macOS, and `FileVersion` metadata property on Windows. Defaults to the `version`.\nIf `TRAVIS_BUILD_NUMBER` or `APPVEYOR_BUILD_NUMBER` or `CIRCLE_BUILD_NUM` or `BUILD_NUMBER` or `bamboo.buildNumber` or `CI_PIPELINE_IID` env defined, it will be used as a build version (`version.build_number`).",
+            type: ["null", "string"],
+        },
+        electronCompile: {
+            description: "Whether to use [electron-compile](http://github.com/electron/electron-compile) to compile app. Defaults to `true` if `electron-compile` in the dependencies. And `false` if in the `devDependencies` or doesn't specified.",
+            type: "boolean",
+        },
+        electronDist: {
+            description: "Returns the path to custom Electron build (e.g. `~/electron/out/R`). Zip files must follow the pattern `electron-v${version}-${platformName}-${arch}.zip`, otherwise it will be assumed to be an unpacked Electron app directory",
+            type: ["string", "object"],
+        },
+        electronDownload: {
+            description: "The [electron-download](https://github.com/electron-userland/electron-download#usage) options.",
+            $ref: "#/definitions/ElectronDownloadOptions",
+        },
+        electronBranding: {
+            description: "The branding used by Electron's distributables. This is needed if a fork has modified Electron's BRANDING.json file.",
+            $ref: "#/definitions/ElectronBrandingOptions",
+        },
+        electronVersion: {
+            description: "The version of electron you are packaging for. Defaults to version of `electron`, `electron-prebuilt` or `electron-prebuilt-compile` dependency.",
+            type: ["null", "string"],
+        },
+        extends: {
+            description: "The name of a built-in configuration preset (currently, only `react-cra` is supported) or any number of paths to config files (relative to project dir).\n\nThe latter allows to mixin a config from multiple other configs, as if you `Object.assign` them, but properly combine `files` glob patterns.\n\nIf `react-scripts` in the app dependencies, `react-cra` will be set automatically. Set to `null` to disable automatic detection.",
+            anyOf: [
+                {
+                    type: "array",
+                    items: {
+                        type: "string",
+                    },
+                },
+                {
+                    type: ["null", "string"],
+                },
+            ],
+        },
+        extraMetadata: {
+            description: "Inject properties to `package.json`.",
+        },
+        forceCodeSigning: {
+            description: "Whether to fail if the application is not signed (to prevent unsigned app if code signing configuration is not correct).",
+            default: false,
+            type: "boolean",
+        },
+        nodeVersion: {
+            description: "*libui-based frameworks only* The version of NodeJS you are packaging for.\nYou can set it to `current` to set the Node.js version that you use to run.",
+            type: ["null", "string"],
+        },
+        launchUiVersion: {
+            description: "*libui-based frameworks only* The version of LaunchUI you are packaging for. Applicable for Windows only. Defaults to version suitable for used framework version.",
+            type: ["null", "string", "boolean"],
+        },
+        framework: {
+            description: "The framework name. One of `electron`, `proton`, `libui`. Defaults to `electron`.",
+            type: ["null", "string"],
+        },
+        afterPack: {
+            description: "The function (or path to file or module id) to be [run after pack](#afterpack) (but before pack into distributable format and sign).",
+            type: ["null", "string", "object"],
+        },
+        afterSign: {
+            description: "The function (or path to file or module id) to be [run after pack and sign](#aftersign) (but before pack into distributable format).",
+            type: ["null", "string", "object"],
+        },
+        artifactBuildStarted: {
+            description: "The function (or path to file or module id) to be run on artifact build start.",
+            type: ["null", "string", "object"],
+        },
+        artifactBuildCompleted: {
+            description: "The function (or path to file or module id) to be run on artifact build completed.",
+            type: ["null", "string", "object"],
+        },
+        afterAllArtifactBuild: {
+            description: "The function (or path to file or module id) to be [run after all artifacts are build](#afterAllArtifactBuild).",
+            type: ["null", "string", "object"],
+        },
+        msiProjectCreated: {
+            description: "MSI project created on disk - not packed into .msi package yet.",
+            type: ["null", "string", "object"],
+        },
+        appxManifestCreated: {
+            description: "Appx manifest created on disk - not packed into .appx package yet.",
+            type: ["null", "string", "object"],
+        },
+        onNodeModuleFile: {
+            description: "The function (or path to file or module id) to be [run on each node module](#onnodemodulefile) file.",
+            type: ["null", "string", "object"],
+        },
+        beforeBuild: {
+            description: "The function (or path to file or module id) to be run before dependencies are installed or rebuilt. Works when `npmRebuild` is set to `true`. Resolving to `false` will skip dependencies install or rebuild.\n\nIf provided and `node_modules` are missing, it will not invoke production dependencies check.",
+            type: ["null", "string", "object"],
+        },
+        remoteBuild: {
+            description: "Whether to build using Electron Build Service if target not supported on current OS.",
+            default: true,
+            type: "boolean",
+        },
+        includePdb: {
+            description: "Whether to include PDB files.",
+            default: false,
+            type: "boolean",
+        },
+        removePackageScripts: {
+            description: "Whether to remove `scripts` field from `package.json` files.",
+            default: true,
+            type: "boolean",
+        },
+        removePackageKeywords: {
+            description: "Whether to remove `keywords` field from `package.json` files.",
+            default: true,
+            type: "boolean",
+        },
+        artifactName: {
+            description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
+            type: ["null", "string"],
+        },
+        executableName: {
+            description: "The executable name. Defaults to `productName`.",
+            type: ["null", "string"],
+        },
+        compression: {
+            description: "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
+            default: "normal",
+            anyOf: [
+                {
+                    enum: ["maximum", "normal", "store"],
+                    type: "string",
+                },
+                {
+                    type: "null",
+                },
+            ],
+        },
+        files: {
+            anyOf: [
+                {
+                    $ref: "#/definitions/FileSet",
+                },
+                {
+                    type: "array",
+                    items: {
+                        anyOf: [
+                            {
+                                $ref: "#/definitions/FileSet",
+                            },
+                            {
+                                type: "string",
+                            },
+                        ],
+                    },
+                },
+                {
+                    type: ["null", "string"],
+                },
+            ],
+        },
+        extraResources: {
+            anyOf: [
+                {
+                    $ref: "#/definitions/FileSet",
+                },
+                {
+                    type: "array",
+                    items: {
+                        anyOf: [
+                            {
+                                $ref: "#/definitions/FileSet",
+                            },
+                            {
+                                type: "string",
+                            },
+                        ],
+                    },
+                },
+                {
+                    type: ["null", "string"],
+                },
+            ],
+        },
+        extraFiles: {
+            anyOf: [
+                {
+                    $ref: "#/definitions/FileSet",
+                },
+                {
+                    type: "array",
+                    items: {
+                        anyOf: [
+                            {
+                                $ref: "#/definitions/FileSet",
+                            },
+                            {
+                                type: "string",
+                            },
+                        ],
+                    },
+                },
+                {
+                    type: ["null", "string"],
+                },
+            ],
+        },
+        asar: {
+            description: "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work.",
+            default: true,
+            anyOf: [
+                {
+                    $ref: "#/definitions/AsarOptions",
+                },
+                {
+                    type: ["null", "boolean"],
+                },
+            ],
+        },
+        asarUnpack: {
+            description: "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.",
+            anyOf: [
+                {
+                    type: "array",
+                    items: {
+                        type: "string",
+                    },
+                },
+                {
+                    type: ["null", "string"],
+                },
+            ],
+        },
+        icon: {
+            type: ["null", "string"],
+        },
+        fileAssociations: {
+            description: "The file associations.",
+            anyOf: [
+                {
+                    $ref: "#/definitions/FileAssociation",
+                },
+                {
+                    type: "array",
+                    items: {
+                        $ref: "#/definitions/FileAssociation",
+                    },
+                },
+            ],
+        },
+        protocols: {
+            description: "The URL protocol schemes.",
+            anyOf: [
+                {
+                    $ref: "#/definitions/Protocol",
+                },
+                {
+                    type: "array",
+                    items: {
+                        $ref: "#/definitions/Protocol",
+                    },
+                },
+            ],
+        },
+        electronUpdaterCompatibility: {
+            description: "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
+            type: ["null", "string"],
+        },
+        publish: {
+            anyOf: [
+                {
+                    $ref: "#/definitions/GithubOptions",
+                },
+                {
+                    $ref: "#/definitions/S3Options",
+                },
+                {
+                    $ref: "#/definitions/SpacesOptions",
+                },
+                {
+                    $ref: "#/definitions/GenericServerOptions",
+                },
+                {
+                    $ref: "#/definitions/BintrayOptions",
+                },
+                {
+                    $ref: "#/definitions/CustomPublishOptions",
+                },
+                {
+                    $ref: "#/definitions/KeygenOptions",
+                },
+                {
+                    $ref: "#/definitions/SnapStoreOptions",
+                },
+                {
+                    type: "array",
+                    items: {
+                        anyOf: [
+                            {
+                                $ref: "#/definitions/GithubOptions",
+                            },
+                            {
+                                $ref: "#/definitions/S3Options",
+                            },
+                            {
+                                $ref: "#/definitions/SpacesOptions",
+                            },
+                            {
+                                $ref: "#/definitions/GenericServerOptions",
+                            },
+                            {
+                                $ref: "#/definitions/BintrayOptions",
+                            },
+                            {
+                                $ref: "#/definitions/CustomPublishOptions",
+                            },
+                            {
+                                $ref: "#/definitions/KeygenOptions",
+                            },
+                            {
+                                $ref: "#/definitions/SnapStoreOptions",
+                            },
+                            {
+                                type: "string",
+                            },
+                        ],
+                    },
+                },
+                {
+                    type: ["null", "string"],
+                },
+            ],
+        },
+        detectUpdateChannel: {
+            description: "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
+            default: true,
+            type: "boolean",
+        },
+        generateUpdatesFilesForAllChannels: {
+            description: "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
+            default: false,
+            type: "boolean",
+        },
+        releaseInfo: {
+            description: 'The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes="new features"\n```',
+            $ref: "#/definitions/ReleaseInfo",
+        },
+        target: {
+            anyOf: [
+                {
+                    $ref: "#/definitions/TargetConfiguration",
+                },
+                {
+                    type: "array",
+                    items: {
+                        anyOf: [
+                            {
+                                $ref: "#/definitions/TargetConfiguration",
+                            },
+                            {
+                                type: "string",
+                            },
+                        ],
+                    },
+                },
+                {
+                    type: ["null", "string"],
+                },
+            ],
+        },
+        cscLink: {
+            type: ["null", "string"],
+        },
+        cscKeyPassword: {
+            type: ["null", "string"],
+        },
+        defaultArch: {
+            type: "string",
+        },
+    },
+    definitions: {
+        MetadataDirectories: {
+            type: "object",
+            properties: {
+                buildResources: {
+                    description: 'The path to build resources.\n\nPlease note — build resources are not packed into the app. If you need to use some files, e.g. as tray icon, please include required files explicitly: `"files": ["**\\/*", "build/icon.*"]`',
+                    default: "build",
+                    type: ["null", "string"],
+                },
+                output: {
+                    description: "The output directory. [File macros](/file-patterns#file-macros) are supported.",
+                    default: "dist",
+                    type: ["null", "string"],
+                },
+                app: {
+                    description: "The application directory (containing the application package.json), defaults to `app`, `www` or working directory.",
+                    type: ["null", "string"],
+                },
+            },
+        },
+        MacConfiguration: {
+            type: "object",
+            properties: {
+                category: {
+                    description: 'The application category type, as shown in the Finder via *View -> Arrange by Application Category* when viewing the Applications directory.\n\nFor example, `"category": "public.app-category.developer-tools"` will set the application category to *Developer Tools*.\n\nValid values are listed in [Apple\'s documentation](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/LaunchServicesKeys.html#//apple_ref/doc/uid/TP40009250-SW8).',
+                    type: ["null", "string"],
+                },
+                target: {
+                    description: "The target package type: list of `default`, `dmg`, `mas`, `mas-dev`, `pkg`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir`. Defaults to `default` (dmg and zip for Squirrel.Mac).",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/TargetConfiguration",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/TargetConfiguration",
+                                    },
+                                    {
+                                        enum: ["7z", "default", "dir", "dmg", "mas", "mas-dev", "pkg", "tar.bz2", "tar.gz", "tar.lz", "tar.xz", "zip"],
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            enum: ["7z", "default", "dir", "dmg", "mas", "mas-dev", "pkg", "tar.bz2", "tar.gz", "tar.lz", "tar.xz", "zip"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                identity: {
+                    description: "The name of certificate to use when signing. Consider using environment variables [CSC_LINK or CSC_NAME](/code-signing) instead of specifying this option.\nMAS installer identity is specified in the [mas](/configuration/mas).",
+                    type: ["null", "string"],
+                },
+                icon: {
+                    description: "The path to application icon.",
+                    default: "build/icon.icns",
+                    type: ["null", "string"],
+                },
+                entitlements: {
+                    description: "The path to entitlements file for signing the app. `build/entitlements.mac.plist` will be used if exists (it is a recommended way to set).\nMAS entitlements is specified in the [mas](/configuration/mas).",
+                    type: ["null", "string"],
+                },
+                entitlementsInherit: {
+                    description: "The path to child entitlements which inherit the security settings for signing frameworks and bundles of a distribution. `build/entitlements.mac.inherit.plist` will be used if exists (it is a recommended way to set).\nOtherwise [default](https://github.com/electron-userland/electron-osx-sign/blob/master/default.entitlements.darwin.inherit.plist).\n\nThis option only applies when signing with `entitlements` provided.",
+                    type: ["null", "string"],
+                },
+                entitlementsLoginHelper: {
+                    description: "Path to login helper entitlement file.\nWhen using App Sandbox, the the `com.apple.security.inherit` key that is normally in the inherited entitlements cannot be inherited since the login helper is a standalone executable.\nDefaults to the value provided for `entitlements`. This option only applies when signing with `entitlements` provided.",
+                    type: ["null", "string"],
+                },
+                provisioningProfile: {
+                    description: "The path to the provisioning profile to use when signing, absolute or relative to the app root.",
+                    type: ["null", "string"],
+                },
+                bundleVersion: {
+                    description: "The `CFBundleVersion`. Do not use it unless [you need to](https://github.com/electron-userland/electron-builder/issues/565#issuecomment-230678643).",
+                    type: ["null", "string"],
+                },
+                bundleShortVersion: {
+                    description: "The `CFBundleShortVersionString`. Do not use it unless you need to.",
+                    type: ["null", "string"],
+                },
+                darkModeSupport: {
+                    description: "Whether a dark mode is supported. If your app does have a dark mode, you can make your app follow the system-wide dark mode setting.",
+                    default: false,
+                    type: "boolean",
+                },
+                helperBundleId: {
+                    description: "The bundle identifier to use in the application helper's plist.",
+                    default: "${appBundleIdentifier}.helper",
+                    type: ["null", "string"],
+                },
+                helperRendererBundleId: {
+                    description: "The bundle identifier to use in the Renderer helper's plist.",
+                    default: "${appBundleIdentifier}.helper.Renderer",
+                    type: ["null", "string"],
+                },
+                helperPluginBundleId: {
+                    description: "The bundle identifier to use in the Plugin helper's plist.",
+                    default: "${appBundleIdentifier}.helper.Plugin",
+                    type: ["null", "string"],
+                },
+                helperGPUBundleId: {
+                    description: "The bundle identifier to use in the GPU helper's plist.",
+                    default: "${appBundleIdentifier}.helper.GPU",
+                    type: ["null", "string"],
+                },
+                helperEHBundleId: {
+                    description: "The bundle identifier to use in the EH helper's plist.",
+                    default: "${appBundleIdentifier}.helper.EH",
+                    type: ["null", "string"],
+                },
+                helperNPBundleId: {
+                    description: "The bundle identifier to use in the NP helper's plist.",
+                    default: "${appBundleIdentifier}.helper.NP",
+                    type: ["null", "string"],
+                },
+                type: {
+                    description: "Whether to sign app for development or for distribution.",
+                    default: "distribution",
+                    anyOf: [
+                        {
+                            enum: ["development", "distribution"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                extendInfo: {
+                    description: "The extra entries for `Info.plist`.",
+                },
+                binaries: {
+                    description: "Paths of any extra binaries that need to be signed.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                minimumSystemVersion: {
+                    description: "The minimum version of macOS required for the app to run. Corresponds to `LSMinimumSystemVersion`.",
+                    type: ["null", "string"],
+                },
+                requirements: {
+                    description: "Path of [requirements file](https://developer.apple.com/library/mac/documentation/Security/Conceptual/CodeSigningGuide/RequirementLang/RequirementLang.html) used in signing. Not applicable for MAS.",
+                    type: ["null", "string"],
+                },
+                electronLanguages: {
+                    description: "The electron locales. By default Electron locales used as is.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "string",
+                        },
+                    ],
+                },
+                cscInstallerLink: {
+                    type: ["null", "string"],
+                },
+                cscInstallerKeyPassword: {
+                    type: ["null", "string"],
+                },
+                extraDistFiles: {
+                    description: "Extra files to put in archive. Not applicable for `tar.*`.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                hardenedRuntime: {
+                    description: "Whether your app has to be signed with hardened runtime.",
+                    default: true,
+                    type: "boolean",
+                },
+                gatekeeperAssess: {
+                    description: "Whether to let electron-osx-sign validate the signing or not.",
+                    default: false,
+                    type: "boolean",
+                },
+                strictVerify: {
+                    description: "Whether to let electron-osx-sign verify the contents or not.",
+                    default: true,
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["string", "boolean"],
+                        },
+                    ],
+                },
+                signIgnore: {
+                    description: "Regex or an array of regex's that signal skipping signing a file.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                timestamp: {
+                    description: "Specify the URL of the timestamp authority server",
+                    type: ["null", "string"],
+                },
+                appId: {
+                    description: "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
+                    default: "com.electron.${name}",
+                    type: ["null", "string"],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
+                    type: ["null", "string"],
+                },
+                executableName: {
+                    description: "The executable name. Defaults to `productName`.",
+                    type: ["null", "string"],
+                },
+                compression: {
+                    description: "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
+                    default: "normal",
+                    anyOf: [
+                        {
+                            enum: ["maximum", "normal", "store"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                files: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                extraResources: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                extraFiles: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                asar: {
+                    description: "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work.",
+                    default: true,
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/AsarOptions",
+                        },
+                        {
+                            type: ["null", "boolean"],
+                        },
+                    ],
+                },
+                asarUnpack: {
+                    description: "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                fileAssociations: {
+                    description: "The file associations.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileAssociation",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                $ref: "#/definitions/FileAssociation",
+                            },
+                        },
+                    ],
+                },
+                protocols: {
+                    description: "The URL protocol schemes.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/Protocol",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                $ref: "#/definitions/Protocol",
+                            },
+                        },
+                    ],
+                },
+                forceCodeSigning: {
+                    description: "Whether to fail if app will be not code signed.",
+                    type: "boolean",
+                },
+                electronUpdaterCompatibility: {
+                    description: "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                detectUpdateChannel: {
+                    description: "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
+                    default: true,
+                    type: "boolean",
+                },
+                generateUpdatesFilesForAllChannels: {
+                    description: "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
+                    default: false,
+                    type: "boolean",
+                },
+                releaseInfo: {
+                    description: 'The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes="new features"\n```',
+                    $ref: "#/definitions/ReleaseInfo",
+                },
+                cscLink: {
+                    type: ["null", "string"],
+                },
+                cscKeyPassword: {
+                    type: ["null", "string"],
+                },
+                defaultArch: {
+                    type: "string",
+                },
+            },
+        },
+        TargetConfiguration: {
+            type: "object",
+            properties: {
+                target: {
+                    description: "The target name. e.g. `snap`.",
+                    type: "string",
+                },
+                arch: {
+                    description: "The arch or list of archs.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                enum: ["arm64", "armv7l", "ia32", "universal", "x64"],
+                                type: "string",
+                            },
+                        },
+                        {
+                            enum: ["arm64", "armv7l", "ia32", "universal", "x64"],
+                            type: "string",
+                        },
+                    ],
+                },
+            },
+            required: ["target"],
+        },
+        FileSet: {
+            type: "object",
+            properties: {
+                from: {
+                    description: "The source path relative to the project directory.",
+                    type: "string",
+                },
+                to: {
+                    description: "The destination path relative to the app's content directory for `extraFiles` and the app's resource directory for `extraResources`.",
+                    type: "string",
+                },
+                filter: {
+                    description: "The [glob patterns](/file-patterns).",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "string",
+                        },
+                    ],
+                },
+            },
+        },
+        AsarOptions: {
+            type: "object",
+            properties: {
+                smartUnpack: {
+                    description: "Whether to automatically unpack executables files.",
+                    default: true,
+                    type: "boolean",
+                },
+                ordering: {
+                    type: ["null", "string"],
+                },
+                externalAllowed: {
+                    description: "Allows external asar files.",
+                    default: false,
+                    type: "boolean",
+                },
+            },
+        },
+        FileAssociation: {
+            description: "File associations.\n\nmacOS (corresponds to [CFBundleDocumentTypes](https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-101685)) and NSIS only.\n\nOn Windows works only if [nsis.perMachine](https://electron.build/configuration/configuration#NsisOptions-perMachine) is set to `true`.",
+            type: "object",
+            properties: {
+                ext: {
+                    description: "The extension (minus the leading period). e.g. `png`.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "string",
+                        },
+                    ],
+                },
+                name: {
+                    description: "The name. e.g. `PNG`. Defaults to `ext`.",
+                    type: ["null", "string"],
+                },
+                description: {
+                    description: "*windows-only.* The description.",
+                    type: ["null", "string"],
+                },
+                mimeType: {
+                    description: "*linux-only.* The mime-type.",
+                    type: ["null", "string"],
+                },
+                icon: {
+                    description: "The path to icon (`.icns` for MacOS and `.ico` for Windows), relative to `build` (build resources directory). Defaults to `${firstExt}.icns`/`${firstExt}.ico` (if several extensions specified, first is used) or to application icon.\n\nNot supported on Linux, file issue if need (default icon will be `x-office-document`).",
+                    type: ["null", "string"],
+                },
+                role: {
+                    description: "*macOS-only* The app’s role with respect to the type. The value can be `Editor`, `Viewer`, `Shell`, or `None`. Corresponds to `CFBundleTypeRole`.",
+                    default: "Editor",
+                    type: "string",
+                },
+                isPackage: {
+                    description: "*macOS-only* Whether the document is distributed as a bundle. If set to true, the bundle directory is treated as a file. Corresponds to `LSTypeIsPackage`.",
+                    type: "boolean",
+                },
+                rank: {
+                    description: "*macOS-only* The app’s rank with respect to the type. The value can be `Owner`, `Default`, `Alternate`, or `None`. Corresponds to `LSHandlerRank`.",
+                    default: "Default",
+                    type: "string",
+                },
+            },
+            required: ["ext"],
+        },
+        Protocol: {
+            description: "URL Protocol Schemes. Protocols to associate the app with. macOS only.\n\nPlease note — on macOS [you need to register an `open-url` event handler](http://electron.atom.io/docs/api/app/#event-open-url-macos).",
+            type: "object",
+            properties: {
+                name: {
+                    description: "The name. e.g. `IRC server URL`.",
+                    type: "string",
+                },
+                schemes: {
+                    description: 'The schemes. e.g. `["irc", "ircs"]`.',
+                    type: "array",
+                    items: {
+                        type: "string",
+                    },
+                },
+                role: {
+                    description: "*macOS-only* The app’s role with respect to the type.",
+                    default: "Editor",
+                    enum: ["Editor", "None", "Shell", "Viewer"],
+                    type: "string",
+                },
+            },
+            required: ["name", "schemes"],
+        },
+        GithubOptions: {
+            description: "[GitHub](https://help.github.com/articles/about-releases/) options.\n\nGitHub [personal access token](https://help.github.com/articles/creating-an-access-token-for-command-line-use/) is required. You can generate by going to [https://github.com/settings/tokens/new](https://github.com/settings/tokens/new). The access token should have the repo scope/permission.\nDefine `GH_TOKEN` environment variable.",
+            type: "object",
+            properties: {
+                provider: {
+                    description: "The provider. Must be `github`.",
+                    type: "string",
+                    enum: ["github"],
+                },
+                repo: {
+                    description: "The repository name. [Detected automatically](#github-repository-and-bintray-package).",
+                    type: ["null", "string"],
+                },
+                owner: {
+                    description: "The owner.",
+                    type: ["null", "string"],
+                },
+                vPrefixedTagName: {
+                    description: "Whether to use `v`-prefixed tag name.",
+                    default: true,
+                    type: "boolean",
+                },
+                host: {
+                    description: "The host (including the port if need).",
+                    default: "github.com",
+                    type: ["null", "string"],
+                },
+                protocol: {
+                    description: "The protocol. GitHub Publisher supports only `https`.",
+                    default: "https",
+                    anyOf: [
+                        {
+                            enum: ["http", "https"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                token: {
+                    description: "The access token to support auto-update from private github repositories. Never specify it in the configuration files. Only for [setFeedURL](/auto-update#appupdatersetfeedurloptions).",
+                    type: ["null", "string"],
+                },
+                private: {
+                    description: "Whether to use private github auto-update provider if `GH_TOKEN` environment variable is defined. See [Private GitHub Update Repo](/auto-update#private-github-update-repo).",
+                    type: ["null", "boolean"],
+                },
+                releaseType: {
+                    description: "The type of release. By default `draft` release will be created.\n\nAlso you can set release type using environment variable. If `EP_DRAFT`is set to `true` — `draft`, if `EP_PRE_RELEASE`is set to `true` — `prerelease`.",
+                    default: "draft",
+                    anyOf: [
+                        {
+                            enum: ["draft", "prerelease", "release"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                publisherName: {
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                updaterCacheDirName: {
+                    type: ["null", "string"],
+                },
+                publishAutoUpdate: {
+                    description: "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    default: true,
+                    type: "boolean",
+                },
+                requestHeaders: {
+                    description: "Any custom request headers",
+                    $ref: "#/definitions/OutgoingHttpHeaders",
+                },
+            },
+            required: ["provider"],
+        },
+        OutgoingHttpHeaders: {
+            type: "object",
+        },
+        S3Options: {
+            type: "object",
+            properties: {
+                provider: {
+                    description: "The provider. Must be `s3`.",
+                    type: "string",
+                    enum: ["s3"],
+                },
+                bucket: {
+                    description: "The bucket name.",
+                    type: "string",
+                },
+                region: {
+                    description: "The region. Is determined and set automatically when publishing.",
+                    type: ["null", "string"],
+                },
+                acl: {
+                    description: "The ACL. Set to `null` to not [add](https://github.com/electron-userland/electron-builder/issues/1822).\n\nPlease see [required permissions for the S3 provider](https://github.com/electron-userland/electron-builder/issues/1618#issuecomment-314679128).",
+                    default: "public-read",
+                    anyOf: [
+                        {
+                            enum: ["private", "public-read"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                storageClass: {
+                    description: "The type of storage to use for the object.",
+                    default: "STANDARD",
+                    anyOf: [
+                        {
+                            enum: ["REDUCED_REDUNDANCY", "STANDARD", "STANDARD_IA"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                encryption: {
+                    description: "Server-side encryption algorithm to use for the object.",
+                    anyOf: [
+                        {
+                            enum: ["AES256", "aws:kms"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                endpoint: {
+                    description: "The endpoint URI to send requests to. The default endpoint is built from the configured region.\nThe endpoint should be a string like `https://{service}.{region}.amazonaws.com`.",
+                    type: ["null", "string"],
+                },
+                channel: {
+                    description: "The update channel.",
+                    default: "latest",
+                    type: ["null", "string"],
+                },
+                path: {
+                    description: "The directory path.",
+                    default: "/",
+                    type: ["null", "string"],
+                },
+                publisherName: {
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                updaterCacheDirName: {
+                    type: ["null", "string"],
+                },
+                publishAutoUpdate: {
+                    description: "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    default: true,
+                    type: "boolean",
+                },
+                requestHeaders: {
+                    description: "Any custom request headers",
+                    $ref: "#/definitions/OutgoingHttpHeaders",
+                },
+            },
+            required: ["bucket", "provider"],
+        },
+        SpacesOptions: {
+            description: "[DigitalOcean Spaces](https://www.digitalocean.com/community/tutorials/an-introduction-to-digitalocean-spaces) options.\nAccess key is required, define `DO_KEY_ID` and `DO_SECRET_KEY` environment variables.",
+            type: "object",
+            properties: {
+                provider: {
+                    description: "The provider. Must be `spaces`.",
+                    type: "string",
+                    enum: ["spaces"],
+                },
+                name: {
+                    description: "The space name.",
+                    type: "string",
+                },
+                region: {
+                    description: "The region (e.g. `nyc3`).",
+                    type: "string",
+                },
+                channel: {
+                    description: "The update channel.",
+                    default: "latest",
+                    type: ["null", "string"],
+                },
+                path: {
+                    description: "The directory path.",
+                    default: "/",
+                    type: ["null", "string"],
+                },
+                acl: {
+                    description: "The ACL. Set to `null` to not [add](https://github.com/electron-userland/electron-builder/issues/1822).",
+                    default: "public-read",
+                    anyOf: [
+                        {
+                            enum: ["private", "public-read"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                publisherName: {
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                updaterCacheDirName: {
+                    type: ["null", "string"],
+                },
+                publishAutoUpdate: {
+                    description: "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    default: true,
+                    type: "boolean",
+                },
+                requestHeaders: {
+                    description: "Any custom request headers",
+                    $ref: "#/definitions/OutgoingHttpHeaders",
+                },
+            },
+            required: ["name", "provider", "region"],
+        },
+        GenericServerOptions: {
+            description: "Generic (any HTTP(S) server) options.\nIn all publish options [File Macros](/file-patterns#file-macros) are supported.",
+            type: "object",
+            properties: {
+                provider: {
+                    description: "The provider. Must be `generic`.",
+                    type: "string",
+                    enum: ["generic"],
+                },
+                url: {
+                    description: "The base url. e.g. `https://bucket_name.s3.amazonaws.com`.",
+                    type: "string",
+                },
+                channel: {
+                    description: "The channel.",
+                    default: "latest",
+                    type: ["null", "string"],
+                },
+                useMultipleRangeRequest: {
+                    description: "Whether to use multiple range requests for differential update. Defaults to `true` if `url` doesn't contain `s3.amazonaws.com`.",
+                    type: "boolean",
+                },
+                publisherName: {
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                updaterCacheDirName: {
+                    type: ["null", "string"],
+                },
+                publishAutoUpdate: {
+                    description: "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    default: true,
+                    type: "boolean",
+                },
+                requestHeaders: {
+                    description: "Any custom request headers",
+                    $ref: "#/definitions/OutgoingHttpHeaders",
+                },
+            },
+            required: ["provider", "url"],
+        },
+        BintrayOptions: {
+            description: '[Bintray](https://bintray.com/) options. Requires an API key. An API key can be obtained from the user [profile](https://bintray.com/profile/edit) page ("Edit Your Profile" -> API Key).\nDefine `BT_TOKEN` environment variable.',
+            type: "object",
+            properties: {
+                provider: {
+                    description: "The provider. Must be `bintray`.",
+                    type: "string",
+                    enum: ["bintray"],
+                },
+                package: {
+                    description: "The Bintray package name.",
+                    type: ["null", "string"],
+                },
+                repo: {
+                    description: "The Bintray repository name.",
+                    default: "generic",
+                    type: ["null", "string"],
+                },
+                owner: {
+                    description: "The owner.",
+                    type: ["null", "string"],
+                },
+                component: {
+                    description: "The Bintray component (Debian only).",
+                    type: ["null", "string"],
+                },
+                distribution: {
+                    description: "The Bintray distribution (Debian only).",
+                    default: "stable",
+                    type: ["null", "string"],
+                },
+                user: {
+                    description: "The Bintray user account. Used in cases where the owner is an organization.",
+                    type: ["null", "string"],
+                },
+                token: {
+                    type: ["null", "string"],
+                },
+                publisherName: {
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                updaterCacheDirName: {
+                    type: ["null", "string"],
+                },
+                publishAutoUpdate: {
+                    description: "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    default: true,
+                    type: "boolean",
+                },
+                requestHeaders: {
+                    description: "Any custom request headers",
+                    $ref: "#/definitions/OutgoingHttpHeaders",
+                },
+            },
+            required: ["provider"],
+        },
+        CustomPublishOptions: {
+            type: "object",
+            additionalProperties: {},
+            properties: {
+                provider: {
+                    description: "The provider. Must be `custom`.",
+                    type: "string",
+                    enum: ["custom"],
+                },
+                updateProvider: {
+                    description: "The Provider to provide UpdateInfo regarding available updates.  Required\nto use custom providers with electron-updater.",
+                    type: "object",
+                },
+                publisherName: {
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                updaterCacheDirName: {
+                    type: ["null", "string"],
+                },
+                publishAutoUpdate: {
+                    description: "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    default: true,
+                    type: "boolean",
+                },
+                requestHeaders: {
+                    description: "Any custom request headers",
+                    $ref: "#/definitions/OutgoingHttpHeaders",
+                },
+            },
+            required: ["provider"],
+        },
+        KeygenOptions: {
+            description: "Keygen options.\nhttps://keygen.sh/\nDefine `KEYGEN_TOKEN` environment variable.",
+            type: "object",
+            properties: {
+                provider: {
+                    description: "The provider. Must be `keygen`.",
+                    type: "string",
+                    enum: ["keygen"],
+                },
+                account: {
+                    description: "Keygen account's UUID",
+                    type: "string",
+                },
+                product: {
+                    description: "Keygen product's UUID",
+                    type: "string",
+                },
+                channel: {
+                    description: "The channel.",
+                    default: "stable",
+                    type: ["null", "string"],
+                },
+                platform: {
+                    description: "The target Platform. Is set programmatically explicitly for publishing.",
+                    type: "string",
+                },
+                publisherName: {
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                updaterCacheDirName: {
+                    type: ["null", "string"],
+                },
+                publishAutoUpdate: {
+                    description: "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    default: true,
+                    type: "boolean",
+                },
+                requestHeaders: {
+                    description: "Any custom request headers",
+                    $ref: "#/definitions/OutgoingHttpHeaders",
+                },
+            },
+            required: ["account", "product", "provider"],
+        },
+        SnapStoreOptions: {
+            description: "[Snap Store](https://snapcraft.io/) options.",
+            type: "object",
+            properties: {
+                channels: {
+                    description: "The list of channels the snap would be released.",
+                    default: ["edge"],
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                provider: {
+                    $ref: "#/definitions/PublishProvider",
+                    description: "The provider.",
+                },
+                publisherName: {
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                updaterCacheDirName: {
+                    type: ["null", "string"],
+                },
+                publishAutoUpdate: {
+                    description: "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    default: true,
+                    type: "boolean",
+                },
+                requestHeaders: {
+                    description: "Any custom request headers",
+                    $ref: "#/definitions/OutgoingHttpHeaders",
+                },
+            },
+            required: ["provider"],
+        },
+        PublishProvider: {
+            enum: ["bintray", "custom", "generic", "github", "keygen", "s3", "snapStore", "spaces"],
+            type: "string",
+        },
+        ReleaseInfo: {
+            type: "object",
+            properties: {
+                releaseName: {
+                    description: "The release name.",
+                    type: ["null", "string"],
+                },
+                releaseNotes: {
+                    description: "The release notes.",
+                    type: ["null", "string"],
+                },
+                releaseNotesFile: {
+                    description: "The path to release notes file. Defaults to `release-notes-${platform}.md` (where `platform` it is current platform — `mac`, `linux` or `windows`) or `release-notes.md` in the [build resources](#MetadataDirectories-buildResources).",
+                    type: ["null", "string"],
+                },
+                releaseDate: {
+                    description: "The release date.",
+                    type: "string",
+                },
+            },
+        },
+        MasConfiguration: {
+            type: "object",
+            properties: {
+                entitlements: {
+                    description: "The path to entitlements file for signing the app. `build/entitlements.mas.plist` will be used if exists (it is a recommended way to set).\nOtherwise [default](https://github.com/electron-userland/electron-osx-sign/blob/master/default.entitlements.mas.plist).",
+                    type: ["null", "string"],
+                },
+                entitlementsInherit: {
+                    description: "The path to child entitlements which inherit the security settings for signing frameworks and bundles of a distribution. `build/entitlements.mas.inherit.plist` will be used if exists (it is a recommended way to set).\nOtherwise [default](https://github.com/electron-userland/electron-osx-sign/blob/master/default.entitlements.mas.inherit.plist).",
+                    type: ["null", "string"],
+                },
+                binaries: {
+                    description: "Paths of any extra binaries that need to be signed.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                category: {
+                    description: 'The application category type, as shown in the Finder via *View -> Arrange by Application Category* when viewing the Applications directory.\n\nFor example, `"category": "public.app-category.developer-tools"` will set the application category to *Developer Tools*.\n\nValid values are listed in [Apple\'s documentation](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/LaunchServicesKeys.html#//apple_ref/doc/uid/TP40009250-SW8).',
+                    type: ["null", "string"],
+                },
+                target: {
+                    description: "The target package type: list of `default`, `dmg`, `mas`, `mas-dev`, `pkg`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir`. Defaults to `default` (dmg and zip for Squirrel.Mac).",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/TargetConfiguration",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/TargetConfiguration",
+                                    },
+                                    {
+                                        enum: ["7z", "default", "dir", "dmg", "mas", "mas-dev", "pkg", "tar.bz2", "tar.gz", "tar.lz", "tar.xz", "zip"],
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            enum: ["7z", "default", "dir", "dmg", "mas", "mas-dev", "pkg", "tar.bz2", "tar.gz", "tar.lz", "tar.xz", "zip"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                identity: {
+                    description: "The name of certificate to use when signing. Consider using environment variables [CSC_LINK or CSC_NAME](/code-signing) instead of specifying this option.\nMAS installer identity is specified in the [mas](/configuration/mas).",
+                    type: ["null", "string"],
+                },
+                icon: {
+                    description: "The path to application icon.",
+                    default: "build/icon.icns",
+                    type: ["null", "string"],
+                },
+                entitlementsLoginHelper: {
+                    description: "Path to login helper entitlement file.\nWhen using App Sandbox, the the `com.apple.security.inherit` key that is normally in the inherited entitlements cannot be inherited since the login helper is a standalone executable.\nDefaults to the value provided for `entitlements`. This option only applies when signing with `entitlements` provided.",
+                    type: ["null", "string"],
+                },
+                provisioningProfile: {
+                    description: "The path to the provisioning profile to use when signing, absolute or relative to the app root.",
+                    type: ["null", "string"],
+                },
+                bundleVersion: {
+                    description: "The `CFBundleVersion`. Do not use it unless [you need to](https://github.com/electron-userland/electron-builder/issues/565#issuecomment-230678643).",
+                    type: ["null", "string"],
+                },
+                bundleShortVersion: {
+                    description: "The `CFBundleShortVersionString`. Do not use it unless you need to.",
+                    type: ["null", "string"],
+                },
+                darkModeSupport: {
+                    description: "Whether a dark mode is supported. If your app does have a dark mode, you can make your app follow the system-wide dark mode setting.",
+                    default: false,
+                    type: "boolean",
+                },
+                helperBundleId: {
+                    description: "The bundle identifier to use in the application helper's plist.",
+                    default: "${appBundleIdentifier}.helper",
+                    type: ["null", "string"],
+                },
+                helperRendererBundleId: {
+                    description: "The bundle identifier to use in the Renderer helper's plist.",
+                    default: "${appBundleIdentifier}.helper.Renderer",
+                    type: ["null", "string"],
+                },
+                helperPluginBundleId: {
+                    description: "The bundle identifier to use in the Plugin helper's plist.",
+                    default: "${appBundleIdentifier}.helper.Plugin",
+                    type: ["null", "string"],
+                },
+                helperGPUBundleId: {
+                    description: "The bundle identifier to use in the GPU helper's plist.",
+                    default: "${appBundleIdentifier}.helper.GPU",
+                    type: ["null", "string"],
+                },
+                helperEHBundleId: {
+                    description: "The bundle identifier to use in the EH helper's plist.",
+                    default: "${appBundleIdentifier}.helper.EH",
+                    type: ["null", "string"],
+                },
+                helperNPBundleId: {
+                    description: "The bundle identifier to use in the NP helper's plist.",
+                    default: "${appBundleIdentifier}.helper.NP",
+                    type: ["null", "string"],
+                },
+                type: {
+                    description: "Whether to sign app for development or for distribution.",
+                    default: "distribution",
+                    anyOf: [
+                        {
+                            enum: ["development", "distribution"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                extendInfo: {
+                    description: "The extra entries for `Info.plist`.",
+                },
+                minimumSystemVersion: {
+                    description: "The minimum version of macOS required for the app to run. Corresponds to `LSMinimumSystemVersion`.",
+                    type: ["null", "string"],
+                },
+                requirements: {
+                    description: "Path of [requirements file](https://developer.apple.com/library/mac/documentation/Security/Conceptual/CodeSigningGuide/RequirementLang/RequirementLang.html) used in signing. Not applicable for MAS.",
+                    type: ["null", "string"],
+                },
+                electronLanguages: {
+                    description: "The electron locales. By default Electron locales used as is.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "string",
+                        },
+                    ],
+                },
+                cscInstallerLink: {
+                    type: ["null", "string"],
+                },
+                cscInstallerKeyPassword: {
+                    type: ["null", "string"],
+                },
+                extraDistFiles: {
+                    description: "Extra files to put in archive. Not applicable for `tar.*`.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                hardenedRuntime: {
+                    description: "Whether your app has to be signed with hardened runtime.",
+                    default: true,
+                    type: "boolean",
+                },
+                gatekeeperAssess: {
+                    description: "Whether to let electron-osx-sign validate the signing or not.",
+                    default: false,
+                    type: "boolean",
+                },
+                strictVerify: {
+                    description: "Whether to let electron-osx-sign verify the contents or not.",
+                    default: true,
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["string", "boolean"],
+                        },
+                    ],
+                },
+                signIgnore: {
+                    description: "Regex or an array of regex's that signal skipping signing a file.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                timestamp: {
+                    description: "Specify the URL of the timestamp authority server",
+                    type: ["null", "string"],
+                },
+                appId: {
+                    description: "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
+                    default: "com.electron.${name}",
+                    type: ["null", "string"],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
+                    type: ["null", "string"],
+                },
+                executableName: {
+                    description: "The executable name. Defaults to `productName`.",
+                    type: ["null", "string"],
+                },
+                compression: {
+                    description: "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
+                    default: "normal",
+                    anyOf: [
+                        {
+                            enum: ["maximum", "normal", "store"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                files: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                extraResources: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                extraFiles: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                asar: {
+                    description: "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work.",
+                    default: true,
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/AsarOptions",
+                        },
+                        {
+                            type: ["null", "boolean"],
+                        },
+                    ],
+                },
+                asarUnpack: {
+                    description: "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                fileAssociations: {
+                    description: "The file associations.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileAssociation",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                $ref: "#/definitions/FileAssociation",
+                            },
+                        },
+                    ],
+                },
+                protocols: {
+                    description: "The URL protocol schemes.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/Protocol",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                $ref: "#/definitions/Protocol",
+                            },
+                        },
+                    ],
+                },
+                forceCodeSigning: {
+                    description: "Whether to fail if app will be not code signed.",
+                    type: "boolean",
+                },
+                electronUpdaterCompatibility: {
+                    description: "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                detectUpdateChannel: {
+                    description: "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
+                    default: true,
+                    type: "boolean",
+                },
+                generateUpdatesFilesForAllChannels: {
+                    description: "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
+                    default: false,
+                    type: "boolean",
+                },
+                releaseInfo: {
+                    description: 'The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes="new features"\n```',
+                    $ref: "#/definitions/ReleaseInfo",
+                },
+                cscLink: {
+                    type: ["null", "string"],
+                },
+                cscKeyPassword: {
+                    type: ["null", "string"],
+                },
+                defaultArch: {
+                    type: "string",
+                },
+            },
+        },
+        DmgOptions: {
+            type: "object",
+            properties: {
+                background: {
+                    description: "The path to background image (default: `build/background.tiff` or `build/background.png` if exists). The resolution of this file determines the resolution of the installer window.\nIf background is not specified, use `window.size`. Default locations expected background size to be 540x380.",
+                    type: ["null", "string"],
+                },
+                backgroundColor: {
+                    description: "The background color (accepts css colors). Defaults to `#ffffff` (white) if no background image.",
+                    type: ["null", "string"],
+                },
+                icon: {
+                    description: "The path to DMG icon (volume icon), which will be shown when mounted, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to the application icon (`build/icon.icns`).",
+                    type: ["null", "string"],
+                },
+                iconSize: {
+                    description: "The size of all the icons inside the DMG.",
+                    default: 80,
+                    type: ["null", "number"],
+                },
+                iconTextSize: {
+                    description: "The size of all the icon texts inside the DMG.",
+                    default: 12,
+                    type: ["null", "number"],
+                },
+                title: {
+                    description: "The title of the produced DMG, which will be shown when mounted (volume name).\n\nMacro `${productName}`, `${version}` and `${name}` are supported.",
+                    default: "${productName} ${version}",
+                    type: ["null", "string"],
+                },
+                contents: {
+                    description: "The content — to customize icon locations. The x and y coordinates refer to the position of the **center** of the icon (at 1x scale), and do not take the label into account.",
+                    type: "array",
+                    items: {
+                        $ref: "#/definitions/DmgContent",
+                    },
+                },
+                format: {
+                    description: "The disk image format. `ULFO` (lzfse-compressed image (OS X 10.11+ only)).",
+                    default: "UDZO",
+                    enum: ["UDBZ", "UDCO", "UDRO", "UDRW", "UDZO", "ULFO"],
+                    type: "string",
+                },
+                window: {
+                    description: 'The DMG window position and size. With y co-ordinates running from bottom to top.\n\nThe Finder makes sure that the window will be on the user’s display, so if you want your window at the top left of the display you could use `"x": 0, "y": 100000` as the x, y co-ordinates.\nIt is not to be possible to position the window relative to the [top left](https://github.com/electron-userland/electron-builder/issues/3990#issuecomment-512960957) or relative to the center of the user’s screen.',
+                    $ref: "#/definitions/DmgWindow",
+                },
+                internetEnabled: {
+                    description: "Whether to create internet-enabled disk image (when it is downloaded using a browser it will automatically decompress the image, put the application on the desktop, unmount and remove the disk image file).",
+                    default: false,
+                    type: "boolean",
+                },
+                sign: {
+                    description: "Whether to sign the DMG or not. Signing is not required and will lead to unwanted errors in combination with notarization requirements.",
+                    default: false,
+                    type: "boolean",
+                },
+                writeUpdateInfo: {
+                    default: true,
+                    type: "boolean",
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        DmgContent: {
+            type: "object",
+            properties: {
+                x: {
+                    description: "The device-independent pixel offset from the left of the window to the **center** of the icon.",
+                    type: "number",
+                },
+                y: {
+                    description: "The device-independent pixel offset from the top of the window to the **center** of the icon.",
+                    type: "number",
+                },
+                type: {
+                    enum: ["dir", "file", "link"],
+                    type: "string",
+                },
+                name: {
+                    description: "The name of the file within the DMG. Defaults to basename of `path`.",
+                    type: "string",
+                },
+                path: {
+                    description: "The path of the file within the DMG.",
+                    type: "string",
+                },
+            },
+            required: ["x", "y"],
+        },
+        DmgWindow: {
+            type: "object",
+            properties: {
+                x: {
+                    description: "The X position relative to left of the screen.",
+                    default: 400,
+                    type: "number",
+                },
+                y: {
+                    description: "The Y position relative to bottom of the screen.",
+                    default: 100,
+                    type: "number",
+                },
+                width: {
+                    description: "The width. Defaults to background image width or 540.",
+                    type: "number",
+                },
+                height: {
+                    description: "The height. Defaults to background image height or 380.",
+                    type: "number",
+                },
+            },
+        },
+        PkgOptions: {
+            description: "macOS product archive options.",
+            type: "object",
+            properties: {
+                scripts: {
+                    description: "The scripts directory, relative to `build` (build resources directory).\nThe scripts can be in any language so long as the files are marked executable and have the appropriate shebang indicating the path to the interpreter.\nScripts are required to be executable (`chmod +x file`).",
+                    default: "build/pkg-scripts",
+                    type: ["null", "string"],
+                },
+                productbuild: {
+                    description: "should be not documented, only to experiment",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                installLocation: {
+                    description: "The install location. [Do not use it](https://stackoverflow.com/questions/12863944/how-do-you-specify-a-default-install-location-to-home-with-pkgbuild) to create per-user package.\nMostly never you will need to change this option. `/Applications` would install it as expected into `/Applications` if the local system domain is chosen, or into `$HOME/Applications` if the home installation is chosen.",
+                    default: "/Applications",
+                    type: ["null", "string"],
+                },
+                allowAnywhere: {
+                    description: "Whether can be installed at the root of any volume, including non-system volumes. Otherwise, it cannot be installed at the root of a volume.\n\nCorresponds to [enable_anywhere](https://developer.apple.com/library/content/documentation/DeveloperTools/Reference/DistributionDefinitionRef/Chapters/Distribution_XML_Ref.html#//apple_ref/doc/uid/TP40005370-CH100-SW70).",
+                    default: true,
+                    type: ["null", "boolean"],
+                },
+                allowCurrentUserHome: {
+                    description: "Whether can be installed into the current user’s home directory.\nA home directory installation is done as the current user (not as root), and it cannot write outside of the home directory.\nIf the product cannot be installed in the user’s home directory and be not completely functional from user’s home directory.\n\nCorresponds to [enable_currentUserHome](https://developer.apple.com/library/content/documentation/DeveloperTools/Reference/DistributionDefinitionRef/Chapters/Distribution_XML_Ref.html#//apple_ref/doc/uid/TP40005370-CH100-SW70).",
+                    default: true,
+                    type: ["null", "boolean"],
+                },
+                allowRootDirectory: {
+                    description: "Whether can be installed into the root directory. Should usually be `true` unless the product can be installed only to the user’s home directory.\n\nCorresponds to [enable_localSystem](https://developer.apple.com/library/content/documentation/DeveloperTools/Reference/DistributionDefinitionRef/Chapters/Distribution_XML_Ref.html#//apple_ref/doc/uid/TP40005370-CH100-SW70).",
+                    default: true,
+                    type: ["null", "boolean"],
+                },
+                identity: {
+                    description: "The name of certificate to use when signing. Consider using environment variables [CSC_LINK or CSC_NAME](/code-signing) instead of specifying this option.",
+                    type: ["null", "string"],
+                },
+                license: {
+                    description: 'The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). In addition to `txt, `rtf` and `html` supported (don\'t forget to use `target="_blank"` for links).',
+                    type: ["null", "string"],
+                },
+                background: {
+                    description: "Options for the background image for the installer.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/PkgBackgroundOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                welcome: {
+                    description: "The path to the welcome file. This may be used to customize the text on the Introduction page of the installer.",
+                    type: ["null", "string"],
+                },
+                mustClose: {
+                    description: "Identifies applications that must be closed before the package is installed.\\n\\nCorresponds to [must-close](https://developer.apple.com/library/archive/documentation/DeveloperTools/Reference/DistributionDefinitionRef/Chapters/Distribution_XML_Ref.html#//apple_ref/doc/uid/TP40005370-CH100-SW77)",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                conclusion: {
+                    description: 'The path to the conclusion file. This may be used to customize the text on the final "Summary" page of the installer.',
+                    type: ["null", "string"],
+                },
+                isRelocatable: {
+                    description: "Install bundle over previous version if moved by user?",
+                    default: true,
+                    type: ["null", "boolean"],
+                },
+                isVersionChecked: {
+                    description: "Don't install bundle if newer version on disk?",
+                    default: true,
+                    type: ["null", "boolean"],
+                },
+                hasStrictIdentifier: {
+                    description: "Require identical bundle identifiers at install path?",
+                    default: true,
+                    type: ["null", "boolean"],
+                },
+                overwriteAction: {
+                    description: "Specifies how an existing version of the bundle on disk should be handled when the version in\nthe package is installed.\n\nIf you specify upgrade, the bundle in the package atomi-cally replaces any version on disk;\nthis has the effect of deleting old paths that no longer exist in the new version of\nthe bundle.\n\nIf you specify update, the bundle in the package overwrites the version on disk, and any files\nnot contained in the package will be left intact; this is appropriate when you are delivering\nan update-only package.\n\nAnother effect of update is that the package bundle will not be installed at all if there is\nnot already a version on disk; this allows a package to deliver an update for an app that\nthe user might have deleted.",
+                    default: "upgrade",
+                    anyOf: [
+                        {
+                            enum: ["update", "upgrade"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        PkgBackgroundOptions: {
+            description: "Options for the background image in a PKG installer",
+            type: "object",
+            properties: {
+                file: {
+                    description: "Path to the image to use as an installer background.",
+                    type: "string",
+                },
+                alignment: {
+                    description: "Alignment of the background image.\nOptions are: center, left, right, top, bottom, topleft, topright, bottomleft, bottomright",
+                    default: "center",
+                    anyOf: [
+                        {
+                            enum: ["bottom", "bottomleft", "bottomright", "center", "left", "right", "top", "topleft", "topright"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                scaling: {
+                    description: "Scaling of the background image.\nOptions are: tofit, none, proportional",
+                    default: "tofit",
+                    anyOf: [
+                        {
+                            enum: ["none", "proportional", "tofit"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+            },
+        },
+        WindowsConfiguration: {
+            type: "object",
+            properties: {
+                target: {
+                    description: "The target package type: list of `nsis`, `nsis-web` (Web installer), `portable` ([portable](/configuration/nsis#portable) app without installation), `appx`, `msi`, `squirrel`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir`.\nAppX package can be built only on Windows 10.\n\nTo use Squirrel.Windows please install `electron-builder-squirrel-windows` dependency.",
+                    default: "nsis",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/TargetConfiguration",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/TargetConfiguration",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                icon: {
+                    description: "The path to application icon.",
+                    default: "build/icon.ico",
+                    type: ["null", "string"],
+                },
+                legalTrademarks: {
+                    description: "The trademarks and registered trademarks.",
+                    type: ["null", "string"],
+                },
+                signingHashAlgorithms: {
+                    description: "Array of signing algorithms used. For AppX `sha256` is always used.",
+                    default: "['sha1', 'sha256']",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                enum: ["sha1", "sha256"],
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                sign: {
+                    description: "The custom function (or path to file or module id) to sign Windows executable.",
+                    type: ["null", "string", "object"],
+                },
+                certificateFile: {
+                    description: "The path to the *.pfx certificate you want to sign with. Please use it only if you cannot use env variable `CSC_LINK` (`WIN_CSC_LINK`) for some reason.\nPlease see [Code Signing](/code-signing).",
+                    type: ["null", "string"],
+                },
+                certificatePassword: {
+                    description: "The password to the certificate provided in `certificateFile`. Please use it only if you cannot use env variable `CSC_KEY_PASSWORD` (`WIN_CSC_KEY_PASSWORD`) for some reason.\nPlease see [Code Signing](/code-signing).",
+                    type: ["null", "string"],
+                },
+                certificateSubjectName: {
+                    description: "The name of the subject of the signing certificate. Required only for EV Code Signing and works only on Windows (or on macOS if [Parallels Desktop](https://www.parallels.com/products/desktop/) Windows 10 virtual machines exits).",
+                    type: ["null", "string"],
+                },
+                certificateSha1: {
+                    description: "The SHA1 hash of the signing certificate. The SHA1 hash is commonly specified when multiple certificates satisfy the criteria specified by the remaining switches. Works only on Windows (or on macOS if [Parallels Desktop](https://www.parallels.com/products/desktop/) Windows 10 virtual machines exits).",
+                    type: ["null", "string"],
+                },
+                additionalCertificateFile: {
+                    description: "The path to an additional certificate file you want to add to the signature block.",
+                    type: ["null", "string"],
+                },
+                rfc3161TimeStampServer: {
+                    description: "The URL of the RFC 3161 time stamp server.",
+                    default: "http://timestamp.digicert.com",
+                    type: ["null", "string"],
+                },
+                timeStampServer: {
+                    description: "The URL of the time stamp server.",
+                    default: "http://timestamp.digicert.com",
+                    type: ["null", "string"],
+                },
+                publisherName: {
+                    description: "[The publisher name](https://github.com/electron-userland/electron-builder/issues/1187#issuecomment-278972073), exactly as in your code signed certificate. Several names can be provided.\nDefaults to common name from your code signing certificate.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                verifyUpdateCodeSignature: {
+                    description: "Whether to verify the signature of an available update before installation.\nThe [publisher name](#publisherName) will be used for the signature verification.",
+                    default: true,
+                    type: "boolean",
+                },
+                requestedExecutionLevel: {
+                    description: "The [security level](https://msdn.microsoft.com/en-us/library/6ad1fshk.aspx#Anchor_9) at which the application requests to be executed.\nCannot be specified per target, allowed only in the `win`.",
+                    default: "asInvoker",
+                    anyOf: [
+                        {
+                            enum: ["asInvoker", "highestAvailable", "requireAdministrator"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                signAndEditExecutable: {
+                    description: "Whether to sign and add metadata to executable. Advanced option.",
+                    default: true,
+                    type: "boolean",
+                },
+                signDlls: {
+                    description: "Whether to sign DLL files. Advanced option.",
+                    default: false,
+                    type: "boolean",
+                },
+                appId: {
+                    description: "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
+                    default: "com.electron.${name}",
+                    type: ["null", "string"],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
+                    type: ["null", "string"],
+                },
+                executableName: {
+                    description: "The executable name. Defaults to `productName`.",
+                    type: ["null", "string"],
+                },
+                compression: {
+                    description: "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
+                    default: "normal",
+                    anyOf: [
+                        {
+                            enum: ["maximum", "normal", "store"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                files: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                extraResources: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                extraFiles: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                asar: {
+                    description: "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work.",
+                    default: true,
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/AsarOptions",
+                        },
+                        {
+                            type: ["null", "boolean"],
+                        },
+                    ],
+                },
+                asarUnpack: {
+                    description: "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                fileAssociations: {
+                    description: "The file associations.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileAssociation",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                $ref: "#/definitions/FileAssociation",
+                            },
+                        },
+                    ],
+                },
+                protocols: {
+                    description: "The URL protocol schemes.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/Protocol",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                $ref: "#/definitions/Protocol",
+                            },
+                        },
+                    ],
+                },
+                forceCodeSigning: {
+                    description: "Whether to fail if app will be not code signed.",
+                    type: "boolean",
+                },
+                electronUpdaterCompatibility: {
+                    description: "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                detectUpdateChannel: {
+                    description: "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
+                    default: true,
+                    type: "boolean",
+                },
+                generateUpdatesFilesForAllChannels: {
+                    description: "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
+                    default: false,
+                    type: "boolean",
+                },
+                releaseInfo: {
+                    description: 'The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes="new features"\n```',
+                    $ref: "#/definitions/ReleaseInfo",
+                },
+                cscLink: {
+                    type: ["null", "string"],
+                },
+                cscKeyPassword: {
+                    type: ["null", "string"],
+                },
+                defaultArch: {
+                    type: "string",
+                },
+            },
+        },
+        NsisOptions: {
+            type: "object",
+            properties: {
+                oneClick: {
+                    description: "Whether to create one-click installer or assisted.",
+                    default: true,
+                    type: "boolean",
+                },
+                perMachine: {
+                    description: "Whether to show install mode installer page (choice per-machine or per-user) for assisted installer. Or whether installation always per all users (per-machine).\n\nIf `oneClick` is `true` (default): Whether to install per all users (per-machine).\n\nIf `oneClick` is `false` and `perMachine` is `true`: no install mode installer page, always install per-machine.\n\nIf `oneClick` is `false` and `perMachine` is `false` (default): install mode installer page.",
+                    default: false,
+                    type: "boolean",
+                },
+                allowElevation: {
+                    description: "*assisted installer only.* Allow requesting for elevation. If false, user will have to restart installer with elevated permissions.",
+                    default: true,
+                    type: "boolean",
+                },
+                allowToChangeInstallationDirectory: {
+                    description: "*assisted installer only.* Whether to allow user to change installation directory.",
+                    default: false,
+                    type: "boolean",
+                },
+                installerIcon: {
+                    description: "The path to installer icon, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerIcon.ico` or application icon.",
+                    type: ["null", "string"],
+                },
+                uninstallerIcon: {
+                    description: "The path to uninstaller icon, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/uninstallerIcon.ico` or application icon.",
+                    type: ["null", "string"],
+                },
+                installerHeader: {
+                    description: "*assisted installer only.* `MUI_HEADERIMAGE`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.",
+                    default: "build/installerHeader.bmp",
+                    type: ["null", "string"],
+                },
+                installerHeaderIcon: {
+                    description: "*one-click installer only.* The path to header icon (above the progress bar), relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerHeaderIcon.ico` or application icon.",
+                    type: ["null", "string"],
+                },
+                installerSidebar: {
+                    description: "*assisted installer only.* `MUI_WELCOMEFINISHPAGE_BITMAP`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerSidebar.bmp` or `${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp`. Image size 164 × 314 pixels.",
+                    type: ["null", "string"],
+                },
+                uninstallerSidebar: {
+                    description: "*assisted installer only.* `MUI_UNWELCOMEFINISHPAGE_BITMAP`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `installerSidebar` option or `build/uninstallerSidebar.bmp` or `build/installerSidebar.bmp` or `${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp`",
+                    type: ["null", "string"],
+                },
+                uninstallDisplayName: {
+                    description: "The uninstaller display name in the control panel.",
+                    default: "${productName} ${version}",
+                    type: "string",
+                },
+                include: {
+                    description: "The path to NSIS include script to customize installer. Defaults to `build/installer.nsh`. See [Custom NSIS script](#custom-nsis-script).",
+                    type: ["null", "string"],
+                },
+                script: {
+                    description: "The path to NSIS script to customize installer. Defaults to `build/installer.nsi`. See [Custom NSIS script](#custom-nsis-script).",
+                    type: ["null", "string"],
+                },
+                license: {
+                    description: 'The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). In addition to `txt, `rtf` and `html` supported (don\'t forget to use `target="_blank"` for links).\n\nMultiple license files in different languages are supported — use lang postfix (e.g. `_de`, `_ru`)). For example, create files `license_de.txt` and `license_en.txt` in the build resources.\nIf OS language is german, `license_de.txt` will be displayed. See map of [language code to name](https://github.com/meikidd/iso-639-1/blob/master/src/data.js).\n\nAppropriate license file will be selected by user OS language.',
+                    type: ["null", "string"],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName} Setup ${version}.${ext}`.",
+                    type: ["null", "string"],
+                },
+                deleteAppDataOnUninstall: {
+                    description: "*one-click installer only.* Whether to delete app data on uninstall.",
+                    default: false,
+                    type: "boolean",
+                },
+                differentialPackage: {
+                    type: "boolean",
+                },
+                displayLanguageSelector: {
+                    description: "Whether to display a language selection dialog. Not recommended (by default will be detected using OS language).",
+                    default: false,
+                    type: "boolean",
+                },
+                installerLanguages: {
+                    description: "The installer languages (e.g. `en_US`, `de_DE`). Change only if you understand what do you do and for what.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                language: {
+                    description: "[LCID Dec](https://msdn.microsoft.com/en-au/goglobal/bb964664.aspx), defaults to `1033`(`English - United States`).",
+                    type: ["null", "string"],
+                },
+                multiLanguageInstaller: {
+                    description: "Whether to create multi-language installer. Defaults to `unicode` option value.",
+                    type: "boolean",
+                },
+                packElevateHelper: {
+                    description: "Whether to pack the elevate executable (required for electron-updater if per-machine installer used or can be used in the future). Ignored if `perMachine` is set to `true`.",
+                    default: true,
+                    type: "boolean",
+                },
+                preCompressedFileExtensions: {
+                    description: "The file extension of files that will be not compressed. Applicable only for `extraResources` and `extraFiles` files.",
+                    default: [".avi", ".mov", ".m4v", ".mp4", ".m4p", ".qt", ".mkv", ".webm", ".vmdk"],
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                unicode: {
+                    description: "Whether to create [Unicode installer](http://nsis.sourceforge.net/Docs/Chapter1.html#intro-unicode).",
+                    default: true,
+                    type: "boolean",
+                },
+                guid: {
+                    description: "See [GUID vs Application Name](../configuration/nsis#guid-vs-application-name).",
+                    type: ["null", "string"],
+                },
+                warningsAsErrors: {
+                    description: "If `warningsAsErrors` is `true` (default): NSIS will treat warnings as errors. If `warningsAsErrors` is `false`: NSIS will allow warnings.",
+                    default: true,
+                    type: "boolean",
+                },
+                useZip: {
+                    default: false,
+                    type: "boolean",
+                },
+                customNsisBinary: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/CustomNsisBinary",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                debugLogging: {
+                    description: "Whether or not to enable NSIS logging for debugging.\nNote: Requires a debug-enabled NSIS build.\nelectron-builder's included `makensis` only supports building debug-enabled NSIS installers on Windows currently\nhttps://github.com/electron-userland/electron-builder/issues/5119#issuecomment-811353612",
+                    type: ["null", "boolean"],
+                },
+                runAfterFinish: {
+                    description: "Whether to run the installed application after finish. For assisted installer corresponding checkbox will be removed.",
+                    default: true,
+                    type: "boolean",
+                },
+                createDesktopShortcut: {
+                    description: "Whether to create desktop shortcut. Set to `always` if to recreate also on reinstall (even if removed by user).",
+                    default: true,
+                    enum: ["always", false, true],
+                },
+                createStartMenuShortcut: {
+                    description: "Whether to create start menu shortcut.",
+                    default: true,
+                    type: "boolean",
+                },
+                menuCategory: {
+                    description: "Whether to create submenu for start menu shortcut and program files directory. If `true`, company name will be used. Or string value.",
+                    default: false,
+                    type: ["string", "boolean"],
+                },
+                shortcutName: {
+                    description: "The name that will be used for all shortcuts. Defaults to the application name.",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        CustomNsisBinary: {
+            type: "object",
+            properties: {
+                url: {
+                    default: "https://github.com/electron-userland/electron-builder-binaries/releases/download",
+                    type: ["null", "string"],
+                },
+                checksum: {
+                    default: "o+YZsXHp8LNihhuk7JsCDhdIgx0MKKK+1b3sGD+4zX5djZULe4/4QMcAsfQ+0r+a8FnwBt7BVBHkIkJHjKQ0sg==",
+                    type: ["null", "string"],
+                },
+                version: {
+                    default: "3.0.4.2",
+                    type: ["null", "string"],
+                },
+            },
+            required: ["url"],
+        },
+        NsisWebOptions: {
+            description: "Web Installer options.",
+            type: "object",
+            properties: {
+                appPackageUrl: {
+                    description: "The application package download URL. Optional — by default computed using publish configuration.\n\nURL like `https://example.com/download/latest` allows web installer to be version independent (installer will download latest application package).\nPlease note — it is [full URL](https://github.com/electron-userland/electron-builder/issues/1810#issuecomment-317650878).\n\nCustom `X-Arch` http header is set to `32` or `64`.",
+                    type: ["null", "string"],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName} Web Setup ${version}.${ext}`.",
+                    type: ["null", "string"],
+                },
+                oneClick: {
+                    description: "Whether to create one-click installer or assisted.",
+                    default: true,
+                    type: "boolean",
+                },
+                perMachine: {
+                    description: "Whether to show install mode installer page (choice per-machine or per-user) for assisted installer. Or whether installation always per all users (per-machine).\n\nIf `oneClick` is `true` (default): Whether to install per all users (per-machine).\n\nIf `oneClick` is `false` and `perMachine` is `true`: no install mode installer page, always install per-machine.\n\nIf `oneClick` is `false` and `perMachine` is `false` (default): install mode installer page.",
+                    default: false,
+                    type: "boolean",
+                },
+                allowElevation: {
+                    description: "*assisted installer only.* Allow requesting for elevation. If false, user will have to restart installer with elevated permissions.",
+                    default: true,
+                    type: "boolean",
+                },
+                allowToChangeInstallationDirectory: {
+                    description: "*assisted installer only.* Whether to allow user to change installation directory.",
+                    default: false,
+                    type: "boolean",
+                },
+                installerIcon: {
+                    description: "The path to installer icon, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerIcon.ico` or application icon.",
+                    type: ["null", "string"],
+                },
+                uninstallerIcon: {
+                    description: "The path to uninstaller icon, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/uninstallerIcon.ico` or application icon.",
+                    type: ["null", "string"],
+                },
+                installerHeader: {
+                    description: "*assisted installer only.* `MUI_HEADERIMAGE`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.",
+                    default: "build/installerHeader.bmp",
+                    type: ["null", "string"],
+                },
+                installerHeaderIcon: {
+                    description: "*one-click installer only.* The path to header icon (above the progress bar), relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerHeaderIcon.ico` or application icon.",
+                    type: ["null", "string"],
+                },
+                installerSidebar: {
+                    description: "*assisted installer only.* `MUI_WELCOMEFINISHPAGE_BITMAP`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerSidebar.bmp` or `${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp`. Image size 164 × 314 pixels.",
+                    type: ["null", "string"],
+                },
+                uninstallerSidebar: {
+                    description: "*assisted installer only.* `MUI_UNWELCOMEFINISHPAGE_BITMAP`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `installerSidebar` option or `build/uninstallerSidebar.bmp` or `build/installerSidebar.bmp` or `${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp`",
+                    type: ["null", "string"],
+                },
+                uninstallDisplayName: {
+                    description: "The uninstaller display name in the control panel.",
+                    default: "${productName} ${version}",
+                    type: "string",
+                },
+                include: {
+                    description: "The path to NSIS include script to customize installer. Defaults to `build/installer.nsh`. See [Custom NSIS script](#custom-nsis-script).",
+                    type: ["null", "string"],
+                },
+                script: {
+                    description: "The path to NSIS script to customize installer. Defaults to `build/installer.nsi`. See [Custom NSIS script](#custom-nsis-script).",
+                    type: ["null", "string"],
+                },
+                license: {
+                    description: 'The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). In addition to `txt, `rtf` and `html` supported (don\'t forget to use `target="_blank"` for links).\n\nMultiple license files in different languages are supported — use lang postfix (e.g. `_de`, `_ru`)). For example, create files `license_de.txt` and `license_en.txt` in the build resources.\nIf OS language is german, `license_de.txt` will be displayed. See map of [language code to name](https://github.com/meikidd/iso-639-1/blob/master/src/data.js).\n\nAppropriate license file will be selected by user OS language.',
+                    type: ["null", "string"],
+                },
+                deleteAppDataOnUninstall: {
+                    description: "*one-click installer only.* Whether to delete app data on uninstall.",
+                    default: false,
+                    type: "boolean",
+                },
+                differentialPackage: {
+                    type: "boolean",
+                },
+                displayLanguageSelector: {
+                    description: "Whether to display a language selection dialog. Not recommended (by default will be detected using OS language).",
+                    default: false,
+                    type: "boolean",
+                },
+                installerLanguages: {
+                    description: "The installer languages (e.g. `en_US`, `de_DE`). Change only if you understand what do you do and for what.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                language: {
+                    description: "[LCID Dec](https://msdn.microsoft.com/en-au/goglobal/bb964664.aspx), defaults to `1033`(`English - United States`).",
+                    type: ["null", "string"],
+                },
+                multiLanguageInstaller: {
+                    description: "Whether to create multi-language installer. Defaults to `unicode` option value.",
+                    type: "boolean",
+                },
+                packElevateHelper: {
+                    description: "Whether to pack the elevate executable (required for electron-updater if per-machine installer used or can be used in the future). Ignored if `perMachine` is set to `true`.",
+                    default: true,
+                    type: "boolean",
+                },
+                preCompressedFileExtensions: {
+                    description: "The file extension of files that will be not compressed. Applicable only for `extraResources` and `extraFiles` files.",
+                    default: [".avi", ".mov", ".m4v", ".mp4", ".m4p", ".qt", ".mkv", ".webm", ".vmdk"],
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                unicode: {
+                    description: "Whether to create [Unicode installer](http://nsis.sourceforge.net/Docs/Chapter1.html#intro-unicode).",
+                    default: true,
+                    type: "boolean",
+                },
+                guid: {
+                    description: "See [GUID vs Application Name](../configuration/nsis#guid-vs-application-name).",
+                    type: ["null", "string"],
+                },
+                warningsAsErrors: {
+                    description: "If `warningsAsErrors` is `true` (default): NSIS will treat warnings as errors. If `warningsAsErrors` is `false`: NSIS will allow warnings.",
+                    default: true,
+                    type: "boolean",
+                },
+                useZip: {
+                    default: false,
+                    type: "boolean",
+                },
+                customNsisBinary: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/CustomNsisBinary",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                debugLogging: {
+                    description: "Whether or not to enable NSIS logging for debugging.\nNote: Requires a debug-enabled NSIS build.\nelectron-builder's included `makensis` only supports building debug-enabled NSIS installers on Windows currently\nhttps://github.com/electron-userland/electron-builder/issues/5119#issuecomment-811353612",
+                    type: ["null", "boolean"],
+                },
+                runAfterFinish: {
+                    description: "Whether to run the installed application after finish. For assisted installer corresponding checkbox will be removed.",
+                    default: true,
+                    type: "boolean",
+                },
+                createDesktopShortcut: {
+                    description: "Whether to create desktop shortcut. Set to `always` if to recreate also on reinstall (even if removed by user).",
+                    default: true,
+                    enum: ["always", false, true],
+                },
+                createStartMenuShortcut: {
+                    description: "Whether to create start menu shortcut.",
+                    default: true,
+                    type: "boolean",
+                },
+                menuCategory: {
+                    description: "Whether to create submenu for start menu shortcut and program files directory. If `true`, company name will be used. Or string value.",
+                    default: false,
+                    type: ["string", "boolean"],
+                },
+                shortcutName: {
+                    description: "The name that will be used for all shortcuts. Defaults to the application name.",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        PortableOptions: {
+            description: "Portable options.",
+            type: "object",
+            properties: {
+                requestExecutionLevel: {
+                    description: "The [requested execution level](http://nsis.sourceforge.net/Reference/RequestExecutionLevel) for Windows.",
+                    default: "user",
+                    enum: ["admin", "highest", "user"],
+                    type: "string",
+                },
+                unpackDirName: {
+                    description: "The unpack directory for the portable app resources.\n\nIf set to a string, it will be the name in [TEMP](https://www.askvg.com/where-does-windows-store-temporary-files-and-how-to-change-temp-folder-location/) directory\nIf set explicitly to `false`, it will use the Windows temp directory ($PLUGINSDIR) that is unique to each launch of the portable application.\n\nDefaults to [uuid](https://github.com/segmentio/ksuid) of build (changed on each build of portable executable).",
+                    type: ["string", "boolean"],
+                },
+                splashImage: {
+                    description: "The image to show while the portable executable is extracting. This image must be a bitmap (`.bmp`) image.",
+                    type: ["null", "string"],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                unicode: {
+                    description: "Whether to create [Unicode installer](http://nsis.sourceforge.net/Docs/Chapter1.html#intro-unicode).",
+                    default: true,
+                    type: "boolean",
+                },
+                guid: {
+                    description: "See [GUID vs Application Name](../configuration/nsis#guid-vs-application-name).",
+                    type: ["null", "string"],
+                },
+                warningsAsErrors: {
+                    description: "If `warningsAsErrors` is `true` (default): NSIS will treat warnings as errors. If `warningsAsErrors` is `false`: NSIS will allow warnings.",
+                    default: true,
+                    type: "boolean",
+                },
+                useZip: {
+                    default: false,
+                    type: "boolean",
+                },
+                customNsisBinary: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/CustomNsisBinary",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                debugLogging: {
+                    description: "Whether or not to enable NSIS logging for debugging.\nNote: Requires a debug-enabled NSIS build.\nelectron-builder's included `makensis` only supports building debug-enabled NSIS installers on Windows currently\nhttps://github.com/electron-userland/electron-builder/issues/5119#issuecomment-811353612",
+                    type: ["null", "boolean"],
+                },
+            },
+        },
+        AppXOptions: {
+            type: "object",
+            properties: {
+                applicationId: {
+                    description: "The application id. Defaults to `identityName`. Can’t start with numbers.",
+                    type: "string",
+                },
+                backgroundColor: {
+                    description: "The background color of the app tile. See [Visual Elements](https://msdn.microsoft.com/en-us/library/windows/apps/br211471.aspx).",
+                    default: "#464646",
+                    type: ["null", "string"],
+                },
+                displayName: {
+                    description: "A friendly name that can be displayed to users. Corresponds to [Properties.DisplayName](https://msdn.microsoft.com/en-us/library/windows/apps/br211432.aspx).\nDefaults to the application product name.",
+                    type: ["null", "string"],
+                },
+                identityName: {
+                    description: "The name. Corresponds to [Identity.Name](https://msdn.microsoft.com/en-us/library/windows/apps/br211441.aspx). Defaults to the [application name](/configuration/configuration#Metadata-name).",
+                    type: ["null", "string"],
+                },
+                publisher: {
+                    description: "The Windows Store publisher. Not used if AppX is build for testing. See [AppX Package Code Signing](#appx-package-code-signing) below.",
+                    type: ["null", "string"],
+                },
+                publisherDisplayName: {
+                    description: "A friendly name for the publisher that can be displayed to users. Corresponds to [Properties.PublisherDisplayName](https://msdn.microsoft.com/en-us/library/windows/apps/br211460.aspx).\nDefaults to company name from the application metadata.",
+                    type: ["null", "string"],
+                },
+                languages: {
+                    description: "The list of [supported languages](https://docs.microsoft.com/en-us/windows/uwp/globalizing/manage-language-and-region#specify-the-supported-languages-in-the-apps-manifest) that will be listed in the Windows Store.\nThe first entry (index 0) will be the default language.\nDefaults to en-US if omitted.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                addAutoLaunchExtension: {
+                    description: "Whether to add auto launch extension. Defaults to `true` if [electron-winstore-auto-launch](https://github.com/felixrieseberg/electron-winstore-auto-launch) in the dependencies.",
+                    type: "boolean",
+                },
+                customExtensionsPath: {
+                    description: "Relative path to custom extensions xml to be included in an `appmanifest.xml`.",
+                    type: "string",
+                },
+                showNameOnTiles: {
+                    description: "Whether to overlay the app's name on top of tile images on the Start screen. Defaults to `false`. (https://docs.microsoft.com/en-us/uwp/schemas/appxpackage/uapmanifestschema/element-uap-shownameontiles) in the dependencies.",
+                    default: false,
+                    type: "boolean",
+                },
+                electronUpdaterAware: {
+                    default: false,
+                    type: "boolean",
+                },
+                setBuildNumber: {
+                    description: "Whether to set build number. See https://github.com/electron-userland/electron-builder/issues/3875",
+                    default: false,
+                    type: "boolean",
+                },
+                makeappxArgs: {
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        MsiOptions: {
+            type: "object",
+            properties: {
+                oneClick: {
+                    description: "One-click installation.",
+                    default: true,
+                    type: "boolean",
+                },
+                upgradeCode: {
+                    description: "The [upgrade code](https://msdn.microsoft.com/en-us/library/windows/desktop/aa372375(v=vs.85).aspx). Optional, by default generated using app id.",
+                    type: ["null", "string"],
+                },
+                warningsAsErrors: {
+                    description: "If `warningsAsErrors` is `true` (default): treat warnings as errors. If `warningsAsErrors` is `false`: allow warnings.",
+                    default: true,
+                    type: "boolean",
+                },
+                additionalWixArgs: {
+                    description: 'Any additional arguments to be passed to the WiX installer compiler, such as `["-ext", "WixUtilExtension"]`',
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                perMachine: {
+                    description: "Whether to install per all users (per-machine).",
+                    default: false,
+                    type: "boolean",
+                },
+                runAfterFinish: {
+                    description: "Whether to run the installed application after finish. For assisted installer corresponding checkbox will be removed.",
+                    default: true,
+                    type: "boolean",
+                },
+                createDesktopShortcut: {
+                    description: "Whether to create desktop shortcut. Set to `always` if to recreate also on reinstall (even if removed by user).",
+                    default: true,
+                    enum: ["always", false, true],
+                },
+                createStartMenuShortcut: {
+                    description: "Whether to create start menu shortcut.",
+                    default: true,
+                    type: "boolean",
+                },
+                menuCategory: {
+                    description: "Whether to create submenu for start menu shortcut and program files directory. If `true`, company name will be used. Or string value.",
+                    default: false,
+                    type: ["string", "boolean"],
+                },
+                shortcutName: {
+                    description: "The name that will be used for all shortcuts. Defaults to the application name.",
+                    type: ["null", "string"],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        SquirrelWindowsOptions: {
+            type: "object",
+            properties: {
+                iconUrl: {
+                    description: "A URL to an ICO file to use as the application icon (displayed in Control Panel > Programs and Features). Defaults to the Electron icon.\n\nPlease note — [local icon file url is not accepted](https://github.com/atom/grunt-electron-installer/issues/73), must be https/http.\n\nIf you don't plan to build windows installer, you can omit it.\nIf your project repository is public on GitHub, it will be `https://github.com/${u}/${p}/blob/master/build/icon.ico?raw=true` by default.",
+                    type: ["null", "string"],
+                },
+                loadingGif: {
+                    description: "The path to a .gif file to display during install. `build/install-spinner.gif` will be used if exists (it is a recommended way to set)\n(otherwise [default](https://github.com/electron/windows-installer/blob/master/resources/install-spinner.gif)).",
+                    type: ["null", "string"],
+                },
+                msi: {
+                    description: "Whether to create an MSI installer. Defaults to `false` (MSI is not created).",
+                    type: "boolean",
+                },
+                remoteReleases: {
+                    description: "A URL to your existing updates. Or `true` to automatically set to your GitHub repository. If given, these will be downloaded to create delta updates.",
+                    type: ["null", "string", "boolean"],
+                },
+                remoteToken: {
+                    description: "Authentication token for remote updates",
+                    type: ["null", "string"],
+                },
+                useAppIdAsId: {
+                    description: "Use `appId` to identify package instead of `name`.",
+                    type: "boolean",
+                },
+                name: {
+                    description: "https://github.com/electron-userland/electron-builder/issues/1743",
+                    type: "string",
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        LinuxConfiguration: {
+            type: "object",
+            properties: {
+                target: {
+                    description: "Target package type: list of `AppImage`, `snap`, `deb`, `rpm`, `freebsd`, `pacman`, `p5p`, `apk`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir`.\n\nelectron-builder [docker image](/multi-platform-build#docker) can be used to build Linux targets on any platform.\n\nPlease [do not put an AppImage into another archive](https://github.com/probonopd/AppImageKit/wiki/Creating-AppImages#common-mistake) like a .zip or .tar.gz.",
+                    default: "AppImage",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/TargetConfiguration",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/TargetConfiguration",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                maintainer: {
+                    description: "The maintainer. Defaults to [author](/configuration/configuration#Metadata-author).",
+                    type: ["null", "string"],
+                },
+                vendor: {
+                    description: "The vendor. Defaults to [author](/configuration/configuration#Metadata-author).",
+                    type: ["null", "string"],
+                },
+                icon: {
+                    description: "The path to icon set directory or one png file, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory. The icon filename must contain the size (e.g. 32x32.png) of the icon.\nBy default will be generated automatically based on the macOS icns file.",
+                    type: "string",
+                },
+                packageCategory: {
+                    description: "backward compatibility + to allow specify fpm-only category for all possible fpm targets in one place",
+                    type: ["null", "string"],
+                },
+                synopsis: {
+                    description: "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
+                    type: ["null", "string"],
+                },
+                description: {
+                    description: "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
+                    type: ["null", "string"],
+                },
+                category: {
+                    description: "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
+                    type: ["null", "string"],
+                },
+                mimeTypes: {
+                    description: "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                desktop: {
+                    description: "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value).",
+                },
+                executableArgs: {
+                    description: "The executable parameters. Pass to executableName",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                appId: {
+                    description: "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
+                    default: "com.electron.${name}",
+                    type: ["null", "string"],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
+                    type: ["null", "string"],
+                },
+                executableName: {
+                    description: "The executable name. Defaults to `productName`.",
+                    type: ["null", "string"],
+                },
+                compression: {
+                    description: "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
+                    default: "normal",
+                    anyOf: [
+                        {
+                            enum: ["maximum", "normal", "store"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                files: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                extraResources: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                extraFiles: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                asar: {
+                    description: "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work.",
+                    default: true,
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/AsarOptions",
+                        },
+                        {
+                            type: ["null", "boolean"],
+                        },
+                    ],
+                },
+                asarUnpack: {
+                    description: "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                fileAssociations: {
+                    description: "The file associations.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileAssociation",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                $ref: "#/definitions/FileAssociation",
+                            },
+                        },
+                    ],
+                },
+                protocols: {
+                    description: "The URL protocol schemes.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/Protocol",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                $ref: "#/definitions/Protocol",
+                            },
+                        },
+                    ],
+                },
+                forceCodeSigning: {
+                    description: "Whether to fail if app will be not code signed.",
+                    type: "boolean",
+                },
+                electronUpdaterCompatibility: {
+                    description: "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                detectUpdateChannel: {
+                    description: "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
+                    default: true,
+                    type: "boolean",
+                },
+                generateUpdatesFilesForAllChannels: {
+                    description: "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
+                    default: false,
+                    type: "boolean",
+                },
+                releaseInfo: {
+                    description: 'The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes="new features"\n```',
+                    $ref: "#/definitions/ReleaseInfo",
+                },
+                cscLink: {
+                    type: ["null", "string"],
+                },
+                cscKeyPassword: {
+                    type: ["null", "string"],
+                },
+                defaultArch: {
+                    type: "string",
+                },
+            },
+        },
+        DebOptions: {
+            type: "object",
+            properties: {
+                depends: {
+                    description: 'Package dependencies. Defaults to `["gconf2", "gconf-service", "libnotify4", "libappindicator1", "libxtst6", "libnss3"]`.',
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                packageCategory: {
+                    description: "The [package category](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Section).",
+                    type: ["null", "string"],
+                },
+                priority: {
+                    description: "The [Priority](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Priority) attribute.",
+                    type: ["null", "string"],
+                },
+                compression: {
+                    description: "The compression type.",
+                    default: "xz",
+                    anyOf: [
+                        {
+                            enum: ["bzip2", "gz", "xz"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                icon: {
+                    type: "string",
+                },
+                packageName: {
+                    description: "The name of the package.",
+                    type: ["null", "string"],
+                },
+                vendor: {
+                    type: ["null", "string"],
+                },
+                maintainer: {
+                    type: ["null", "string"],
+                },
+                afterInstall: {
+                    type: ["null", "string"],
+                },
+                afterRemove: {
+                    type: ["null", "string"],
+                },
+                fpm: {
+                    description: '*Advanced only* The [fpm](https://github.com/jordansissel/fpm/wiki#usage) options.\n\nExample: `["--before-install=build/deb-preinstall.sh", "--after-upgrade=build/deb-postinstall.sh"]`',
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                synopsis: {
+                    description: "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
+                    type: ["null", "string"],
+                },
+                description: {
+                    description: "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
+                    type: ["null", "string"],
+                },
+                category: {
+                    description: "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
+                    type: ["null", "string"],
+                },
+                mimeTypes: {
+                    description: "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                desktop: {
+                    description: "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value).",
+                },
+                executableArgs: {
+                    description: "The executable parameters. Pass to executableName",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        SnapOptions: {
+            type: "object",
+            properties: {
+                confinement: {
+                    description: "The type of [confinement](https://snapcraft.io/docs/reference/confinement) supported by the snap.",
+                    default: "strict",
+                    anyOf: [
+                        {
+                            enum: ["classic", "devmode", "strict"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                environment: {
+                    description: 'The custom environment. Defaults to `{"TMPDIR: "$XDG_RUNTIME_DIR"}`. If you set custom, it will be merged with default.',
+                    anyOf: [
+                        {
+                            type: "object",
+                            additionalProperties: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                summary: {
+                    description: "The 78 character long summary. Defaults to [productName](/configuration/configuration#Configuration-productName).",
+                    type: ["null", "string"],
+                },
+                grade: {
+                    description: "The quality grade of the snap. It can be either `devel` (i.e. a development version of the snap, so not to be published to the “stable” or “candidate” channels) or “stable” (i.e. a stable release or release candidate, which can be released to all channels).",
+                    default: "stable",
+                    anyOf: [
+                        {
+                            enum: ["devel", "stable"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                assumes: {
+                    description: "The list of features that must be supported by the core in order for this snap to install.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                buildPackages: {
+                    description: "The list of debian packages needs to be installed for building this snap.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                stagePackages: {
+                    description: 'The list of Ubuntu packages to use that are needed to support the `app` part creation. Like `depends` for `deb`.\nDefaults to `["libnspr4", "libnss3", "libxss1", "libappindicator3-1", "libsecret-1-0"]`.\n\nIf list contains `default`, it will be replaced to default list, so, `["default", "foo"]` can be used to add custom package `foo` in addition to defaults.',
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                hooks: {
+                    description: "The [hooks](https://docs.snapcraft.io/build-snaps/hooks) directory, relative to `build` (build resources directory).",
+                    default: "build/snap-hooks",
+                    type: ["null", "string"],
+                },
+                plugs: {
+                    description: 'The list of [plugs](https://snapcraft.io/docs/reference/interfaces).\nDefaults to `["desktop", "desktop-legacy", "home", "x11", "unity7", "browser-support", "network", "gsettings", "audio-playback", "pulseaudio", "opengl"]`.\n\nIf list contains `default`, it will be replaced to default list, so, `["default", "foo"]` can be used to add custom plug `foo` in addition to defaults.\n\nAdditional attributes can be specified using object instead of just name of plug:\n```\n[\n {\n   "browser-sandbox": {\n     "interface": "browser-support",\n     "allow-sandbox": true\n   },\n },\n "another-simple-plug-name"\n]\n```',
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/PlugDescriptor",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/PlugDescriptor",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                slots: {
+                    description: 'The list of [slots](https://snapcraft.io/docs/reference/interfaces).\n\nAdditional attributes can be specified using object instead of just name of slot:\n```\n[\n {\n   "mpris": {\n     "name": "chromium"\n   },\n }\n]\n\nIn case you want your application to be a compliant MPris player, you will need to definie\nThe mpris slot with "chromium" name.\nThis electron has it [hardcoded](https://source.chromium.org/chromium/chromium/src/+/master:components/system_media_controls/linux/system_media_controls_linux.cc;l=51;bpv=0;bpt=1),\nand we need to pass this name so snap [will allow it](https://forum.snapcraft.io/t/unable-to-use-mpris-interface/15360/7) in strict confinement.',
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/PlugDescriptor",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/SlotDescriptor",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                after: {
+                    description: 'Specifies any [parts](https://snapcraft.io/docs/reference/parts) that should be built before this part.\nDefaults to `["desktop-gtk2""]`.\n\nIf list contains `default`, it will be replaced to default list, so, `["default", "foo"]` can be used to add custom parts `foo` in addition to defaults.',
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                useTemplateApp: {
+                    description: "Whether to use template snap. Defaults to `true` if `stagePackages` not specified.",
+                    type: "boolean",
+                },
+                autoStart: {
+                    description: "Whether or not the snap should automatically start on login.",
+                    default: false,
+                    type: "boolean",
+                },
+                layout: {
+                    description: "Specifies any files to make accessible from locations such as `/usr`, `/var`, and `/etc`. See [snap layouts](https://snapcraft.io/docs/snap-layouts) to learn more.",
+                    anyOf: [
+                        {
+                            type: "object",
+                            additionalProperties: {
+                                type: "object",
+                                additionalProperties: {
+                                    type: "string",
+                                },
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                appPartStage: {
+                    description: "Specifies which files from the app part to stage and which to exclude. Individual files, directories, wildcards, globstars, and exclusions are accepted. See [Snapcraft filesets](https://snapcraft.io/docs/snapcraft-filesets) to learn more about the format.\n\nThe defaults can be found in [snap.ts](https://github.com/electron-userland/electron-builder/blob/master/packages/app-builder-lib/templates/snap/snapcraft.yaml#L29).",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                title: {
+                    description: "An optional title for the snap, may contain uppercase letters and spaces. Defaults to `productName`. See [snap format documentation](https://snapcraft.io/docs/snap-format).",
+                    type: ["null", "string"],
+                },
+                synopsis: {
+                    description: "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
+                    type: ["null", "string"],
+                },
+                description: {
+                    description: "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
+                    type: ["null", "string"],
+                },
+                category: {
+                    description: "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
+                    type: ["null", "string"],
+                },
+                mimeTypes: {
+                    description: "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                desktop: {
+                    description: "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value).",
+                },
+                executableArgs: {
+                    description: "The executable parameters. Pass to executableName",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        PlugDescriptor: {
+            type: "object",
+            additionalProperties: {
+                anyOf: [
+                    {
+                        type: "object",
+                        additionalProperties: {},
+                    },
+                    {
+                        type: "null",
+                    },
+                ],
+            },
+        },
+        SlotDescriptor: {
+            type: "object",
+            additionalProperties: {
+                anyOf: [
+                    {
+                        type: "object",
+                        additionalProperties: {},
+                    },
+                    {
+                        type: "null",
+                    },
+                ],
+            },
+        },
+        AppImageOptions: {
+            type: "object",
+            properties: {
+                license: {
+                    description: "The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). Only plain text is supported.",
+                    type: ["null", "string"],
+                },
+                synopsis: {
+                    description: "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
+                    type: ["null", "string"],
+                },
+                description: {
+                    description: "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
+                    type: ["null", "string"],
+                },
+                category: {
+                    description: "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
+                    type: ["null", "string"],
+                },
+                mimeTypes: {
+                    description: "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                desktop: {
+                    description: "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value).",
+                },
+                executableArgs: {
+                    description: "The executable parameters. Pass to executableName",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        FlatpakOptions: {
+            type: "object",
+            properties: {
+                license: {
+                    description: "The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). Only plain text is supported.",
+                    type: ["null", "string"],
+                },
+                runtime: {
+                    description: "The name of the runtime that the application uses. Defaults to `org.freedesktop.Platform`.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    type: "string",
+                },
+                runtimeVersion: {
+                    description: "The version of the runtime that the application uses. Defaults to `20.08`.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    type: "string",
+                },
+                sdk: {
+                    description: "The name of the development runtime that the application builds with. Defaults to `org.freedesktop.Sdk`.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    type: "string",
+                },
+                base: {
+                    description: "Start with the files from the specified application. This can be used to create applications that extend another application.\nDefaults to [org.electronjs.Electron2.BaseApp](https://github.com/flathub/org.electronjs.Electron2.BaseApp).\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    type: "string",
+                },
+                baseVersion: {
+                    description: "Use this specific version of the application specified in base. Defaults to `20.08`.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    type: "string",
+                },
+                branch: {
+                    description: "The branch to use when exporting the application. Defaults to `master`.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    type: "string",
+                },
+                finishArgs: {
+                    description: 'An array of arguments passed to the flatpak build-finish command. Defaults to:\n```json\n[\n  // Wayland/X11 Rendering\n  "--socket=wayland",\n  "--socket=x11",\n  "--share=ipc",\n  // Open GL\n  "--device=dri",\n  // Audio output\n  "--socket=pulseaudio",\n  // Read/write home directory access\n  "--filesystem=home",\n  // Allow communication with network\n  "--share=network",\n  // System notifications with libnotify\n  "--talk-name=org.freedesktop.Notifications",\n]\n```\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).',
+                    type: "array",
+                    items: {
+                        type: "string",
+                    },
+                },
+                modules: {
+                    description: "An array of objects specifying the modules to be built in order.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    type: "array",
+                    items: {},
+                },
+                files: {
+                    description: "Files to copy directly into the app. Should be a list of [source, dest] tuples. Source should be a relative/absolute path to a file/directory to copy into the flatpak, and dest should be the path inside the app install prefix (e.g. /share/applications/).\n\nSee [@malept/flatpak-bundler documentation](https://github.com/malept/flatpak-bundler#build-options).",
+                    type: "array",
+                    items: {
+                        type: "array",
+                        items: [
+                            {
+                                type: "string",
+                            },
+                            {
+                                type: "string",
+                            },
+                        ],
+                        minItems: 2,
+                        maxItems: 2,
+                    },
+                },
+                symlinks: {
+                    description: "Symlinks to create in the app files. Should be a list of [target, location] symlink tuples. Target can be either a relative or absolute path inside the app install prefix, and location should be a absolute path inside the prefix to create the symlink at.\n\nSee [@malept/flatpak-bundler documentation](https://github.com/malept/flatpak-bundler#build-options).",
+                    type: "array",
+                    items: {
+                        type: "array",
+                        items: [
+                            {
+                                type: "string",
+                            },
+                            {
+                                type: "string",
+                            },
+                        ],
+                        minItems: 2,
+                        maxItems: 2,
+                    },
+                },
+                useWaylandFlags: {
+                    description: "Whether to enable the Wayland specific flags (`--enable-features=UseOzonePlatform --ozone-platform=wayland`) in the wrapper script. These flags are only available starting with Electron version 12. Defaults to `false`.",
+                    type: "boolean",
+                },
+                synopsis: {
+                    description: "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
+                    type: ["null", "string"],
+                },
+                description: {
+                    description: "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
+                    type: ["null", "string"],
+                },
+                category: {
+                    description: "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
+                    type: ["null", "string"],
+                },
+                mimeTypes: {
+                    description: "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                desktop: {
+                    description: "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value).",
+                },
+                executableArgs: {
+                    description: "The executable parameters. Pass to executableName",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        LinuxTargetSpecificOptions: {
+            type: "object",
+            properties: {
+                depends: {
+                    description: "Package dependencies.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                compression: {
+                    description: "The compression type.",
+                    default: "xz",
+                    anyOf: [
+                        {
+                            enum: ["bzip2", "gz", "xz"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                icon: {
+                    type: "string",
+                },
+                packageCategory: {
+                    description: "The package category.",
+                    type: ["null", "string"],
+                },
+                packageName: {
+                    description: "The name of the package.",
+                    type: ["null", "string"],
+                },
+                vendor: {
+                    type: ["null", "string"],
+                },
+                maintainer: {
+                    type: ["null", "string"],
+                },
+                afterInstall: {
+                    type: ["null", "string"],
+                },
+                afterRemove: {
+                    type: ["null", "string"],
+                },
+                fpm: {
+                    description: '*Advanced only* The [fpm](https://github.com/jordansissel/fpm/wiki#usage) options.\n\nExample: `["--before-install=build/deb-preinstall.sh", "--after-upgrade=build/deb-postinstall.sh"]`',
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                synopsis: {
+                    description: "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
+                    type: ["null", "string"],
+                },
+                description: {
+                    description: "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
+                    type: ["null", "string"],
+                },
+                category: {
+                    description: "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
+                    type: ["null", "string"],
+                },
+                mimeTypes: {
+                    description: "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                desktop: {
+                    description: "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value).",
+                },
+                executableArgs: {
+                    description: "The executable parameters. Pass to executableName",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        ElectronDownloadOptions: {
+            type: "object",
+            properties: {
+                version: {
+                    type: "string",
+                },
+                cache: {
+                    description: "The [cache location](https://github.com/electron-userland/electron-download#cache-location).",
+                    type: ["null", "string"],
+                },
+                mirror: {
+                    description: "The mirror.",
+                    type: ["null", "string"],
+                },
+                customDir: {
+                    type: ["null", "string"],
+                },
+                customFilename: {
+                    type: ["null", "string"],
+                },
+                strictSSL: {
+                    type: "boolean",
+                },
+                isVerifyChecksum: {
+                    type: "boolean",
+                },
+                platform: {
+                    enum: ["darwin", "linux", "mas", "win32"],
+                    type: "string",
+                },
+                arch: {
+                    type: "string",
+                },
+            },
+        },
+        ElectronBrandingOptions: {
+            description: "Electron distributables branding options.",
+            type: "object",
+            properties: {
+                projectName: {
+                    type: "string",
+                },
+                productName: {
+                    type: "string",
+                },
+            },
+        },
+    },
+    $schema: "http://json-schema.org/draft-07/schema#",
+};
+//# sourceMappingURL=configuration.jsc.js.map
\ No newline at end of file
diff --git a/node_modules/app-builder-lib/out/schema/configuration.json b/node_modules/app-builder-lib/out/schema/configuration.json
new file mode 100644
index 0000000..838d7a6
--- /dev/null
+++ b/node_modules/app-builder-lib/out/schema/configuration.json
@@ -0,0 +1,6757 @@
+{
+    "description": "Configuration Options",
+    "type": "object",
+    "properties": {
+        "appId": {
+            "description": "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
+            "default": "com.electron.${name}",
+            "type": [
+                "null",
+                "string"
+            ]
+        },
+        "productName": {
+            "description": "As [name](#Metadata-name), but allows you to specify a product name for your executable which contains spaces and other special characters not allowed in the [name property](https://docs.npmjs.com/files/package.json#name).",
+            "type": [
+                "null",
+                "string"
+            ]
+        },
+        "copyright": {
+            "description": "The human-readable copyright line for the app.",
+            "default": "Copyright © year ${author}",
+            "type": [
+                "null",
+                "string"
+            ]
+        },
+        "directories": {
+            "anyOf": [
+                {
+                    "$ref": "#/definitions/MetadataDirectories"
+                },
+                {
+                    "type": "null"
+                }
+            ]
+        },
+        "mac": {
+            "description": "Options related to how build macOS targets.",
+            "anyOf": [
+                {
+                    "$ref": "#/definitions/MacConfiguration"
+                },
+                {
+                    "type": "null"
+                }
+            ]
+        },
+        "mas": {
+            "description": "MAS (Mac Application Store) options.",
+            "anyOf": [
+                {
+                    "$ref": "#/definitions/MasConfiguration"
+                },
+                {
+                    "type": "null"
+                }
+            ]
+        },
+        "masDev": {
+            "description": "MAS (Mac Application Store) development options (`mas-dev` target).",
+            "anyOf": [
+                {
+                    "$ref": "#/definitions/MasConfiguration"
+                },
+                {
+                    "type": "null"
+                }
+            ]
+        },
+        "dmg": {
+            "description": "macOS DMG options.",
+            "anyOf": [
+                {
+                    "$ref": "#/definitions/DmgOptions"
+                },
+                {
+                    "type": "null"
+                }
+            ]
+        },
+        "pkg": {
+            "description": "macOS PKG options.",
+            "anyOf": [
+                {
+                    "$ref": "#/definitions/PkgOptions"
+                },
+                {
+                    "type": "null"
+                }
+            ]
+        },
+        "win": {
+            "description": "Options related to how build Windows targets.",
+            "anyOf": [
+                {
+                    "$ref": "#/definitions/WindowsConfiguration"
+                },
+                {
+                    "type": "null"
+                }
+            ]
+        },
+        "nsis": {
+            "anyOf": [
+                {
+                    "$ref": "#/definitions/NsisOptions"
+                },
+                {
+                    "type": "null"
+                }
+            ]
+        },
+        "nsisWeb": {
+            "anyOf": [
+                {
+                    "$ref": "#/definitions/NsisWebOptions"
+                },
+                {
+                    "type": "null"
+                }
+            ]
+        },
+        "portable": {
+            "anyOf": [
+                {
+                    "$ref": "#/definitions/PortableOptions"
+                },
+                {
+                    "type": "null"
+                }
+            ]
+        },
+        "appx": {
+            "anyOf": [
+                {
+                    "$ref": "#/definitions/AppXOptions"
+                },
+                {
+                    "type": "null"
+                }
+            ]
+        },
+        "msi": {
+            "anyOf": [
+                {
+                    "$ref": "#/definitions/MsiOptions"
+                },
+                {
+                    "type": "null"
+                }
+            ]
+        },
+        "squirrelWindows": {
+            "anyOf": [
+                {
+                    "$ref": "#/definitions/SquirrelWindowsOptions"
+                },
+                {
+                    "type": "null"
+                }
+            ]
+        },
+        "linux": {
+            "description": "Options related to how build Linux targets.",
+            "anyOf": [
+                {
+                    "$ref": "#/definitions/LinuxConfiguration"
+                },
+                {
+                    "type": "null"
+                }
+            ]
+        },
+        "deb": {
+            "description": "Debian package options.",
+            "anyOf": [
+                {
+                    "$ref": "#/definitions/DebOptions"
+                },
+                {
+                    "type": "null"
+                }
+            ]
+        },
+        "snap": {
+            "description": "Snap options.",
+            "anyOf": [
+                {
+                    "$ref": "#/definitions/SnapOptions"
+                },
+                {
+                    "type": "null"
+                }
+            ]
+        },
+        "appImage": {
+            "description": "AppImage options.",
+            "anyOf": [
+                {
+                    "$ref": "#/definitions/AppImageOptions"
+                },
+                {
+                    "type": "null"
+                }
+            ]
+        },
+        "flatpak": {
+            "description": "Flatpak options.",
+            "anyOf": [
+                {
+                    "$ref": "#/definitions/FlatpakOptions"
+                },
+                {
+                    "type": "null"
+                }
+            ]
+        },
+        "pacman": {
+            "anyOf": [
+                {
+                    "$ref": "#/definitions/LinuxTargetSpecificOptions"
+                },
+                {
+                    "type": "null"
+                }
+            ]
+        },
+        "rpm": {
+            "anyOf": [
+                {
+                    "$ref": "#/definitions/LinuxTargetSpecificOptions"
+                },
+                {
+                    "type": "null"
+                }
+            ]
+        },
+        "freebsd": {
+            "anyOf": [
+                {
+                    "$ref": "#/definitions/LinuxTargetSpecificOptions"
+                },
+                {
+                    "type": "null"
+                }
+            ]
+        },
+        "p5p": {
+            "anyOf": [
+                {
+                    "$ref": "#/definitions/LinuxTargetSpecificOptions"
+                },
+                {
+                    "type": "null"
+                }
+            ]
+        },
+        "apk": {
+            "anyOf": [
+                {
+                    "$ref": "#/definitions/LinuxTargetSpecificOptions"
+                },
+                {
+                    "type": "null"
+                }
+            ]
+        },
+        "includeSubNodeModules": {
+            "description": "Whether to include *all* of the submodules node_modules directories",
+            "default": false,
+            "type": "boolean"
+        },
+        "buildDependenciesFromSource": {
+            "description": "Whether to build the application native dependencies from source.",
+            "default": false,
+            "type": "boolean"
+        },
+        "nodeGypRebuild": {
+            "description": "Whether to execute `node-gyp rebuild` before starting to package the app.\n\nDon't [use](https://github.com/electron-userland/electron-builder/issues/683#issuecomment-241214075) [npm](http://electron.atom.io/docs/tutorial/using-native-node-modules/#using-npm) (neither `.npmrc`) for configuring electron headers. Use `electron-builder node-gyp-rebuild` instead.",
+            "default": false,
+            "type": "boolean"
+        },
+        "npmArgs": {
+            "description": "Additional command line arguments to use when installing app native deps.",
+            "anyOf": [
+                {
+                    "type": "array",
+                    "items": {
+                        "type": "string"
+                    }
+                },
+                {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                }
+            ]
+        },
+        "npmRebuild": {
+            "description": "Whether to [rebuild](https://docs.npmjs.com/cli/rebuild) native dependencies before starting to package the app.",
+            "default": true,
+            "type": "boolean"
+        },
+        "buildVersion": {
+            "description": "The build version. Maps to the `CFBundleVersion` on macOS, and `FileVersion` metadata property on Windows. Defaults to the `version`.\nIf `TRAVIS_BUILD_NUMBER` or `APPVEYOR_BUILD_NUMBER` or `CIRCLE_BUILD_NUM` or `BUILD_NUMBER` or `bamboo.buildNumber` or `CI_PIPELINE_IID` env defined, it will be used as a build version (`version.build_number`).",
+            "type": [
+                "null",
+                "string"
+            ]
+        },
+        "electronCompile": {
+            "description": "Whether to use [electron-compile](http://github.com/electron/electron-compile) to compile app. Defaults to `true` if `electron-compile` in the dependencies. And `false` if in the `devDependencies` or doesn't specified.",
+            "type": "boolean"
+        },
+        "electronDist": {
+            "description": "Returns the path to custom Electron build (e.g. `~/electron/out/R`). Zip files must follow the pattern `electron-v${version}-${platformName}-${arch}.zip`, otherwise it will be assumed to be an unpacked Electron app directory",
+            "type": [
+                "string",
+                "object"
+            ]
+        },
+        "electronDownload": {
+            "description": "The [electron-download](https://github.com/electron-userland/electron-download#usage) options.",
+            "$ref": "#/definitions/ElectronDownloadOptions"
+        },
+        "electronBranding": {
+            "description": "The branding used by Electron's distributables. This is needed if a fork has modified Electron's BRANDING.json file.",
+            "$ref": "#/definitions/ElectronBrandingOptions"
+        },
+        "electronVersion": {
+            "description": "The version of electron you are packaging for. Defaults to version of `electron`, `electron-prebuilt` or `electron-prebuilt-compile` dependency.",
+            "type": [
+                "null",
+                "string"
+            ]
+        },
+        "extends": {
+            "description": "The name of a built-in configuration preset (currently, only `react-cra` is supported) or any number of paths to config files (relative to project dir).\n\nThe latter allows to mixin a config from multiple other configs, as if you `Object.assign` them, but properly combine `files` glob patterns.\n\nIf `react-scripts` in the app dependencies, `react-cra` will be set automatically. Set to `null` to disable automatic detection.",
+            "anyOf": [
+                {
+                    "type": "array",
+                    "items": {
+                        "type": "string"
+                    }
+                },
+                {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                }
+            ]
+        },
+        "extraMetadata": {
+            "description": "Inject properties to `package.json`."
+        },
+        "forceCodeSigning": {
+            "description": "Whether to fail if the application is not signed (to prevent unsigned app if code signing configuration is not correct).",
+            "default": false,
+            "type": "boolean"
+        },
+        "nodeVersion": {
+            "description": "*libui-based frameworks only* The version of NodeJS you are packaging for.\nYou can set it to `current` to set the Node.js version that you use to run.",
+            "type": [
+                "null",
+                "string"
+            ]
+        },
+        "launchUiVersion": {
+            "description": "*libui-based frameworks only* The version of LaunchUI you are packaging for. Applicable for Windows only. Defaults to version suitable for used framework version.",
+            "type": [
+                "null",
+                "string",
+                "boolean"
+            ]
+        },
+        "framework": {
+            "description": "The framework name. One of `electron`, `proton`, `libui`. Defaults to `electron`.",
+            "type": [
+                "null",
+                "string"
+            ]
+        },
+        "afterPack": {
+            "description": "The function (or path to file or module id) to be [run after pack](#afterpack) (but before pack into distributable format and sign).",
+            "type": [
+                "null",
+                "string",
+                "object"
+            ]
+        },
+        "afterSign": {
+            "description": "The function (or path to file or module id) to be [run after pack and sign](#aftersign) (but before pack into distributable format).",
+            "type": [
+                "null",
+                "string",
+                "object"
+            ]
+        },
+        "artifactBuildStarted": {
+            "description": "The function (or path to file or module id) to be run on artifact build start.",
+            "type": [
+                "null",
+                "string",
+                "object"
+            ]
+        },
+        "artifactBuildCompleted": {
+            "description": "The function (or path to file or module id) to be run on artifact build completed.",
+            "type": [
+                "null",
+                "string",
+                "object"
+            ]
+        },
+        "afterAllArtifactBuild": {
+            "description": "The function (or path to file or module id) to be [run after all artifacts are build](#afterAllArtifactBuild).",
+            "type": [
+                "null",
+                "string",
+                "object"
+            ]
+        },
+        "msiProjectCreated": {
+            "description": "MSI project created on disk - not packed into .msi package yet.",
+            "type": [
+                "null",
+                "string",
+                "object"
+            ]
+        },
+        "appxManifestCreated": {
+            "description": "Appx manifest created on disk - not packed into .appx package yet.",
+            "type": [
+                "null",
+                "string",
+                "object"
+            ]
+        },
+        "onNodeModuleFile": {
+            "description": "The function (or path to file or module id) to be [run on each node module](#onnodemodulefile) file.",
+            "type": [
+                "null",
+                "string",
+                "object"
+            ]
+        },
+        "beforeBuild": {
+            "description": "The function (or path to file or module id) to be run before dependencies are installed or rebuilt. Works when `npmRebuild` is set to `true`. Resolving to `false` will skip dependencies install or rebuild.\n\nIf provided and `node_modules` are missing, it will not invoke production dependencies check.",
+            "type": [
+                "null",
+                "string",
+                "object"
+            ]
+        },
+        "remoteBuild": {
+            "description": "Whether to build using Electron Build Service if target not supported on current OS.",
+            "default": true,
+            "type": "boolean"
+        },
+        "includePdb": {
+            "description": "Whether to include PDB files.",
+            "default": false,
+            "type": "boolean"
+        },
+        "removePackageScripts": {
+            "description": "Whether to remove `scripts` field from `package.json` files.",
+            "default": true,
+            "type": "boolean"
+        },
+        "removePackageKeywords": {
+            "description": "Whether to remove `keywords` field from `package.json` files.",
+            "default": true,
+            "type": "boolean"
+        },
+        "artifactName": {
+            "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
+            "type": [
+                "null",
+                "string"
+            ]
+        },
+        "executableName": {
+            "description": "The executable name. Defaults to `productName`.",
+            "type": [
+                "null",
+                "string"
+            ]
+        },
+        "compression": {
+            "description": "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
+            "default": "normal",
+            "anyOf": [
+                {
+                    "enum": [
+                        "maximum",
+                        "normal",
+                        "store"
+                    ],
+                    "type": "string"
+                },
+                {
+                    "type": "null"
+                }
+            ]
+        },
+        "files": {
+            "anyOf": [
+                {
+                    "$ref": "#/definitions/FileSet"
+                },
+                {
+                    "type": "array",
+                    "items": {
+                        "anyOf": [
+                            {
+                                "$ref": "#/definitions/FileSet"
+                            },
+                            {
+                                "type": "string"
+                            }
+                        ]
+                    }
+                },
+                {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                }
+            ]
+        },
+        "extraResources": {
+            "anyOf": [
+                {
+                    "$ref": "#/definitions/FileSet"
+                },
+                {
+                    "type": "array",
+                    "items": {
+                        "anyOf": [
+                            {
+                                "$ref": "#/definitions/FileSet"
+                            },
+                            {
+                                "type": "string"
+                            }
+                        ]
+                    }
+                },
+                {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                }
+            ]
+        },
+        "extraFiles": {
+            "anyOf": [
+                {
+                    "$ref": "#/definitions/FileSet"
+                },
+                {
+                    "type": "array",
+                    "items": {
+                        "anyOf": [
+                            {
+                                "$ref": "#/definitions/FileSet"
+                            },
+                            {
+                                "type": "string"
+                            }
+                        ]
+                    }
+                },
+                {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                }
+            ]
+        },
+        "asar": {
+            "description": "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work.",
+            "default": true,
+            "anyOf": [
+                {
+                    "$ref": "#/definitions/AsarOptions"
+                },
+                {
+                    "type": [
+                        "null",
+                        "boolean"
+                    ]
+                }
+            ]
+        },
+        "asarUnpack": {
+            "description": "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.",
+            "anyOf": [
+                {
+                    "type": "array",
+                    "items": {
+                        "type": "string"
+                    }
+                },
+                {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                }
+            ]
+        },
+        "icon": {
+            "type": [
+                "null",
+                "string"
+            ]
+        },
+        "fileAssociations": {
+            "description": "The file associations.",
+            "anyOf": [
+                {
+                    "$ref": "#/definitions/FileAssociation"
+                },
+                {
+                    "type": "array",
+                    "items": {
+                        "$ref": "#/definitions/FileAssociation"
+                    }
+                }
+            ]
+        },
+        "protocols": {
+            "description": "The URL protocol schemes.",
+            "anyOf": [
+                {
+                    "$ref": "#/definitions/Protocol"
+                },
+                {
+                    "type": "array",
+                    "items": {
+                        "$ref": "#/definitions/Protocol"
+                    }
+                }
+            ]
+        },
+        "electronUpdaterCompatibility": {
+            "description": "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
+            "type": [
+                "null",
+                "string"
+            ]
+        },
+        "publish": {
+            "anyOf": [
+                {
+                    "$ref": "#/definitions/GithubOptions"
+                },
+                {
+                    "$ref": "#/definitions/S3Options"
+                },
+                {
+                    "$ref": "#/definitions/SpacesOptions"
+                },
+                {
+                    "$ref": "#/definitions/GenericServerOptions"
+                },
+                {
+                    "$ref": "#/definitions/BintrayOptions"
+                },
+                {
+                    "$ref": "#/definitions/CustomPublishOptions"
+                },
+                {
+                    "$ref": "#/definitions/KeygenOptions"
+                },
+                {
+                    "$ref": "#/definitions/SnapStoreOptions"
+                },
+                {
+                    "type": "array",
+                    "items": {
+                        "anyOf": [
+                            {
+                                "$ref": "#/definitions/GithubOptions"
+                            },
+                            {
+                                "$ref": "#/definitions/S3Options"
+                            },
+                            {
+                                "$ref": "#/definitions/SpacesOptions"
+                            },
+                            {
+                                "$ref": "#/definitions/GenericServerOptions"
+                            },
+                            {
+                                "$ref": "#/definitions/BintrayOptions"
+                            },
+                            {
+                                "$ref": "#/definitions/CustomPublishOptions"
+                            },
+                            {
+                                "$ref": "#/definitions/KeygenOptions"
+                            },
+                            {
+                                "$ref": "#/definitions/SnapStoreOptions"
+                            },
+                            {
+                                "type": "string"
+                            }
+                        ]
+                    }
+                },
+                {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                }
+            ]
+        },
+        "detectUpdateChannel": {
+            "description": "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
+            "default": true,
+            "type": "boolean"
+        },
+        "generateUpdatesFilesForAllChannels": {
+            "description": "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
+            "default": false,
+            "type": "boolean"
+        },
+        "releaseInfo": {
+            "description": "The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes=\"new features\"\n```",
+            "$ref": "#/definitions/ReleaseInfo"
+        },
+        "target": {
+            "anyOf": [
+                {
+                    "$ref": "#/definitions/TargetConfiguration"
+                },
+                {
+                    "type": "array",
+                    "items": {
+                        "anyOf": [
+                            {
+                                "$ref": "#/definitions/TargetConfiguration"
+                            },
+                            {
+                                "type": "string"
+                            }
+                        ]
+                    }
+                },
+                {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                }
+            ]
+        },
+        "cscLink": {
+            "type": [
+                "null",
+                "string"
+            ]
+        },
+        "cscKeyPassword": {
+            "type": [
+                "null",
+                "string"
+            ]
+        },
+        "defaultArch": {
+            "type": "string"
+        }
+    },
+    "definitions": {
+        "MetadataDirectories": {
+            "type": "object",
+            "properties": {
+                "buildResources": {
+                    "description": "The path to build resources.\n\nPlease note — build resources are not packed into the app. If you need to use some files, e.g. as tray icon, please include required files explicitly: `\"files\": [\"**\\/*\", \"build/icon.*\"]`",
+                    "default": "build",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "output": {
+                    "description": "The output directory. [File macros](/file-patterns#file-macros) are supported.",
+                    "default": "dist",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "app": {
+                    "description": "The application directory (containing the application package.json), defaults to `app`, `www` or working directory.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                }
+            }
+        },
+        "MacConfiguration": {
+            "type": "object",
+            "properties": {
+                "category": {
+                    "description": "The application category type, as shown in the Finder via *View -> Arrange by Application Category* when viewing the Applications directory.\n\nFor example, `\"category\": \"public.app-category.developer-tools\"` will set the application category to *Developer Tools*.\n\nValid values are listed in [Apple's documentation](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/LaunchServicesKeys.html#//apple_ref/doc/uid/TP40009250-SW8).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "target": {
+                    "description": "The target package type: list of `default`, `dmg`, `mas`, `mas-dev`, `pkg`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir`. Defaults to `default` (dmg and zip for Squirrel.Mac).",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/TargetConfiguration"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/TargetConfiguration"
+                                    },
+                                    {
+                                        "enum": [
+                                            "7z",
+                                            "default",
+                                            "dir",
+                                            "dmg",
+                                            "mas",
+                                            "mas-dev",
+                                            "pkg",
+                                            "tar.bz2",
+                                            "tar.gz",
+                                            "tar.lz",
+                                            "tar.xz",
+                                            "zip"
+                                        ],
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "enum": [
+                                "7z",
+                                "default",
+                                "dir",
+                                "dmg",
+                                "mas",
+                                "mas-dev",
+                                "pkg",
+                                "tar.bz2",
+                                "tar.gz",
+                                "tar.lz",
+                                "tar.xz",
+                                "zip"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "identity": {
+                    "description": "The name of certificate to use when signing. Consider using environment variables [CSC_LINK or CSC_NAME](/code-signing) instead of specifying this option.\nMAS installer identity is specified in the [mas](/configuration/mas).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "icon": {
+                    "description": "The path to application icon.",
+                    "default": "build/icon.icns",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "entitlements": {
+                    "description": "The path to entitlements file for signing the app. `build/entitlements.mac.plist` will be used if exists (it is a recommended way to set).\nMAS entitlements is specified in the [mas](/configuration/mas).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "entitlementsInherit": {
+                    "description": "The path to child entitlements which inherit the security settings for signing frameworks and bundles of a distribution. `build/entitlements.mac.inherit.plist` will be used if exists (it is a recommended way to set).\nOtherwise [default](https://github.com/electron-userland/electron-osx-sign/blob/master/default.entitlements.darwin.inherit.plist).\n\nThis option only applies when signing with `entitlements` provided.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "entitlementsLoginHelper": {
+                    "description": "Path to login helper entitlement file.\nWhen using App Sandbox, the the `com.apple.security.inherit` key that is normally in the inherited entitlements cannot be inherited since the login helper is a standalone executable.\nDefaults to the value provided for `entitlements`. This option only applies when signing with `entitlements` provided.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "provisioningProfile": {
+                    "description": "The path to the provisioning profile to use when signing, absolute or relative to the app root.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "bundleVersion": {
+                    "description": "The `CFBundleVersion`. Do not use it unless [you need to](https://github.com/electron-userland/electron-builder/issues/565#issuecomment-230678643).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "bundleShortVersion": {
+                    "description": "The `CFBundleShortVersionString`. Do not use it unless you need to.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "darkModeSupport": {
+                    "description": "Whether a dark mode is supported. If your app does have a dark mode, you can make your app follow the system-wide dark mode setting.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "helperBundleId": {
+                    "description": "The bundle identifier to use in the application helper's plist.",
+                    "default": "${appBundleIdentifier}.helper",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "helperRendererBundleId": {
+                    "description": "The bundle identifier to use in the Renderer helper's plist.",
+                    "default": "${appBundleIdentifier}.helper.Renderer",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "helperPluginBundleId": {
+                    "description": "The bundle identifier to use in the Plugin helper's plist.",
+                    "default": "${appBundleIdentifier}.helper.Plugin",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "helperGPUBundleId": {
+                    "description": "The bundle identifier to use in the GPU helper's plist.",
+                    "default": "${appBundleIdentifier}.helper.GPU",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "helperEHBundleId": {
+                    "description": "The bundle identifier to use in the EH helper's plist.",
+                    "default": "${appBundleIdentifier}.helper.EH",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "helperNPBundleId": {
+                    "description": "The bundle identifier to use in the NP helper's plist.",
+                    "default": "${appBundleIdentifier}.helper.NP",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "type": {
+                    "description": "Whether to sign app for development or for distribution.",
+                    "default": "distribution",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "development",
+                                "distribution"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "extendInfo": {
+                    "description": "The extra entries for `Info.plist`."
+                },
+                "binaries": {
+                    "description": "Paths of any extra binaries that need to be signed.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "minimumSystemVersion": {
+                    "description": "The minimum version of macOS required for the app to run. Corresponds to `LSMinimumSystemVersion`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "requirements": {
+                    "description": "Path of [requirements file](https://developer.apple.com/library/mac/documentation/Security/Conceptual/CodeSigningGuide/RequirementLang/RequirementLang.html) used in signing. Not applicable for MAS.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "electronLanguages": {
+                    "description": "The electron locales. By default Electron locales used as is.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "string"
+                        }
+                    ]
+                },
+                "cscInstallerLink": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "cscInstallerKeyPassword": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "extraDistFiles": {
+                    "description": "Extra files to put in archive. Not applicable for `tar.*`.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "hardenedRuntime": {
+                    "description": "Whether your app has to be signed with hardened runtime.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "gatekeeperAssess": {
+                    "description": "Whether to let electron-osx-sign validate the signing or not.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "strictVerify": {
+                    "description": "Whether to let electron-osx-sign verify the contents or not.",
+                    "default": true,
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "string",
+                                "boolean"
+                            ]
+                        }
+                    ]
+                },
+                "signIgnore": {
+                    "description": "Regex or an array of regex's that signal skipping signing a file.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "timestamp": {
+                    "description": "Specify the URL of the timestamp authority server",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "appId": {
+                    "description": "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
+                    "default": "com.electron.${name}",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "executableName": {
+                    "description": "The executable name. Defaults to `productName`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "compression": {
+                    "description": "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
+                    "default": "normal",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "maximum",
+                                "normal",
+                                "store"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "files": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "extraResources": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "extraFiles": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "asar": {
+                    "description": "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work.",
+                    "default": true,
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/AsarOptions"
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "boolean"
+                            ]
+                        }
+                    ]
+                },
+                "asarUnpack": {
+                    "description": "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "fileAssociations": {
+                    "description": "The file associations.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileAssociation"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/FileAssociation"
+                            }
+                        }
+                    ]
+                },
+                "protocols": {
+                    "description": "The URL protocol schemes.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/Protocol"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/Protocol"
+                            }
+                        }
+                    ]
+                },
+                "forceCodeSigning": {
+                    "description": "Whether to fail if app will be not code signed.",
+                    "type": "boolean"
+                },
+                "electronUpdaterCompatibility": {
+                    "description": "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "detectUpdateChannel": {
+                    "description": "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "generateUpdatesFilesForAllChannels": {
+                    "description": "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "releaseInfo": {
+                    "description": "The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes=\"new features\"\n```",
+                    "$ref": "#/definitions/ReleaseInfo"
+                },
+                "cscLink": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "cscKeyPassword": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "defaultArch": {
+                    "type": "string"
+                }
+            }
+        },
+        "TargetConfiguration": {
+            "type": "object",
+            "properties": {
+                "target": {
+                    "description": "The target name. e.g. `snap`.",
+                    "type": "string"
+                },
+                "arch": {
+                    "description": "The arch or list of archs.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "enum": [
+                                    "arm64",
+                                    "armv7l",
+                                    "ia32",
+                                    "universal",
+                                    "x64"
+                                ],
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "enum": [
+                                "arm64",
+                                "armv7l",
+                                "ia32",
+                                "universal",
+                                "x64"
+                            ],
+                            "type": "string"
+                        }
+                    ]
+                }
+            },
+            "required": [
+                "target"
+            ]
+        },
+        "FileSet": {
+            "type": "object",
+            "properties": {
+                "from": {
+                    "description": "The source path relative to the project directory.",
+                    "type": "string"
+                },
+                "to": {
+                    "description": "The destination path relative to the app's content directory for `extraFiles` and the app's resource directory for `extraResources`.",
+                    "type": "string"
+                },
+                "filter": {
+                    "description": "The [glob patterns](/file-patterns).",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "string"
+                        }
+                    ]
+                }
+            }
+        },
+        "AsarOptions": {
+            "type": "object",
+            "properties": {
+                "smartUnpack": {
+                    "description": "Whether to automatically unpack executables files.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "ordering": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "externalAllowed": {
+                    "description": "Allows external asar files.",
+                    "default": false,
+                    "type": "boolean"
+                }
+            }
+        },
+        "FileAssociation": {
+            "description": "File associations.\n\nmacOS (corresponds to [CFBundleDocumentTypes](https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-101685)) and NSIS only.\n\nOn Windows works only if [nsis.perMachine](https://electron.build/configuration/configuration#NsisOptions-perMachine) is set to `true`.",
+            "type": "object",
+            "properties": {
+                "ext": {
+                    "description": "The extension (minus the leading period). e.g. `png`.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "string"
+                        }
+                    ]
+                },
+                "name": {
+                    "description": "The name. e.g. `PNG`. Defaults to `ext`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "description": {
+                    "description": "*windows-only.* The description.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "mimeType": {
+                    "description": "*linux-only.* The mime-type.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "icon": {
+                    "description": "The path to icon (`.icns` for MacOS and `.ico` for Windows), relative to `build` (build resources directory). Defaults to `${firstExt}.icns`/`${firstExt}.ico` (if several extensions specified, first is used) or to application icon.\n\nNot supported on Linux, file issue if need (default icon will be `x-office-document`).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "role": {
+                    "description": "*macOS-only* The app’s role with respect to the type. The value can be `Editor`, `Viewer`, `Shell`, or `None`. Corresponds to `CFBundleTypeRole`.",
+                    "default": "Editor",
+                    "type": "string"
+                },
+                "isPackage": {
+                    "description": "*macOS-only* Whether the document is distributed as a bundle. If set to true, the bundle directory is treated as a file. Corresponds to `LSTypeIsPackage`.",
+                    "type": "boolean"
+                },
+                "rank": {
+                    "description": "*macOS-only* The app’s rank with respect to the type. The value can be `Owner`, `Default`, `Alternate`, or `None`. Corresponds to `LSHandlerRank`.",
+                    "default": "Default",
+                    "type": "string"
+                }
+            },
+            "required": [
+                "ext"
+            ]
+        },
+        "Protocol": {
+            "description": "URL Protocol Schemes. Protocols to associate the app with. macOS only.\n\nPlease note — on macOS [you need to register an `open-url` event handler](http://electron.atom.io/docs/api/app/#event-open-url-macos).",
+            "type": "object",
+            "properties": {
+                "name": {
+                    "description": "The name. e.g. `IRC server URL`.",
+                    "type": "string"
+                },
+                "schemes": {
+                    "description": "The schemes. e.g. `[\"irc\", \"ircs\"]`.",
+                    "type": "array",
+                    "items": {
+                        "type": "string"
+                    }
+                },
+                "role": {
+                    "description": "*macOS-only* The app’s role with respect to the type.",
+                    "default": "Editor",
+                    "enum": [
+                        "Editor",
+                        "None",
+                        "Shell",
+                        "Viewer"
+                    ],
+                    "type": "string"
+                }
+            },
+            "required": [
+                "name",
+                "schemes"
+            ]
+        },
+        "GithubOptions": {
+            "description": "[GitHub](https://help.github.com/articles/about-releases/) options.\n\nGitHub [personal access token](https://help.github.com/articles/creating-an-access-token-for-command-line-use/) is required. You can generate by going to [https://github.com/settings/tokens/new](https://github.com/settings/tokens/new). The access token should have the repo scope/permission.\nDefine `GH_TOKEN` environment variable.",
+            "type": "object",
+            "properties": {
+                "provider": {
+                    "description": "The provider. Must be `github`.",
+                    "type": "string",
+                    "enum": [
+                        "github"
+                    ]
+                },
+                "repo": {
+                    "description": "The repository name. [Detected automatically](#github-repository-and-bintray-package).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "owner": {
+                    "description": "The owner.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "vPrefixedTagName": {
+                    "description": "Whether to use `v`-prefixed tag name.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "host": {
+                    "description": "The host (including the port if need).",
+                    "default": "github.com",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "protocol": {
+                    "description": "The protocol. GitHub Publisher supports only `https`.",
+                    "default": "https",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "http",
+                                "https"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "token": {
+                    "description": "The access token to support auto-update from private github repositories. Never specify it in the configuration files. Only for [setFeedURL](/auto-update#appupdatersetfeedurloptions).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "private": {
+                    "description": "Whether to use private github auto-update provider if `GH_TOKEN` environment variable is defined. See [Private GitHub Update Repo](/auto-update#private-github-update-repo).",
+                    "type": [
+                        "null",
+                        "boolean"
+                    ]
+                },
+                "releaseType": {
+                    "description": "The type of release. By default `draft` release will be created.\n\nAlso you can set release type using environment variable. If `EP_DRAFT`is set to `true` — `draft`, if `EP_PRE_RELEASE`is set to `true` — `prerelease`.",
+                    "default": "draft",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "draft",
+                                "prerelease",
+                                "release"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "publisherName": {
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "updaterCacheDirName": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publishAutoUpdate": {
+                    "description": "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "requestHeaders": {
+                    "description": "Any custom request headers",
+                    "$ref": "#/definitions/OutgoingHttpHeaders"
+                }
+            },
+            "required": [
+                "provider"
+            ]
+        },
+        "OutgoingHttpHeaders": {
+            "type": "object"
+        },
+        "S3Options": {
+            "type": "object",
+            "properties": {
+                "provider": {
+                    "description": "The provider. Must be `s3`.",
+                    "type": "string",
+                    "enum": [
+                        "s3"
+                    ]
+                },
+                "bucket": {
+                    "description": "The bucket name.",
+                    "type": "string"
+                },
+                "region": {
+                    "description": "The region. Is determined and set automatically when publishing.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "acl": {
+                    "description": "The ACL. Set to `null` to not [add](https://github.com/electron-userland/electron-builder/issues/1822).\n\nPlease see [required permissions for the S3 provider](https://github.com/electron-userland/electron-builder/issues/1618#issuecomment-314679128).",
+                    "default": "public-read",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "private",
+                                "public-read"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "storageClass": {
+                    "description": "The type of storage to use for the object.",
+                    "default": "STANDARD",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "REDUCED_REDUNDANCY",
+                                "STANDARD",
+                                "STANDARD_IA"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "encryption": {
+                    "description": "Server-side encryption algorithm to use for the object.",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "AES256",
+                                "aws:kms"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "endpoint": {
+                    "description": "The endpoint URI to send requests to. The default endpoint is built from the configured region.\nThe endpoint should be a string like `https://{service}.{region}.amazonaws.com`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "channel": {
+                    "description": "The update channel.",
+                    "default": "latest",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "path": {
+                    "description": "The directory path.",
+                    "default": "/",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publisherName": {
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "updaterCacheDirName": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publishAutoUpdate": {
+                    "description": "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "requestHeaders": {
+                    "description": "Any custom request headers",
+                    "$ref": "#/definitions/OutgoingHttpHeaders"
+                }
+            },
+            "required": [
+                "bucket",
+                "provider"
+            ]
+        },
+        "SpacesOptions": {
+            "description": "[DigitalOcean Spaces](https://www.digitalocean.com/community/tutorials/an-introduction-to-digitalocean-spaces) options.\nAccess key is required, define `DO_KEY_ID` and `DO_SECRET_KEY` environment variables.",
+            "type": "object",
+            "properties": {
+                "provider": {
+                    "description": "The provider. Must be `spaces`.",
+                    "type": "string",
+                    "enum": [
+                        "spaces"
+                    ]
+                },
+                "name": {
+                    "description": "The space name.",
+                    "type": "string"
+                },
+                "region": {
+                    "description": "The region (e.g. `nyc3`).",
+                    "type": "string"
+                },
+                "channel": {
+                    "description": "The update channel.",
+                    "default": "latest",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "path": {
+                    "description": "The directory path.",
+                    "default": "/",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "acl": {
+                    "description": "The ACL. Set to `null` to not [add](https://github.com/electron-userland/electron-builder/issues/1822).",
+                    "default": "public-read",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "private",
+                                "public-read"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "publisherName": {
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "updaterCacheDirName": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publishAutoUpdate": {
+                    "description": "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "requestHeaders": {
+                    "description": "Any custom request headers",
+                    "$ref": "#/definitions/OutgoingHttpHeaders"
+                }
+            },
+            "required": [
+                "name",
+                "provider",
+                "region"
+            ]
+        },
+        "GenericServerOptions": {
+            "description": "Generic (any HTTP(S) server) options.\nIn all publish options [File Macros](/file-patterns#file-macros) are supported.",
+            "type": "object",
+            "properties": {
+                "provider": {
+                    "description": "The provider. Must be `generic`.",
+                    "type": "string",
+                    "enum": [
+                        "generic"
+                    ]
+                },
+                "url": {
+                    "description": "The base url. e.g. `https://bucket_name.s3.amazonaws.com`.",
+                    "type": "string"
+                },
+                "channel": {
+                    "description": "The channel.",
+                    "default": "latest",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "useMultipleRangeRequest": {
+                    "description": "Whether to use multiple range requests for differential update. Defaults to `true` if `url` doesn't contain `s3.amazonaws.com`.",
+                    "type": "boolean"
+                },
+                "publisherName": {
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "updaterCacheDirName": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publishAutoUpdate": {
+                    "description": "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "requestHeaders": {
+                    "description": "Any custom request headers",
+                    "$ref": "#/definitions/OutgoingHttpHeaders"
+                }
+            },
+            "required": [
+                "provider",
+                "url"
+            ]
+        },
+        "BintrayOptions": {
+            "description": "[Bintray](https://bintray.com/) options. Requires an API key. An API key can be obtained from the user [profile](https://bintray.com/profile/edit) page (\"Edit Your Profile\" -> API Key).\nDefine `BT_TOKEN` environment variable.",
+            "type": "object",
+            "properties": {
+                "provider": {
+                    "description": "The provider. Must be `bintray`.",
+                    "type": "string",
+                    "enum": [
+                        "bintray"
+                    ]
+                },
+                "package": {
+                    "description": "The Bintray package name.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "repo": {
+                    "description": "The Bintray repository name.",
+                    "default": "generic",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "owner": {
+                    "description": "The owner.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "component": {
+                    "description": "The Bintray component (Debian only).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "distribution": {
+                    "description": "The Bintray distribution (Debian only).",
+                    "default": "stable",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "user": {
+                    "description": "The Bintray user account. Used in cases where the owner is an organization.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "token": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publisherName": {
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "updaterCacheDirName": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publishAutoUpdate": {
+                    "description": "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "requestHeaders": {
+                    "description": "Any custom request headers",
+                    "$ref": "#/definitions/OutgoingHttpHeaders"
+                }
+            },
+            "required": [
+                "provider"
+            ]
+        },
+        "CustomPublishOptions": {
+            "type": "object",
+            "additionalProperties": {},
+            "properties": {
+                "provider": {
+                    "description": "The provider. Must be `custom`.",
+                    "type": "string",
+                    "enum": [
+                        "custom"
+                    ]
+                },
+                "updateProvider": {
+                    "description": "The Provider to provide UpdateInfo regarding available updates.  Required\nto use custom providers with electron-updater.",
+                    "type": "object"
+                },
+                "publisherName": {
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "updaterCacheDirName": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publishAutoUpdate": {
+                    "description": "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "requestHeaders": {
+                    "description": "Any custom request headers",
+                    "$ref": "#/definitions/OutgoingHttpHeaders"
+                }
+            },
+            "required": [
+                "provider"
+            ]
+        },
+        "KeygenOptions": {
+            "description": "Keygen options.\nhttps://keygen.sh/\nDefine `KEYGEN_TOKEN` environment variable.",
+            "type": "object",
+            "properties": {
+                "provider": {
+                    "description": "The provider. Must be `keygen`.",
+                    "type": "string",
+                    "enum": [
+                        "keygen"
+                    ]
+                },
+                "account": {
+                    "description": "Keygen account's UUID",
+                    "type": "string"
+                },
+                "product": {
+                    "description": "Keygen product's UUID",
+                    "type": "string"
+                },
+                "channel": {
+                    "description": "The channel.",
+                    "default": "stable",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "platform": {
+                    "description": "The target Platform. Is set programmatically explicitly during publishing.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publisherName": {
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "updaterCacheDirName": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publishAutoUpdate": {
+                    "description": "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "requestHeaders": {
+                    "description": "Any custom request headers",
+                    "$ref": "#/definitions/OutgoingHttpHeaders"
+                }
+            },
+            "required": [
+                "account",
+                "product",
+                "provider"
+            ]
+        },
+        "SnapStoreOptions": {
+            "description": "[Snap Store](https://snapcraft.io/) options.",
+            "type": "object",
+            "properties": {
+                "channels": {
+                    "description": "The list of channels the snap would be released.",
+                    "default": [
+                        "edge"
+                    ],
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "provider": {
+                    "$ref": "#/definitions/PublishProvider",
+                    "description": "The provider."
+                },
+                "publisherName": {
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "updaterCacheDirName": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publishAutoUpdate": {
+                    "description": "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "requestHeaders": {
+                    "description": "Any custom request headers",
+                    "$ref": "#/definitions/OutgoingHttpHeaders"
+                }
+            },
+            "required": [
+                "provider"
+            ]
+        },
+        "PublishProvider": {
+            "enum": [
+                "bintray",
+                "custom",
+                "generic",
+                "github",
+                "keygen",
+                "s3",
+                "snapStore",
+                "spaces"
+            ],
+            "type": "string"
+        },
+        "ReleaseInfo": {
+            "type": "object",
+            "properties": {
+                "releaseName": {
+                    "description": "The release name.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "releaseNotes": {
+                    "description": "The release notes.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "releaseNotesFile": {
+                    "description": "The path to release notes file. Defaults to `release-notes-${platform}.md` (where `platform` it is current platform — `mac`, `linux` or `windows`) or `release-notes.md` in the [build resources](#MetadataDirectories-buildResources).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "releaseDate": {
+                    "description": "The release date.",
+                    "type": "string"
+                }
+            }
+        },
+        "MasConfiguration": {
+            "type": "object",
+            "properties": {
+                "entitlements": {
+                    "description": "The path to entitlements file for signing the app. `build/entitlements.mas.plist` will be used if exists (it is a recommended way to set).\nOtherwise [default](https://github.com/electron-userland/electron-osx-sign/blob/master/default.entitlements.mas.plist).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "entitlementsInherit": {
+                    "description": "The path to child entitlements which inherit the security settings for signing frameworks and bundles of a distribution. `build/entitlements.mas.inherit.plist` will be used if exists (it is a recommended way to set).\nOtherwise [default](https://github.com/electron-userland/electron-osx-sign/blob/master/default.entitlements.mas.inherit.plist).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "binaries": {
+                    "description": "Paths of any extra binaries that need to be signed.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "category": {
+                    "description": "The application category type, as shown in the Finder via *View -> Arrange by Application Category* when viewing the Applications directory.\n\nFor example, `\"category\": \"public.app-category.developer-tools\"` will set the application category to *Developer Tools*.\n\nValid values are listed in [Apple's documentation](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/LaunchServicesKeys.html#//apple_ref/doc/uid/TP40009250-SW8).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "target": {
+                    "description": "The target package type: list of `default`, `dmg`, `mas`, `mas-dev`, `pkg`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir`. Defaults to `default` (dmg and zip for Squirrel.Mac).",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/TargetConfiguration"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/TargetConfiguration"
+                                    },
+                                    {
+                                        "enum": [
+                                            "7z",
+                                            "default",
+                                            "dir",
+                                            "dmg",
+                                            "mas",
+                                            "mas-dev",
+                                            "pkg",
+                                            "tar.bz2",
+                                            "tar.gz",
+                                            "tar.lz",
+                                            "tar.xz",
+                                            "zip"
+                                        ],
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "enum": [
+                                "7z",
+                                "default",
+                                "dir",
+                                "dmg",
+                                "mas",
+                                "mas-dev",
+                                "pkg",
+                                "tar.bz2",
+                                "tar.gz",
+                                "tar.lz",
+                                "tar.xz",
+                                "zip"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "identity": {
+                    "description": "The name of certificate to use when signing. Consider using environment variables [CSC_LINK or CSC_NAME](/code-signing) instead of specifying this option.\nMAS installer identity is specified in the [mas](/configuration/mas).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "icon": {
+                    "description": "The path to application icon.",
+                    "default": "build/icon.icns",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "entitlementsLoginHelper": {
+                    "description": "Path to login helper entitlement file.\nWhen using App Sandbox, the the `com.apple.security.inherit` key that is normally in the inherited entitlements cannot be inherited since the login helper is a standalone executable.\nDefaults to the value provided for `entitlements`. This option only applies when signing with `entitlements` provided.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "provisioningProfile": {
+                    "description": "The path to the provisioning profile to use when signing, absolute or relative to the app root.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "bundleVersion": {
+                    "description": "The `CFBundleVersion`. Do not use it unless [you need to](https://github.com/electron-userland/electron-builder/issues/565#issuecomment-230678643).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "bundleShortVersion": {
+                    "description": "The `CFBundleShortVersionString`. Do not use it unless you need to.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "darkModeSupport": {
+                    "description": "Whether a dark mode is supported. If your app does have a dark mode, you can make your app follow the system-wide dark mode setting.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "helperBundleId": {
+                    "description": "The bundle identifier to use in the application helper's plist.",
+                    "default": "${appBundleIdentifier}.helper",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "helperRendererBundleId": {
+                    "description": "The bundle identifier to use in the Renderer helper's plist.",
+                    "default": "${appBundleIdentifier}.helper.Renderer",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "helperPluginBundleId": {
+                    "description": "The bundle identifier to use in the Plugin helper's plist.",
+                    "default": "${appBundleIdentifier}.helper.Plugin",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "helperGPUBundleId": {
+                    "description": "The bundle identifier to use in the GPU helper's plist.",
+                    "default": "${appBundleIdentifier}.helper.GPU",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "helperEHBundleId": {
+                    "description": "The bundle identifier to use in the EH helper's plist.",
+                    "default": "${appBundleIdentifier}.helper.EH",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "helperNPBundleId": {
+                    "description": "The bundle identifier to use in the NP helper's plist.",
+                    "default": "${appBundleIdentifier}.helper.NP",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "type": {
+                    "description": "Whether to sign app for development or for distribution.",
+                    "default": "distribution",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "development",
+                                "distribution"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "extendInfo": {
+                    "description": "The extra entries for `Info.plist`."
+                },
+                "minimumSystemVersion": {
+                    "description": "The minimum version of macOS required for the app to run. Corresponds to `LSMinimumSystemVersion`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "requirements": {
+                    "description": "Path of [requirements file](https://developer.apple.com/library/mac/documentation/Security/Conceptual/CodeSigningGuide/RequirementLang/RequirementLang.html) used in signing. Not applicable for MAS.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "electronLanguages": {
+                    "description": "The electron locales. By default Electron locales used as is.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "string"
+                        }
+                    ]
+                },
+                "cscInstallerLink": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "cscInstallerKeyPassword": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "extraDistFiles": {
+                    "description": "Extra files to put in archive. Not applicable for `tar.*`.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "hardenedRuntime": {
+                    "description": "Whether your app has to be signed with hardened runtime.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "gatekeeperAssess": {
+                    "description": "Whether to let electron-osx-sign validate the signing or not.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "strictVerify": {
+                    "description": "Whether to let electron-osx-sign verify the contents or not.",
+                    "default": true,
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "string",
+                                "boolean"
+                            ]
+                        }
+                    ]
+                },
+                "signIgnore": {
+                    "description": "Regex or an array of regex's that signal skipping signing a file.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "timestamp": {
+                    "description": "Specify the URL of the timestamp authority server",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "appId": {
+                    "description": "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
+                    "default": "com.electron.${name}",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "executableName": {
+                    "description": "The executable name. Defaults to `productName`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "compression": {
+                    "description": "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
+                    "default": "normal",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "maximum",
+                                "normal",
+                                "store"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "files": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "extraResources": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "extraFiles": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "asar": {
+                    "description": "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work.",
+                    "default": true,
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/AsarOptions"
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "boolean"
+                            ]
+                        }
+                    ]
+                },
+                "asarUnpack": {
+                    "description": "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "fileAssociations": {
+                    "description": "The file associations.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileAssociation"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/FileAssociation"
+                            }
+                        }
+                    ]
+                },
+                "protocols": {
+                    "description": "The URL protocol schemes.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/Protocol"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/Protocol"
+                            }
+                        }
+                    ]
+                },
+                "forceCodeSigning": {
+                    "description": "Whether to fail if app will be not code signed.",
+                    "type": "boolean"
+                },
+                "electronUpdaterCompatibility": {
+                    "description": "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "detectUpdateChannel": {
+                    "description": "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "generateUpdatesFilesForAllChannels": {
+                    "description": "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "releaseInfo": {
+                    "description": "The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes=\"new features\"\n```",
+                    "$ref": "#/definitions/ReleaseInfo"
+                },
+                "cscLink": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "cscKeyPassword": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "defaultArch": {
+                    "type": "string"
+                }
+            }
+        },
+        "DmgOptions": {
+            "type": "object",
+            "properties": {
+                "background": {
+                    "description": "The path to background image (default: `build/background.tiff` or `build/background.png` if exists). The resolution of this file determines the resolution of the installer window.\nIf background is not specified, use `window.size`. Default locations expected background size to be 540x380.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "backgroundColor": {
+                    "description": "The background color (accepts css colors). Defaults to `#ffffff` (white) if no background image.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "icon": {
+                    "description": "The path to DMG icon (volume icon), which will be shown when mounted, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to the application icon (`build/icon.icns`).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "iconSize": {
+                    "description": "The size of all the icons inside the DMG.",
+                    "default": 80,
+                    "type": [
+                        "null",
+                        "number"
+                    ]
+                },
+                "iconTextSize": {
+                    "description": "The size of all the icon texts inside the DMG.",
+                    "default": 12,
+                    "type": [
+                        "null",
+                        "number"
+                    ]
+                },
+                "title": {
+                    "description": "The title of the produced DMG, which will be shown when mounted (volume name).\n\nMacro `${productName}`, `${version}` and `${name}` are supported.",
+                    "default": "${productName} ${version}",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "contents": {
+                    "description": "The content — to customize icon locations. The x and y coordinates refer to the position of the **center** of the icon (at 1x scale), and do not take the label into account.",
+                    "type": "array",
+                    "items": {
+                        "$ref": "#/definitions/DmgContent"
+                    }
+                },
+                "format": {
+                    "description": "The disk image format. `ULFO` (lzfse-compressed image (OS X 10.11+ only)).",
+                    "default": "UDZO",
+                    "enum": [
+                        "UDBZ",
+                        "UDCO",
+                        "UDRO",
+                        "UDRW",
+                        "UDZO",
+                        "ULFO"
+                    ],
+                    "type": "string"
+                },
+                "window": {
+                    "description": "The DMG window position and size. With y co-ordinates running from bottom to top.\n\nThe Finder makes sure that the window will be on the user’s display, so if you want your window at the top left of the display you could use `\"x\": 0, \"y\": 100000` as the x, y co-ordinates.\nIt is not to be possible to position the window relative to the [top left](https://github.com/electron-userland/electron-builder/issues/3990#issuecomment-512960957) or relative to the center of the user’s screen.",
+                    "$ref": "#/definitions/DmgWindow"
+                },
+                "internetEnabled": {
+                    "description": "Whether to create internet-enabled disk image (when it is downloaded using a browser it will automatically decompress the image, put the application on the desktop, unmount and remove the disk image file).",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "sign": {
+                    "description": "Whether to sign the DMG or not. Signing is not required and will lead to unwanted errors in combination with notarization requirements.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "writeUpdateInfo": {
+                    "default": true,
+                    "type": "boolean"
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "DmgContent": {
+            "type": "object",
+            "properties": {
+                "x": {
+                    "description": "The device-independent pixel offset from the left of the window to the **center** of the icon.",
+                    "type": "number"
+                },
+                "y": {
+                    "description": "The device-independent pixel offset from the top of the window to the **center** of the icon.",
+                    "type": "number"
+                },
+                "type": {
+                    "enum": [
+                        "dir",
+                        "file",
+                        "link"
+                    ],
+                    "type": "string"
+                },
+                "name": {
+                    "description": "The name of the file within the DMG. Defaults to basename of `path`.",
+                    "type": "string"
+                },
+                "path": {
+                    "description": "The path of the file within the DMG.",
+                    "type": "string"
+                }
+            },
+            "required": [
+                "x",
+                "y"
+            ]
+        },
+        "DmgWindow": {
+            "type": "object",
+            "properties": {
+                "x": {
+                    "description": "The X position relative to left of the screen.",
+                    "default": 400,
+                    "type": "number"
+                },
+                "y": {
+                    "description": "The Y position relative to bottom of the screen.",
+                    "default": 100,
+                    "type": "number"
+                },
+                "width": {
+                    "description": "The width. Defaults to background image width or 540.",
+                    "type": "number"
+                },
+                "height": {
+                    "description": "The height. Defaults to background image height or 380.",
+                    "type": "number"
+                }
+            }
+        },
+        "PkgOptions": {
+            "description": "macOS product archive options.",
+            "type": "object",
+            "properties": {
+                "scripts": {
+                    "description": "The scripts directory, relative to `build` (build resources directory).\nThe scripts can be in any language so long as the files are marked executable and have the appropriate shebang indicating the path to the interpreter.\nScripts are required to be executable (`chmod +x file`).",
+                    "default": "build/pkg-scripts",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "productbuild": {
+                    "description": "should be not documented, only to experiment",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "installLocation": {
+                    "description": "The install location. [Do not use it](https://stackoverflow.com/questions/12863944/how-do-you-specify-a-default-install-location-to-home-with-pkgbuild) to create per-user package.\nMostly never you will need to change this option. `/Applications` would install it as expected into `/Applications` if the local system domain is chosen, or into `$HOME/Applications` if the home installation is chosen.",
+                    "default": "/Applications",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "allowAnywhere": {
+                    "description": "Whether can be installed at the root of any volume, including non-system volumes. Otherwise, it cannot be installed at the root of a volume.\n\nCorresponds to [enable_anywhere](https://developer.apple.com/library/content/documentation/DeveloperTools/Reference/DistributionDefinitionRef/Chapters/Distribution_XML_Ref.html#//apple_ref/doc/uid/TP40005370-CH100-SW70).",
+                    "default": true,
+                    "type": [
+                        "null",
+                        "boolean"
+                    ]
+                },
+                "allowCurrentUserHome": {
+                    "description": "Whether can be installed into the current user’s home directory.\nA home directory installation is done as the current user (not as root), and it cannot write outside of the home directory.\nIf the product cannot be installed in the user’s home directory and be not completely functional from user’s home directory.\n\nCorresponds to [enable_currentUserHome](https://developer.apple.com/library/content/documentation/DeveloperTools/Reference/DistributionDefinitionRef/Chapters/Distribution_XML_Ref.html#//apple_ref/doc/uid/TP40005370-CH100-SW70).",
+                    "default": true,
+                    "type": [
+                        "null",
+                        "boolean"
+                    ]
+                },
+                "allowRootDirectory": {
+                    "description": "Whether can be installed into the root directory. Should usually be `true` unless the product can be installed only to the user’s home directory.\n\nCorresponds to [enable_localSystem](https://developer.apple.com/library/content/documentation/DeveloperTools/Reference/DistributionDefinitionRef/Chapters/Distribution_XML_Ref.html#//apple_ref/doc/uid/TP40005370-CH100-SW70).",
+                    "default": true,
+                    "type": [
+                        "null",
+                        "boolean"
+                    ]
+                },
+                "identity": {
+                    "description": "The name of certificate to use when signing. Consider using environment variables [CSC_LINK or CSC_NAME](/code-signing) instead of specifying this option.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "license": {
+                    "description": "The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). In addition to `txt, `rtf` and `html` supported (don't forget to use `target=\"_blank\"` for links).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "background": {
+                    "description": "Options for the background image for the installer.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/PkgBackgroundOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "welcome": {
+                    "description": "The path to the welcome file. This may be used to customize the text on the Introduction page of the installer.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "mustClose": {
+                    "description": "Identifies applications that must be closed before the package is installed.\\n\\nCorresponds to [must-close](https://developer.apple.com/library/archive/documentation/DeveloperTools/Reference/DistributionDefinitionRef/Chapters/Distribution_XML_Ref.html#//apple_ref/doc/uid/TP40005370-CH100-SW77)",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "conclusion": {
+                    "description": "The path to the conclusion file. This may be used to customize the text on the final \"Summary\" page of the installer.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "isRelocatable": {
+                    "description": "Install bundle over previous version if moved by user?",
+                    "default": true,
+                    "type": [
+                        "null",
+                        "boolean"
+                    ]
+                },
+                "isVersionChecked": {
+                    "description": "Don't install bundle if newer version on disk?",
+                    "default": true,
+                    "type": [
+                        "null",
+                        "boolean"
+                    ]
+                },
+                "hasStrictIdentifier": {
+                    "description": "Require identical bundle identifiers at install path?",
+                    "default": true,
+                    "type": [
+                        "null",
+                        "boolean"
+                    ]
+                },
+                "overwriteAction": {
+                    "description": "Specifies how an existing version of the bundle on disk should be handled when the version in\nthe package is installed.\n\nIf you specify upgrade, the bundle in the package atomi-cally replaces any version on disk;\nthis has the effect of deleting old paths that no longer exist in the new version of\nthe bundle.\n\nIf you specify update, the bundle in the package overwrites the version on disk, and any files\nnot contained in the package will be left intact; this is appropriate when you are delivering\nan update-only package.\n\nAnother effect of update is that the package bundle will not be installed at all if there is\nnot already a version on disk; this allows a package to deliver an update for an app that\nthe user might have deleted.",
+                    "default": "upgrade",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "update",
+                                "upgrade"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "PkgBackgroundOptions": {
+            "description": "Options for the background image in a PKG installer",
+            "type": "object",
+            "properties": {
+                "file": {
+                    "description": "Path to the image to use as an installer background.",
+                    "type": "string"
+                },
+                "alignment": {
+                    "description": "Alignment of the background image.\nOptions are: center, left, right, top, bottom, topleft, topright, bottomleft, bottomright",
+                    "default": "center",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "bottom",
+                                "bottomleft",
+                                "bottomright",
+                                "center",
+                                "left",
+                                "right",
+                                "top",
+                                "topleft",
+                                "topright"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "scaling": {
+                    "description": "Scaling of the background image.\nOptions are: tofit, none, proportional",
+                    "default": "tofit",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "none",
+                                "proportional",
+                                "tofit"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                }
+            }
+        },
+        "WindowsConfiguration": {
+            "type": "object",
+            "properties": {
+                "target": {
+                    "description": "The target package type: list of `nsis`, `nsis-web` (Web installer), `portable` ([portable](/configuration/nsis#portable) app without installation), `appx`, `msi`, `squirrel`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir`.\nAppX package can be built only on Windows 10.\n\nTo use Squirrel.Windows please install `electron-builder-squirrel-windows` dependency.",
+                    "default": "nsis",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/TargetConfiguration"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/TargetConfiguration"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "icon": {
+                    "description": "The path to application icon.",
+                    "default": "build/icon.ico",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "legalTrademarks": {
+                    "description": "The trademarks and registered trademarks.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "signingHashAlgorithms": {
+                    "description": "Array of signing algorithms used. For AppX `sha256` is always used.",
+                    "default": "['sha1', 'sha256']",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "enum": [
+                                    "sha1",
+                                    "sha256"
+                                ],
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "sign": {
+                    "description": "The custom function (or path to file or module id) to sign Windows executable.",
+                    "type": [
+                        "null",
+                        "string",
+                        "object"
+                    ]
+                },
+                "certificateFile": {
+                    "description": "The path to the *.pfx certificate you want to sign with. Please use it only if you cannot use env variable `CSC_LINK` (`WIN_CSC_LINK`) for some reason.\nPlease see [Code Signing](/code-signing).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "certificatePassword": {
+                    "description": "The password to the certificate provided in `certificateFile`. Please use it only if you cannot use env variable `CSC_KEY_PASSWORD` (`WIN_CSC_KEY_PASSWORD`) for some reason.\nPlease see [Code Signing](/code-signing).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "certificateSubjectName": {
+                    "description": "The name of the subject of the signing certificate. Required only for EV Code Signing and works only on Windows (or on macOS if [Parallels Desktop](https://www.parallels.com/products/desktop/) Windows 10 virtual machines exits).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "certificateSha1": {
+                    "description": "The SHA1 hash of the signing certificate. The SHA1 hash is commonly specified when multiple certificates satisfy the criteria specified by the remaining switches. Works only on Windows (or on macOS if [Parallels Desktop](https://www.parallels.com/products/desktop/) Windows 10 virtual machines exits).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "additionalCertificateFile": {
+                    "description": "The path to an additional certificate file you want to add to the signature block.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "rfc3161TimeStampServer": {
+                    "description": "The URL of the RFC 3161 time stamp server.",
+                    "default": "http://timestamp.digicert.com",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "timeStampServer": {
+                    "description": "The URL of the time stamp server.",
+                    "default": "http://timestamp.digicert.com",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publisherName": {
+                    "description": "[The publisher name](https://github.com/electron-userland/electron-builder/issues/1187#issuecomment-278972073), exactly as in your code signed certificate. Several names can be provided.\nDefaults to common name from your code signing certificate.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "verifyUpdateCodeSignature": {
+                    "description": "Whether to verify the signature of an available update before installation.\nThe [publisher name](#publisherName) will be used for the signature verification.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "requestedExecutionLevel": {
+                    "description": "The [security level](https://msdn.microsoft.com/en-us/library/6ad1fshk.aspx#Anchor_9) at which the application requests to be executed.\nCannot be specified per target, allowed only in the `win`.",
+                    "default": "asInvoker",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "asInvoker",
+                                "highestAvailable",
+                                "requireAdministrator"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "signAndEditExecutable": {
+                    "description": "Whether to sign and add metadata to executable. Advanced option.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "signDlls": {
+                    "description": "Whether to sign DLL files. Advanced option.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "appId": {
+                    "description": "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
+                    "default": "com.electron.${name}",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "executableName": {
+                    "description": "The executable name. Defaults to `productName`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "compression": {
+                    "description": "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
+                    "default": "normal",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "maximum",
+                                "normal",
+                                "store"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "files": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "extraResources": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "extraFiles": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "asar": {
+                    "description": "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work.",
+                    "default": true,
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/AsarOptions"
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "boolean"
+                            ]
+                        }
+                    ]
+                },
+                "asarUnpack": {
+                    "description": "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "fileAssociations": {
+                    "description": "The file associations.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileAssociation"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/FileAssociation"
+                            }
+                        }
+                    ]
+                },
+                "protocols": {
+                    "description": "The URL protocol schemes.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/Protocol"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/Protocol"
+                            }
+                        }
+                    ]
+                },
+                "forceCodeSigning": {
+                    "description": "Whether to fail if app will be not code signed.",
+                    "type": "boolean"
+                },
+                "electronUpdaterCompatibility": {
+                    "description": "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "detectUpdateChannel": {
+                    "description": "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "generateUpdatesFilesForAllChannels": {
+                    "description": "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "releaseInfo": {
+                    "description": "The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes=\"new features\"\n```",
+                    "$ref": "#/definitions/ReleaseInfo"
+                },
+                "cscLink": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "cscKeyPassword": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "defaultArch": {
+                    "type": "string"
+                }
+            }
+        },
+        "NsisOptions": {
+            "type": "object",
+            "properties": {
+                "oneClick": {
+                    "description": "Whether to create one-click installer or assisted.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "perMachine": {
+                    "description": "Whether to show install mode installer page (choice per-machine or per-user) for assisted installer. Or whether installation always per all users (per-machine).\n\nIf `oneClick` is `true` (default): Whether to install per all users (per-machine).\n\nIf `oneClick` is `false` and `perMachine` is `true`: no install mode installer page, always install per-machine.\n\nIf `oneClick` is `false` and `perMachine` is `false` (default): install mode installer page.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "allowElevation": {
+                    "description": "*assisted installer only.* Allow requesting for elevation. If false, user will have to restart installer with elevated permissions.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "allowToChangeInstallationDirectory": {
+                    "description": "*assisted installer only.* Whether to allow user to change installation directory.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "installerIcon": {
+                    "description": "The path to installer icon, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerIcon.ico` or application icon.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "uninstallerIcon": {
+                    "description": "The path to uninstaller icon, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/uninstallerIcon.ico` or application icon.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "installerHeader": {
+                    "description": "*assisted installer only.* `MUI_HEADERIMAGE`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.",
+                    "default": "build/installerHeader.bmp",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "installerHeaderIcon": {
+                    "description": "*one-click installer only.* The path to header icon (above the progress bar), relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerHeaderIcon.ico` or application icon.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "installerSidebar": {
+                    "description": "*assisted installer only.* `MUI_WELCOMEFINISHPAGE_BITMAP`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerSidebar.bmp` or `${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp`. Image size 164 × 314 pixels.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "uninstallerSidebar": {
+                    "description": "*assisted installer only.* `MUI_UNWELCOMEFINISHPAGE_BITMAP`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `installerSidebar` option or `build/uninstallerSidebar.bmp` or `build/installerSidebar.bmp` or `${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp`",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "uninstallDisplayName": {
+                    "description": "The uninstaller display name in the control panel.",
+                    "default": "${productName} ${version}",
+                    "type": "string"
+                },
+                "include": {
+                    "description": "The path to NSIS include script to customize installer. Defaults to `build/installer.nsh`. See [Custom NSIS script](#custom-nsis-script).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "script": {
+                    "description": "The path to NSIS script to customize installer. Defaults to `build/installer.nsi`. See [Custom NSIS script](#custom-nsis-script).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "license": {
+                    "description": "The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). In addition to `txt, `rtf` and `html` supported (don't forget to use `target=\"_blank\"` for links).\n\nMultiple license files in different languages are supported — use lang postfix (e.g. `_de`, `_ru`)). For example, create files `license_de.txt` and `license_en.txt` in the build resources.\nIf OS language is german, `license_de.txt` will be displayed. See map of [language code to name](https://github.com/meikidd/iso-639-1/blob/master/src/data.js).\n\nAppropriate license file will be selected by user OS language.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName} Setup ${version}.${ext}`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "deleteAppDataOnUninstall": {
+                    "description": "*one-click installer only.* Whether to delete app data on uninstall.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "differentialPackage": {
+                    "type": "boolean"
+                },
+                "displayLanguageSelector": {
+                    "description": "Whether to display a language selection dialog. Not recommended (by default will be detected using OS language).",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "installerLanguages": {
+                    "description": "The installer languages (e.g. `en_US`, `de_DE`). Change only if you understand what do you do and for what.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "language": {
+                    "description": "[LCID Dec](https://msdn.microsoft.com/en-au/goglobal/bb964664.aspx), defaults to `1033`(`English - United States`).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "multiLanguageInstaller": {
+                    "description": "Whether to create multi-language installer. Defaults to `unicode` option value.",
+                    "type": "boolean"
+                },
+                "packElevateHelper": {
+                    "description": "Whether to pack the elevate executable (required for electron-updater if per-machine installer used or can be used in the future). Ignored if `perMachine` is set to `true`.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "preCompressedFileExtensions": {
+                    "description": "The file extension of files that will be not compressed. Applicable only for `extraResources` and `extraFiles` files.",
+                    "default": [
+                        ".avi",
+                        ".mov",
+                        ".m4v",
+                        ".mp4",
+                        ".m4p",
+                        ".qt",
+                        ".mkv",
+                        ".webm",
+                        ".vmdk"
+                    ],
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "unicode": {
+                    "description": "Whether to create [Unicode installer](http://nsis.sourceforge.net/Docs/Chapter1.html#intro-unicode).",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "guid": {
+                    "description": "See [GUID vs Application Name](../configuration/nsis#guid-vs-application-name).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "warningsAsErrors": {
+                    "description": "If `warningsAsErrors` is `true` (default): NSIS will treat warnings as errors. If `warningsAsErrors` is `false`: NSIS will allow warnings.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "useZip": {
+                    "default": false,
+                    "type": "boolean"
+                },
+                "customNsisBinary": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/CustomNsisBinary"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "debugLogging": {
+                    "description": "Whether or not to enable NSIS logging for debugging.\nNote: Requires a debug-enabled NSIS build.\nelectron-builder's included `makensis` only supports building debug-enabled NSIS installers on Windows currently\nhttps://github.com/electron-userland/electron-builder/issues/5119#issuecomment-811353612",
+                    "type": [
+                        "null",
+                        "boolean"
+                    ]
+                },
+                "runAfterFinish": {
+                    "description": "Whether to run the installed application after finish. For assisted installer corresponding checkbox will be removed.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "createDesktopShortcut": {
+                    "description": "Whether to create desktop shortcut. Set to `always` if to recreate also on reinstall (even if removed by user).",
+                    "default": true,
+                    "enum": [
+                        "always",
+                        false,
+                        true
+                    ]
+                },
+                "createStartMenuShortcut": {
+                    "description": "Whether to create start menu shortcut.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "menuCategory": {
+                    "description": "Whether to create submenu for start menu shortcut and program files directory. If `true`, company name will be used. Or string value.",
+                    "default": false,
+                    "type": [
+                        "string",
+                        "boolean"
+                    ]
+                },
+                "shortcutName": {
+                    "description": "The name that will be used for all shortcuts. Defaults to the application name.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "CustomNsisBinary": {
+            "type": "object",
+            "properties": {
+                "url": {
+                    "default": "https://github.com/electron-userland/electron-builder-binaries/releases/download",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "checksum": {
+                    "default": "o+YZsXHp8LNihhuk7JsCDhdIgx0MKKK+1b3sGD+4zX5djZULe4/4QMcAsfQ+0r+a8FnwBt7BVBHkIkJHjKQ0sg==",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "version": {
+                    "default": "3.0.4.2",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                }
+            },
+            "required": [
+                "url"
+            ]
+        },
+        "NsisWebOptions": {
+            "description": "Web Installer options.",
+            "type": "object",
+            "properties": {
+                "appPackageUrl": {
+                    "description": "The application package download URL. Optional — by default computed using publish configuration.\n\nURL like `https://example.com/download/latest` allows web installer to be version independent (installer will download latest application package).\nPlease note — it is [full URL](https://github.com/electron-userland/electron-builder/issues/1810#issuecomment-317650878).\n\nCustom `X-Arch` http header is set to `32` or `64`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName} Web Setup ${version}.${ext}`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "oneClick": {
+                    "description": "Whether to create one-click installer or assisted.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "perMachine": {
+                    "description": "Whether to show install mode installer page (choice per-machine or per-user) for assisted installer. Or whether installation always per all users (per-machine).\n\nIf `oneClick` is `true` (default): Whether to install per all users (per-machine).\n\nIf `oneClick` is `false` and `perMachine` is `true`: no install mode installer page, always install per-machine.\n\nIf `oneClick` is `false` and `perMachine` is `false` (default): install mode installer page.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "allowElevation": {
+                    "description": "*assisted installer only.* Allow requesting for elevation. If false, user will have to restart installer with elevated permissions.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "allowToChangeInstallationDirectory": {
+                    "description": "*assisted installer only.* Whether to allow user to change installation directory.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "installerIcon": {
+                    "description": "The path to installer icon, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerIcon.ico` or application icon.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "uninstallerIcon": {
+                    "description": "The path to uninstaller icon, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/uninstallerIcon.ico` or application icon.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "installerHeader": {
+                    "description": "*assisted installer only.* `MUI_HEADERIMAGE`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.",
+                    "default": "build/installerHeader.bmp",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "installerHeaderIcon": {
+                    "description": "*one-click installer only.* The path to header icon (above the progress bar), relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerHeaderIcon.ico` or application icon.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "installerSidebar": {
+                    "description": "*assisted installer only.* `MUI_WELCOMEFINISHPAGE_BITMAP`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerSidebar.bmp` or `${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp`. Image size 164 × 314 pixels.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "uninstallerSidebar": {
+                    "description": "*assisted installer only.* `MUI_UNWELCOMEFINISHPAGE_BITMAP`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `installerSidebar` option or `build/uninstallerSidebar.bmp` or `build/installerSidebar.bmp` or `${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp`",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "uninstallDisplayName": {
+                    "description": "The uninstaller display name in the control panel.",
+                    "default": "${productName} ${version}",
+                    "type": "string"
+                },
+                "include": {
+                    "description": "The path to NSIS include script to customize installer. Defaults to `build/installer.nsh`. See [Custom NSIS script](#custom-nsis-script).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "script": {
+                    "description": "The path to NSIS script to customize installer. Defaults to `build/installer.nsi`. See [Custom NSIS script](#custom-nsis-script).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "license": {
+                    "description": "The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). In addition to `txt, `rtf` and `html` supported (don't forget to use `target=\"_blank\"` for links).\n\nMultiple license files in different languages are supported — use lang postfix (e.g. `_de`, `_ru`)). For example, create files `license_de.txt` and `license_en.txt` in the build resources.\nIf OS language is german, `license_de.txt` will be displayed. See map of [language code to name](https://github.com/meikidd/iso-639-1/blob/master/src/data.js).\n\nAppropriate license file will be selected by user OS language.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "deleteAppDataOnUninstall": {
+                    "description": "*one-click installer only.* Whether to delete app data on uninstall.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "differentialPackage": {
+                    "type": "boolean"
+                },
+                "displayLanguageSelector": {
+                    "description": "Whether to display a language selection dialog. Not recommended (by default will be detected using OS language).",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "installerLanguages": {
+                    "description": "The installer languages (e.g. `en_US`, `de_DE`). Change only if you understand what do you do and for what.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "language": {
+                    "description": "[LCID Dec](https://msdn.microsoft.com/en-au/goglobal/bb964664.aspx), defaults to `1033`(`English - United States`).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "multiLanguageInstaller": {
+                    "description": "Whether to create multi-language installer. Defaults to `unicode` option value.",
+                    "type": "boolean"
+                },
+                "packElevateHelper": {
+                    "description": "Whether to pack the elevate executable (required for electron-updater if per-machine installer used or can be used in the future). Ignored if `perMachine` is set to `true`.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "preCompressedFileExtensions": {
+                    "description": "The file extension of files that will be not compressed. Applicable only for `extraResources` and `extraFiles` files.",
+                    "default": [
+                        ".avi",
+                        ".mov",
+                        ".m4v",
+                        ".mp4",
+                        ".m4p",
+                        ".qt",
+                        ".mkv",
+                        ".webm",
+                        ".vmdk"
+                    ],
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "unicode": {
+                    "description": "Whether to create [Unicode installer](http://nsis.sourceforge.net/Docs/Chapter1.html#intro-unicode).",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "guid": {
+                    "description": "See [GUID vs Application Name](../configuration/nsis#guid-vs-application-name).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "warningsAsErrors": {
+                    "description": "If `warningsAsErrors` is `true` (default): NSIS will treat warnings as errors. If `warningsAsErrors` is `false`: NSIS will allow warnings.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "useZip": {
+                    "default": false,
+                    "type": "boolean"
+                },
+                "customNsisBinary": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/CustomNsisBinary"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "debugLogging": {
+                    "description": "Whether or not to enable NSIS logging for debugging.\nNote: Requires a debug-enabled NSIS build.\nelectron-builder's included `makensis` only supports building debug-enabled NSIS installers on Windows currently\nhttps://github.com/electron-userland/electron-builder/issues/5119#issuecomment-811353612",
+                    "type": [
+                        "null",
+                        "boolean"
+                    ]
+                },
+                "runAfterFinish": {
+                    "description": "Whether to run the installed application after finish. For assisted installer corresponding checkbox will be removed.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "createDesktopShortcut": {
+                    "description": "Whether to create desktop shortcut. Set to `always` if to recreate also on reinstall (even if removed by user).",
+                    "default": true,
+                    "enum": [
+                        "always",
+                        false,
+                        true
+                    ]
+                },
+                "createStartMenuShortcut": {
+                    "description": "Whether to create start menu shortcut.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "menuCategory": {
+                    "description": "Whether to create submenu for start menu shortcut and program files directory. If `true`, company name will be used. Or string value.",
+                    "default": false,
+                    "type": [
+                        "string",
+                        "boolean"
+                    ]
+                },
+                "shortcutName": {
+                    "description": "The name that will be used for all shortcuts. Defaults to the application name.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "PortableOptions": {
+            "description": "Portable options.",
+            "type": "object",
+            "properties": {
+                "requestExecutionLevel": {
+                    "description": "The [requested execution level](http://nsis.sourceforge.net/Reference/RequestExecutionLevel) for Windows.",
+                    "default": "user",
+                    "enum": [
+                        "admin",
+                        "highest",
+                        "user"
+                    ],
+                    "type": "string"
+                },
+                "unpackDirName": {
+                    "description": "The unpack directory for the portable app resources.\n\nIf set to a string, it will be the name in [TEMP](https://www.askvg.com/where-does-windows-store-temporary-files-and-how-to-change-temp-folder-location/) directory\nIf set explicitly to `false`, it will use the Windows temp directory ($PLUGINSDIR) that is unique to each launch of the portable application.\n\nDefaults to [uuid](https://github.com/segmentio/ksuid) of build (changed on each build of portable executable).",
+                    "type": [
+                        "string",
+                        "boolean"
+                    ]
+                },
+                "splashImage": {
+                    "description": "The image to show while the portable executable is extracting. This image must be a bitmap (`.bmp`) image.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "unicode": {
+                    "description": "Whether to create [Unicode installer](http://nsis.sourceforge.net/Docs/Chapter1.html#intro-unicode).",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "guid": {
+                    "description": "See [GUID vs Application Name](../configuration/nsis#guid-vs-application-name).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "warningsAsErrors": {
+                    "description": "If `warningsAsErrors` is `true` (default): NSIS will treat warnings as errors. If `warningsAsErrors` is `false`: NSIS will allow warnings.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "useZip": {
+                    "default": false,
+                    "type": "boolean"
+                },
+                "customNsisBinary": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/CustomNsisBinary"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "debugLogging": {
+                    "description": "Whether or not to enable NSIS logging for debugging.\nNote: Requires a debug-enabled NSIS build.\nelectron-builder's included `makensis` only supports building debug-enabled NSIS installers on Windows currently\nhttps://github.com/electron-userland/electron-builder/issues/5119#issuecomment-811353612",
+                    "type": [
+                        "null",
+                        "boolean"
+                    ]
+                }
+            }
+        },
+        "AppXOptions": {
+            "type": "object",
+            "properties": {
+                "applicationId": {
+                    "description": "The application id. Defaults to `identityName`. Can’t start with numbers.",
+                    "type": "string"
+                },
+                "backgroundColor": {
+                    "description": "The background color of the app tile. See [Visual Elements](https://msdn.microsoft.com/en-us/library/windows/apps/br211471.aspx).",
+                    "default": "#464646",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "displayName": {
+                    "description": "A friendly name that can be displayed to users. Corresponds to [Properties.DisplayName](https://msdn.microsoft.com/en-us/library/windows/apps/br211432.aspx).\nDefaults to the application product name.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "identityName": {
+                    "description": "The name. Corresponds to [Identity.Name](https://msdn.microsoft.com/en-us/library/windows/apps/br211441.aspx). Defaults to the [application name](/configuration/configuration#Metadata-name).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publisher": {
+                    "description": "The Windows Store publisher. Not used if AppX is build for testing. See [AppX Package Code Signing](#appx-package-code-signing) below.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publisherDisplayName": {
+                    "description": "A friendly name for the publisher that can be displayed to users. Corresponds to [Properties.PublisherDisplayName](https://msdn.microsoft.com/en-us/library/windows/apps/br211460.aspx).\nDefaults to company name from the application metadata.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "languages": {
+                    "description": "The list of [supported languages](https://docs.microsoft.com/en-us/windows/uwp/globalizing/manage-language-and-region#specify-the-supported-languages-in-the-apps-manifest) that will be listed in the Windows Store.\nThe first entry (index 0) will be the default language.\nDefaults to en-US if omitted.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "addAutoLaunchExtension": {
+                    "description": "Whether to add auto launch extension. Defaults to `true` if [electron-winstore-auto-launch](https://github.com/felixrieseberg/electron-winstore-auto-launch) in the dependencies.",
+                    "type": "boolean"
+                },
+                "customExtensionsPath": {
+                    "description": "Relative path to custom extensions xml to be included in an `appmanifest.xml`.",
+                    "type": "string"
+                },
+                "showNameOnTiles": {
+                    "description": "Whether to overlay the app's name on top of tile images on the Start screen. Defaults to `false`. (https://docs.microsoft.com/en-us/uwp/schemas/appxpackage/uapmanifestschema/element-uap-shownameontiles) in the dependencies.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "electronUpdaterAware": {
+                    "default": false,
+                    "type": "boolean"
+                },
+                "setBuildNumber": {
+                    "description": "Whether to set build number. See https://github.com/electron-userland/electron-builder/issues/3875",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "makeappxArgs": {
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "MsiOptions": {
+            "type": "object",
+            "properties": {
+                "oneClick": {
+                    "description": "One-click installation.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "upgradeCode": {
+                    "description": "The [upgrade code](https://msdn.microsoft.com/en-us/library/windows/desktop/aa372375(v=vs.85).aspx). Optional, by default generated using app id.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "warningsAsErrors": {
+                    "description": "If `warningsAsErrors` is `true` (default): treat warnings as errors. If `warningsAsErrors` is `false`: allow warnings.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "additionalWixArgs": {
+                    "description": "Any additional arguments to be passed to the WiX installer compiler, such as `[\"-ext\", \"WixUtilExtension\"]`",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "perMachine": {
+                    "description": "Whether to install per all users (per-machine).",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "runAfterFinish": {
+                    "description": "Whether to run the installed application after finish. For assisted installer corresponding checkbox will be removed.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "createDesktopShortcut": {
+                    "description": "Whether to create desktop shortcut. Set to `always` if to recreate also on reinstall (even if removed by user).",
+                    "default": true,
+                    "enum": [
+                        "always",
+                        false,
+                        true
+                    ]
+                },
+                "createStartMenuShortcut": {
+                    "description": "Whether to create start menu shortcut.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "menuCategory": {
+                    "description": "Whether to create submenu for start menu shortcut and program files directory. If `true`, company name will be used. Or string value.",
+                    "default": false,
+                    "type": [
+                        "string",
+                        "boolean"
+                    ]
+                },
+                "shortcutName": {
+                    "description": "The name that will be used for all shortcuts. Defaults to the application name.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "SquirrelWindowsOptions": {
+            "type": "object",
+            "properties": {
+                "iconUrl": {
+                    "description": "A URL to an ICO file to use as the application icon (displayed in Control Panel > Programs and Features). Defaults to the Electron icon.\n\nPlease note — [local icon file url is not accepted](https://github.com/atom/grunt-electron-installer/issues/73), must be https/http.\n\nIf you don't plan to build windows installer, you can omit it.\nIf your project repository is public on GitHub, it will be `https://github.com/${u}/${p}/blob/master/build/icon.ico?raw=true` by default.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "loadingGif": {
+                    "description": "The path to a .gif file to display during install. `build/install-spinner.gif` will be used if exists (it is a recommended way to set)\n(otherwise [default](https://github.com/electron/windows-installer/blob/master/resources/install-spinner.gif)).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "msi": {
+                    "description": "Whether to create an MSI installer. Defaults to `false` (MSI is not created).",
+                    "type": "boolean"
+                },
+                "remoteReleases": {
+                    "description": "A URL to your existing updates. Or `true` to automatically set to your GitHub repository. If given, these will be downloaded to create delta updates.",
+                    "type": [
+                        "null",
+                        "string",
+                        "boolean"
+                    ]
+                },
+                "remoteToken": {
+                    "description": "Authentication token for remote updates",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "useAppIdAsId": {
+                    "description": "Use `appId` to identify package instead of `name`.",
+                    "type": "boolean"
+                },
+                "name": {
+                    "description": "https://github.com/electron-userland/electron-builder/issues/1743",
+                    "type": "string"
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "LinuxConfiguration": {
+            "type": "object",
+            "properties": {
+                "target": {
+                    "description": "Target package type: list of `AppImage`, `snap`, `deb`, `rpm`, `freebsd`, `pacman`, `p5p`, `apk`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir`.\n\nelectron-builder [docker image](/multi-platform-build#docker) can be used to build Linux targets on any platform.\n\nPlease [do not put an AppImage into another archive](https://github.com/probonopd/AppImageKit/wiki/Creating-AppImages#common-mistake) like a .zip or .tar.gz.",
+                    "default": "AppImage",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/TargetConfiguration"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/TargetConfiguration"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "maintainer": {
+                    "description": "The maintainer. Defaults to [author](/configuration/configuration#Metadata-author).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "vendor": {
+                    "description": "The vendor. Defaults to [author](/configuration/configuration#Metadata-author).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "icon": {
+                    "description": "The path to icon set directory or one png file, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory. The icon filename must contain the size (e.g. 32x32.png) of the icon.\nBy default will be generated automatically based on the macOS icns file.",
+                    "type": "string"
+                },
+                "packageCategory": {
+                    "description": "backward compatibility + to allow specify fpm-only category for all possible fpm targets in one place",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "synopsis": {
+                    "description": "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "description": {
+                    "description": "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "category": {
+                    "description": "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "mimeTypes": {
+                    "description": "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "desktop": {
+                    "description": "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value)."
+                },
+                "executableArgs": {
+                    "description": "The executable parameters. Pass to executableName",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "appId": {
+                    "description": "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
+                    "default": "com.electron.${name}",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "executableName": {
+                    "description": "The executable name. Defaults to `productName`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "compression": {
+                    "description": "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
+                    "default": "normal",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "maximum",
+                                "normal",
+                                "store"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "files": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "extraResources": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "extraFiles": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "asar": {
+                    "description": "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work.",
+                    "default": true,
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/AsarOptions"
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "boolean"
+                            ]
+                        }
+                    ]
+                },
+                "asarUnpack": {
+                    "description": "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "fileAssociations": {
+                    "description": "The file associations.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileAssociation"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/FileAssociation"
+                            }
+                        }
+                    ]
+                },
+                "protocols": {
+                    "description": "The URL protocol schemes.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/Protocol"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/Protocol"
+                            }
+                        }
+                    ]
+                },
+                "forceCodeSigning": {
+                    "description": "Whether to fail if app will be not code signed.",
+                    "type": "boolean"
+                },
+                "electronUpdaterCompatibility": {
+                    "description": "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "detectUpdateChannel": {
+                    "description": "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "generateUpdatesFilesForAllChannels": {
+                    "description": "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "releaseInfo": {
+                    "description": "The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes=\"new features\"\n```",
+                    "$ref": "#/definitions/ReleaseInfo"
+                },
+                "cscLink": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "cscKeyPassword": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "defaultArch": {
+                    "type": "string"
+                }
+            }
+        },
+        "DebOptions": {
+            "type": "object",
+            "properties": {
+                "depends": {
+                    "description": "Package dependencies. Defaults to `[\"gconf2\", \"gconf-service\", \"libnotify4\", \"libappindicator1\", \"libxtst6\", \"libnss3\"]`.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "packageCategory": {
+                    "description": "The [package category](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Section).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "priority": {
+                    "description": "The [Priority](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Priority) attribute.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "compression": {
+                    "description": "The compression type.",
+                    "default": "xz",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "bzip2",
+                                "gz",
+                                "xz"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "icon": {
+                    "type": "string"
+                },
+                "packageName": {
+                    "description": "The name of the package.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "vendor": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "maintainer": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "afterInstall": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "afterRemove": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "fpm": {
+                    "description": "*Advanced only* The [fpm](https://github.com/jordansissel/fpm/wiki#usage) options.\n\nExample: `[\"--before-install=build/deb-preinstall.sh\", \"--after-upgrade=build/deb-postinstall.sh\"]`",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "synopsis": {
+                    "description": "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "description": {
+                    "description": "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "category": {
+                    "description": "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "mimeTypes": {
+                    "description": "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "desktop": {
+                    "description": "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value)."
+                },
+                "executableArgs": {
+                    "description": "The executable parameters. Pass to executableName",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "SnapOptions": {
+            "type": "object",
+            "properties": {
+                "confinement": {
+                    "description": "The type of [confinement](https://snapcraft.io/docs/reference/confinement) supported by the snap.",
+                    "default": "strict",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "classic",
+                                "devmode",
+                                "strict"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "environment": {
+                    "description": "The custom environment. Defaults to `{\"TMPDIR: \"$XDG_RUNTIME_DIR\"}`. If you set custom, it will be merged with default.",
+                    "anyOf": [
+                        {
+                            "type": "object",
+                            "additionalProperties": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "summary": {
+                    "description": "The 78 character long summary. Defaults to [productName](/configuration/configuration#Configuration-productName).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "grade": {
+                    "description": "The quality grade of the snap. It can be either `devel` (i.e. a development version of the snap, so not to be published to the “stable” or “candidate” channels) or “stable” (i.e. a stable release or release candidate, which can be released to all channels).",
+                    "default": "stable",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "devel",
+                                "stable"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "assumes": {
+                    "description": "The list of features that must be supported by the core in order for this snap to install.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "buildPackages": {
+                    "description": "The list of debian packages needs to be installed for building this snap.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "stagePackages": {
+                    "description": "The list of Ubuntu packages to use that are needed to support the `app` part creation. Like `depends` for `deb`.\nDefaults to `[\"libnspr4\", \"libnss3\", \"libxss1\", \"libappindicator3-1\", \"libsecret-1-0\"]`.\n\nIf list contains `default`, it will be replaced to default list, so, `[\"default\", \"foo\"]` can be used to add custom package `foo` in addition to defaults.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "hooks": {
+                    "description": "The [hooks](https://docs.snapcraft.io/build-snaps/hooks) directory, relative to `build` (build resources directory).",
+                    "default": "build/snap-hooks",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "plugs": {
+                    "description": "The list of [plugs](https://snapcraft.io/docs/reference/interfaces).\nDefaults to `[\"desktop\", \"desktop-legacy\", \"home\", \"x11\", \"unity7\", \"browser-support\", \"network\", \"gsettings\", \"audio-playback\", \"pulseaudio\", \"opengl\"]`.\n\nIf list contains `default`, it will be replaced to default list, so, `[\"default\", \"foo\"]` can be used to add custom plug `foo` in addition to defaults.\n\nAdditional attributes can be specified using object instead of just name of plug:\n```\n[\n {\n   \"browser-sandbox\": {\n     \"interface\": \"browser-support\",\n     \"allow-sandbox\": true\n   },\n },\n \"another-simple-plug-name\"\n]\n```",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/PlugDescriptor"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/PlugDescriptor"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "slots": {
+                    "description": "The list of [slots](https://snapcraft.io/docs/reference/interfaces).\n\nAdditional attributes can be specified using object instead of just name of slot:\n```\n[\n {\n   \"mpris\": {\n     \"name\": \"chromium\"\n   },\n }\n]\n\nIn case you want your application to be a compliant MPris player, you will need to definie\nThe mpris slot with \"chromium\" name.\nThis electron has it [hardcoded](https://source.chromium.org/chromium/chromium/src/+/master:components/system_media_controls/linux/system_media_controls_linux.cc;l=51;bpv=0;bpt=1),\nand we need to pass this name so snap [will allow it](https://forum.snapcraft.io/t/unable-to-use-mpris-interface/15360/7) in strict confinement.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/PlugDescriptor"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/SlotDescriptor"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "after": {
+                    "description": "Specifies any [parts](https://snapcraft.io/docs/reference/parts) that should be built before this part.\nDefaults to `[\"desktop-gtk2\"\"]`.\n\nIf list contains `default`, it will be replaced to default list, so, `[\"default\", \"foo\"]` can be used to add custom parts `foo` in addition to defaults.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "useTemplateApp": {
+                    "description": "Whether to use template snap. Defaults to `true` if `stagePackages` not specified.",
+                    "type": "boolean"
+                },
+                "autoStart": {
+                    "description": "Whether or not the snap should automatically start on login.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "layout": {
+                    "description": "Specifies any files to make accessible from locations such as `/usr`, `/var`, and `/etc`. See [snap layouts](https://snapcraft.io/docs/snap-layouts) to learn more.",
+                    "anyOf": [
+                        {
+                            "type": "object",
+                            "additionalProperties": {
+                                "type": "object",
+                                "additionalProperties": {
+                                    "type": "string"
+                                }
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "appPartStage": {
+                    "description": "Specifies which files from the app part to stage and which to exclude. Individual files, directories, wildcards, globstars, and exclusions are accepted. See [Snapcraft filesets](https://snapcraft.io/docs/snapcraft-filesets) to learn more about the format.\n\nThe defaults can be found in [snap.ts](https://github.com/electron-userland/electron-builder/blob/master/packages/app-builder-lib/templates/snap/snapcraft.yaml#L29).",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "title": {
+                    "description": "An optional title for the snap, may contain uppercase letters and spaces. Defaults to `productName`. See [snap format documentation](https://snapcraft.io/docs/snap-format).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "synopsis": {
+                    "description": "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "description": {
+                    "description": "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "category": {
+                    "description": "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "mimeTypes": {
+                    "description": "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "desktop": {
+                    "description": "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value)."
+                },
+                "executableArgs": {
+                    "description": "The executable parameters. Pass to executableName",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "PlugDescriptor": {
+            "type": "object",
+            "additionalProperties": {
+                "anyOf": [
+                    {
+                        "type": "object",
+                        "additionalProperties": {}
+                    },
+                    {
+                        "type": "null"
+                    }
+                ]
+            }
+        },
+        "SlotDescriptor": {
+            "type": "object",
+            "additionalProperties": {
+                "anyOf": [
+                    {
+                        "type": "object",
+                        "additionalProperties": {}
+                    },
+                    {
+                        "type": "null"
+                    }
+                ]
+            }
+        },
+        "AppImageOptions": {
+            "type": "object",
+            "properties": {
+                "license": {
+                    "description": "The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). Only plain text is supported.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "synopsis": {
+                    "description": "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "description": {
+                    "description": "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "category": {
+                    "description": "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "mimeTypes": {
+                    "description": "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "desktop": {
+                    "description": "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value)."
+                },
+                "executableArgs": {
+                    "description": "The executable parameters. Pass to executableName",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "FlatpakOptions": {
+            "type": "object",
+            "properties": {
+                "license": {
+                    "description": "The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). Only plain text is supported.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "runtime": {
+                    "description": "The name of the runtime that the application uses. Defaults to `org.freedesktop.Platform`.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    "type": "string"
+                },
+                "runtimeVersion": {
+                    "description": "The version of the runtime that the application uses. Defaults to `20.08`.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    "type": "string"
+                },
+                "sdk": {
+                    "description": "The name of the development runtime that the application builds with. Defaults to `org.freedesktop.Sdk`.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    "type": "string"
+                },
+                "base": {
+                    "description": "Start with the files from the specified application. This can be used to create applications that extend another application.\nDefaults to [org.electronjs.Electron2.BaseApp](https://github.com/flathub/org.electronjs.Electron2.BaseApp).\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    "type": "string"
+                },
+                "baseVersion": {
+                    "description": "Use this specific version of the application specified in base. Defaults to `20.08`.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    "type": "string"
+                },
+                "branch": {
+                    "description": "The branch to use when exporting the application. Defaults to `master`.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    "type": "string"
+                },
+                "finishArgs": {
+                    "description": "An array of arguments passed to the flatpak build-finish command. Defaults to:\n```json\n[\n  // Wayland/X11 Rendering\n  \"--socket=wayland\",\n  \"--socket=x11\",\n  \"--share=ipc\",\n  // Open GL\n  \"--device=dri\",\n  // Audio output\n  \"--socket=pulseaudio\",\n  // Read/write home directory access\n  \"--filesystem=home\",\n  // Allow communication with network\n  \"--share=network\",\n  // System notifications with libnotify\n  \"--talk-name=org.freedesktop.Notifications\",\n]\n```\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    "type": "array",
+                    "items": {
+                        "type": "string"
+                    }
+                },
+                "modules": {
+                    "description": "An array of objects specifying the modules to be built in order.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    "type": "array",
+                    "items": {}
+                },
+                "files": {
+                    "description": "Files to copy directly into the app. Should be a list of [source, dest] tuples. Source should be a relative/absolute path to a file/directory to copy into the flatpak, and dest should be the path inside the app install prefix (e.g. /share/applications/).\n\nSee [@malept/flatpak-bundler documentation](https://github.com/malept/flatpak-bundler#build-options).",
+                    "type": "array",
+                    "items": {
+                        "type": "array",
+                        "items": [
+                            {
+                                "type": "string"
+                            },
+                            {
+                                "type": "string"
+                            }
+                        ],
+                        "minItems": 2,
+                        "maxItems": 2
+                    }
+                },
+                "symlinks": {
+                    "description": "Symlinks to create in the app files. Should be a list of [target, location] symlink tuples. Target can be either a relative or absolute path inside the app install prefix, and location should be a absolute path inside the prefix to create the symlink at.\n\nSee [@malept/flatpak-bundler documentation](https://github.com/malept/flatpak-bundler#build-options).",
+                    "type": "array",
+                    "items": {
+                        "type": "array",
+                        "items": [
+                            {
+                                "type": "string"
+                            },
+                            {
+                                "type": "string"
+                            }
+                        ],
+                        "minItems": 2,
+                        "maxItems": 2
+                    }
+                },
+                "useWaylandFlags": {
+                    "description": "Whether to enable the Wayland specific flags (`--enable-features=UseOzonePlatform --ozone-platform=wayland`) in the wrapper script. These flags are only available starting with Electron version 12. Defaults to `false`.",
+                    "type": "boolean"
+                },
+                "synopsis": {
+                    "description": "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "description": {
+                    "description": "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "category": {
+                    "description": "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "mimeTypes": {
+                    "description": "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "desktop": {
+                    "description": "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value)."
+                },
+                "executableArgs": {
+                    "description": "The executable parameters. Pass to executableName",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "LinuxTargetSpecificOptions": {
+            "type": "object",
+            "properties": {
+                "depends": {
+                    "description": "Package dependencies.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "compression": {
+                    "description": "The compression type.",
+                    "default": "xz",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "bzip2",
+                                "gz",
+                                "xz"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "icon": {
+                    "type": "string"
+                },
+                "packageCategory": {
+                    "description": "The package category.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "packageName": {
+                    "description": "The name of the package.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "vendor": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "maintainer": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "afterInstall": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "afterRemove": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "fpm": {
+                    "description": "*Advanced only* The [fpm](https://github.com/jordansissel/fpm/wiki#usage) options.\n\nExample: `[\"--before-install=build/deb-preinstall.sh\", \"--after-upgrade=build/deb-postinstall.sh\"]`",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "synopsis": {
+                    "description": "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "description": {
+                    "description": "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "category": {
+                    "description": "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "mimeTypes": {
+                    "description": "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "desktop": {
+                    "description": "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value)."
+                },
+                "executableArgs": {
+                    "description": "The executable parameters. Pass to executableName",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "ElectronDownloadOptions": {
+            "type": "object",
+            "properties": {
+                "version": {
+                    "type": "string"
+                },
+                "cache": {
+                    "description": "The [cache location](https://github.com/electron-userland/electron-download#cache-location).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "mirror": {
+                    "description": "The mirror.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "customDir": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "customFilename": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "strictSSL": {
+                    "type": "boolean"
+                },
+                "isVerifyChecksum": {
+                    "type": "boolean"
+                },
+                "platform": {
+                    "enum": [
+                        "darwin",
+                        "linux",
+                        "mas",
+                        "win32"
+                    ],
+                    "type": "string"
+                },
+                "arch": {
+                    "type": "string"
+                }
+            }
+        },
+        "ElectronBrandingOptions": {
+            "description": "Electron distributables branding options.",
+            "type": "object",
+            "properties": {
+                "projectName": {
+                    "type": "string"
+                },
+                "productName": {
+                    "type": "string"
+                }
+            }
+        }
+    },
+    "$schema": "http://json-schema.org/draft-07/schema#"
+}
diff --git a/node_modules/app-builder-lib/out/schema/metadata-directories.jsc.js b/node_modules/app-builder-lib/out/schema/metadata-directories.jsc.js
new file mode 100644
index 0000000..d3f090e
--- /dev/null
+++ b/node_modules/app-builder-lib/out/schema/metadata-directories.jsc.js
@@ -0,0 +1,7485 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.default = {
+    $ref: "#/definitions/MetadataDirectories",
+    definitions: {
+        MetadataDirectories: {
+            type: "object",
+            properties: {
+                buildResources: {
+                    description: 'The path to build resources.\n\nPlease note — build resources are not packed into the app. If you need to use some files, e.g. as tray icon, please include required files explicitly: `"files": ["**\\/*", "build/icon.*"]`',
+                    default: "build",
+                    type: ["null", "string"],
+                },
+                output: {
+                    description: "The output directory. [File macros](/file-patterns#file-macros) are supported.",
+                    default: "dist",
+                    type: ["null", "string"],
+                },
+                app: {
+                    description: "The application directory (containing the application package.json), defaults to `app`, `www` or working directory.",
+                    type: ["null", "string"],
+                },
+            },
+        },
+        MacConfiguration: {
+            type: "object",
+            properties: {
+                category: {
+                    description: 'The application category type, as shown in the Finder via *View -> Arrange by Application Category* when viewing the Applications directory.\n\nFor example, `"category": "public.app-category.developer-tools"` will set the application category to *Developer Tools*.\n\nValid values are listed in [Apple\'s documentation](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/LaunchServicesKeys.html#//apple_ref/doc/uid/TP40009250-SW8).',
+                    type: ["null", "string"],
+                },
+                target: {
+                    description: "The target package type: list of `default`, `dmg`, `mas`, `mas-dev`, `pkg`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir`. Defaults to `default` (dmg and zip for Squirrel.Mac).",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/TargetConfiguration",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/TargetConfiguration",
+                                    },
+                                    {
+                                        enum: ["7z", "default", "dir", "dmg", "mas", "mas-dev", "pkg", "tar.bz2", "tar.gz", "tar.lz", "tar.xz", "zip"],
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            enum: ["7z", "default", "dir", "dmg", "mas", "mas-dev", "pkg", "tar.bz2", "tar.gz", "tar.lz", "tar.xz", "zip"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                identity: {
+                    description: "The name of certificate to use when signing. Consider using environment variables [CSC_LINK or CSC_NAME](/code-signing) instead of specifying this option.\nMAS installer identity is specified in the [mas](/configuration/mas).",
+                    type: ["null", "string"],
+                },
+                icon: {
+                    description: "The path to application icon.",
+                    default: "build/icon.icns",
+                    type: ["null", "string"],
+                },
+                entitlements: {
+                    description: "The path to entitlements file for signing the app. `build/entitlements.mac.plist` will be used if exists (it is a recommended way to set).\nMAS entitlements is specified in the [mas](/configuration/mas).",
+                    type: ["null", "string"],
+                },
+                entitlementsInherit: {
+                    description: "The path to child entitlements which inherit the security settings for signing frameworks and bundles of a distribution. `build/entitlements.mac.inherit.plist` will be used if exists (it is a recommended way to set).\nOtherwise [default](https://github.com/electron-userland/electron-osx-sign/blob/master/default.entitlements.darwin.inherit.plist).\n\nThis option only applies when signing with `entitlements` provided.",
+                    type: ["null", "string"],
+                },
+                entitlementsLoginHelper: {
+                    description: "Path to login helper entitlement file.\nWhen using App Sandbox, the the `com.apple.security.inherit` key that is normally in the inherited entitlements cannot be inherited since the login helper is a standalone executable.\nDefaults to the value provided for `entitlements`. This option only applies when signing with `entitlements` provided.",
+                    type: ["null", "string"],
+                },
+                provisioningProfile: {
+                    description: "The path to the provisioning profile to use when signing, absolute or relative to the app root.",
+                    type: ["null", "string"],
+                },
+                bundleVersion: {
+                    description: "The `CFBundleVersion`. Do not use it unless [you need to](https://github.com/electron-userland/electron-builder/issues/565#issuecomment-230678643).",
+                    type: ["null", "string"],
+                },
+                bundleShortVersion: {
+                    description: "The `CFBundleShortVersionString`. Do not use it unless you need to.",
+                    type: ["null", "string"],
+                },
+                darkModeSupport: {
+                    description: "Whether a dark mode is supported. If your app does have a dark mode, you can make your app follow the system-wide dark mode setting.",
+                    default: false,
+                    type: "boolean",
+                },
+                helperBundleId: {
+                    description: "The bundle identifier to use in the application helper's plist.",
+                    default: "${appBundleIdentifier}.helper",
+                    type: ["null", "string"],
+                },
+                helperRendererBundleId: {
+                    description: "The bundle identifier to use in the Renderer helper's plist.",
+                    default: "${appBundleIdentifier}.helper.Renderer",
+                    type: ["null", "string"],
+                },
+                helperPluginBundleId: {
+                    description: "The bundle identifier to use in the Plugin helper's plist.",
+                    default: "${appBundleIdentifier}.helper.Plugin",
+                    type: ["null", "string"],
+                },
+                helperGPUBundleId: {
+                    description: "The bundle identifier to use in the GPU helper's plist.",
+                    default: "${appBundleIdentifier}.helper.GPU",
+                    type: ["null", "string"],
+                },
+                helperEHBundleId: {
+                    description: "The bundle identifier to use in the EH helper's plist.",
+                    default: "${appBundleIdentifier}.helper.EH",
+                    type: ["null", "string"],
+                },
+                helperNPBundleId: {
+                    description: "The bundle identifier to use in the NP helper's plist.",
+                    default: "${appBundleIdentifier}.helper.NP",
+                    type: ["null", "string"],
+                },
+                type: {
+                    description: "Whether to sign app for development or for distribution.",
+                    default: "distribution",
+                    anyOf: [
+                        {
+                            enum: ["development", "distribution"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                extendInfo: {
+                    description: "The extra entries for `Info.plist`.",
+                },
+                binaries: {
+                    description: "Paths of any extra binaries that need to be signed.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                minimumSystemVersion: {
+                    description: "The minimum version of macOS required for the app to run. Corresponds to `LSMinimumSystemVersion`.",
+                    type: ["null", "string"],
+                },
+                requirements: {
+                    description: "Path of [requirements file](https://developer.apple.com/library/mac/documentation/Security/Conceptual/CodeSigningGuide/RequirementLang/RequirementLang.html) used in signing. Not applicable for MAS.",
+                    type: ["null", "string"],
+                },
+                electronLanguages: {
+                    description: "The electron locales. By default Electron locales used as is.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "string",
+                        },
+                    ],
+                },
+                cscInstallerLink: {
+                    type: ["null", "string"],
+                },
+                cscInstallerKeyPassword: {
+                    type: ["null", "string"],
+                },
+                extraDistFiles: {
+                    description: "Extra files to put in archive. Not applicable for `tar.*`.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                hardenedRuntime: {
+                    description: "Whether your app has to be signed with hardened runtime.",
+                    default: true,
+                    type: "boolean",
+                },
+                gatekeeperAssess: {
+                    description: "Whether to let electron-osx-sign validate the signing or not.",
+                    default: false,
+                    type: "boolean",
+                },
+                strictVerify: {
+                    description: "Whether to let electron-osx-sign verify the contents or not.",
+                    default: true,
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["string", "boolean"],
+                        },
+                    ],
+                },
+                signIgnore: {
+                    description: "Regex or an array of regex's that signal skipping signing a file.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                timestamp: {
+                    description: "Specify the URL of the timestamp authority server",
+                    type: ["null", "string"],
+                },
+                appId: {
+                    description: "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
+                    default: "com.electron.${name}",
+                    type: ["null", "string"],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
+                    type: ["null", "string"],
+                },
+                executableName: {
+                    description: "The executable name. Defaults to `productName`.",
+                    type: ["null", "string"],
+                },
+                compression: {
+                    description: "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
+                    default: "normal",
+                    anyOf: [
+                        {
+                            enum: ["maximum", "normal", "store"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                files: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                extraResources: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                extraFiles: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                asar: {
+                    description: "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work.",
+                    default: true,
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/AsarOptions",
+                        },
+                        {
+                            type: ["null", "boolean"],
+                        },
+                    ],
+                },
+                asarUnpack: {
+                    description: "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                fileAssociations: {
+                    description: "The file associations.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileAssociation",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                $ref: "#/definitions/FileAssociation",
+                            },
+                        },
+                    ],
+                },
+                protocols: {
+                    description: "The URL protocol schemes.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/Protocol",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                $ref: "#/definitions/Protocol",
+                            },
+                        },
+                    ],
+                },
+                forceCodeSigning: {
+                    description: "Whether to fail if app will be not code signed.",
+                    type: "boolean",
+                },
+                electronUpdaterCompatibility: {
+                    description: "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                detectUpdateChannel: {
+                    description: "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
+                    default: true,
+                    type: "boolean",
+                },
+                generateUpdatesFilesForAllChannels: {
+                    description: "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
+                    default: false,
+                    type: "boolean",
+                },
+                releaseInfo: {
+                    description: 'The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes="new features"\n```',
+                    $ref: "#/definitions/ReleaseInfo",
+                },
+                cscLink: {
+                    type: ["null", "string"],
+                },
+                cscKeyPassword: {
+                    type: ["null", "string"],
+                },
+                defaultArch: {
+                    type: "string",
+                },
+            },
+        },
+        TargetConfiguration: {
+            type: "object",
+            properties: {
+                target: {
+                    description: "The target name. e.g. `snap`.",
+                    type: "string",
+                },
+                arch: {
+                    description: "The arch or list of archs.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                enum: ["arm64", "armv7l", "ia32", "universal", "x64"],
+                                type: "string",
+                            },
+                        },
+                        {
+                            enum: ["arm64", "armv7l", "ia32", "universal", "x64"],
+                            type: "string",
+                        },
+                    ],
+                },
+            },
+            required: ["target"],
+        },
+        FileSet: {
+            type: "object",
+            properties: {
+                from: {
+                    description: "The source path relative to the project directory.",
+                    type: "string",
+                },
+                to: {
+                    description: "The destination path relative to the app's content directory for `extraFiles` and the app's resource directory for `extraResources`.",
+                    type: "string",
+                },
+                filter: {
+                    description: "The [glob patterns](/file-patterns).",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "string",
+                        },
+                    ],
+                },
+            },
+        },
+        AsarOptions: {
+            type: "object",
+            properties: {
+                smartUnpack: {
+                    description: "Whether to automatically unpack executables files.",
+                    default: true,
+                    type: "boolean",
+                },
+                ordering: {
+                    type: ["null", "string"],
+                },
+                externalAllowed: {
+                    description: "Allows external asar files.",
+                    default: false,
+                    type: "boolean",
+                },
+            },
+        },
+        FileAssociation: {
+            description: "File associations.\n\nmacOS (corresponds to [CFBundleDocumentTypes](https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-101685)) and NSIS only.\n\nOn Windows works only if [nsis.perMachine](https://electron.build/configuration/configuration#NsisOptions-perMachine) is set to `true`.",
+            type: "object",
+            properties: {
+                ext: {
+                    description: "The extension (minus the leading period). e.g. `png`.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "string",
+                        },
+                    ],
+                },
+                name: {
+                    description: "The name. e.g. `PNG`. Defaults to `ext`.",
+                    type: ["null", "string"],
+                },
+                description: {
+                    description: "*windows-only.* The description.",
+                    type: ["null", "string"],
+                },
+                mimeType: {
+                    description: "*linux-only.* The mime-type.",
+                    type: ["null", "string"],
+                },
+                icon: {
+                    description: "The path to icon (`.icns` for MacOS and `.ico` for Windows), relative to `build` (build resources directory). Defaults to `${firstExt}.icns`/`${firstExt}.ico` (if several extensions specified, first is used) or to application icon.\n\nNot supported on Linux, file issue if need (default icon will be `x-office-document`).",
+                    type: ["null", "string"],
+                },
+                role: {
+                    description: "*macOS-only* The app’s role with respect to the type. The value can be `Editor`, `Viewer`, `Shell`, or `None`. Corresponds to `CFBundleTypeRole`.",
+                    default: "Editor",
+                    type: "string",
+                },
+                isPackage: {
+                    description: "*macOS-only* Whether the document is distributed as a bundle. If set to true, the bundle directory is treated as a file. Corresponds to `LSTypeIsPackage`.",
+                    type: "boolean",
+                },
+                rank: {
+                    description: "*macOS-only* The app’s rank with respect to the type. The value can be `Owner`, `Default`, `Alternate`, or `None`. Corresponds to `LSHandlerRank`.",
+                    default: "Default",
+                    type: "string",
+                },
+            },
+            required: ["ext"],
+        },
+        Protocol: {
+            description: "URL Protocol Schemes. Protocols to associate the app with. macOS only.\n\nPlease note — on macOS [you need to register an `open-url` event handler](http://electron.atom.io/docs/api/app/#event-open-url-macos).",
+            type: "object",
+            properties: {
+                name: {
+                    description: "The name. e.g. `IRC server URL`.",
+                    type: "string",
+                },
+                schemes: {
+                    description: 'The schemes. e.g. `["irc", "ircs"]`.',
+                    type: "array",
+                    items: {
+                        type: "string",
+                    },
+                },
+                role: {
+                    description: "*macOS-only* The app’s role with respect to the type.",
+                    default: "Editor",
+                    enum: ["Editor", "None", "Shell", "Viewer"],
+                    type: "string",
+                },
+            },
+            required: ["name", "schemes"],
+        },
+        GithubOptions: {
+            description: "[GitHub](https://help.github.com/articles/about-releases/) options.\n\nGitHub [personal access token](https://help.github.com/articles/creating-an-access-token-for-command-line-use/) is required. You can generate by going to [https://github.com/settings/tokens/new](https://github.com/settings/tokens/new). The access token should have the repo scope/permission.\nDefine `GH_TOKEN` environment variable.",
+            type: "object",
+            properties: {
+                provider: {
+                    description: "The provider. Must be `github`.",
+                    type: "string",
+                    enum: ["github"],
+                },
+                repo: {
+                    description: "The repository name. [Detected automatically](#github-repository-and-bintray-package).",
+                    type: ["null", "string"],
+                },
+                owner: {
+                    description: "The owner.",
+                    type: ["null", "string"],
+                },
+                vPrefixedTagName: {
+                    description: "Whether to use `v`-prefixed tag name.",
+                    default: true,
+                    type: "boolean",
+                },
+                host: {
+                    description: "The host (including the port if need).",
+                    default: "github.com",
+                    type: ["null", "string"],
+                },
+                protocol: {
+                    description: "The protocol. GitHub Publisher supports only `https`.",
+                    default: "https",
+                    anyOf: [
+                        {
+                            enum: ["http", "https"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                token: {
+                    description: "The access token to support auto-update from private github repositories. Never specify it in the configuration files. Only for [setFeedURL](/auto-update#appupdatersetfeedurloptions).",
+                    type: ["null", "string"],
+                },
+                private: {
+                    description: "Whether to use private github auto-update provider if `GH_TOKEN` environment variable is defined. See [Private GitHub Update Repo](/auto-update#private-github-update-repo).",
+                    type: ["null", "boolean"],
+                },
+                releaseType: {
+                    description: "The type of release. By default `draft` release will be created.\n\nAlso you can set release type using environment variable. If `EP_DRAFT`is set to `true` — `draft`, if `EP_PRE_RELEASE`is set to `true` — `prerelease`.",
+                    default: "draft",
+                    anyOf: [
+                        {
+                            enum: ["draft", "prerelease", "release"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                publisherName: {
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                updaterCacheDirName: {
+                    type: ["null", "string"],
+                },
+                publishAutoUpdate: {
+                    description: "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    default: true,
+                    type: "boolean",
+                },
+                requestHeaders: {
+                    description: "Any custom request headers",
+                    $ref: "#/definitions/OutgoingHttpHeaders",
+                },
+            },
+            required: ["provider"],
+        },
+        OutgoingHttpHeaders: {
+            type: "object",
+        },
+        S3Options: {
+            type: "object",
+            properties: {
+                provider: {
+                    description: "The provider. Must be `s3`.",
+                    type: "string",
+                    enum: ["s3"],
+                },
+                bucket: {
+                    description: "The bucket name.",
+                    type: "string",
+                },
+                region: {
+                    description: "The region. Is determined and set automatically when publishing.",
+                    type: ["null", "string"],
+                },
+                acl: {
+                    description: "The ACL. Set to `null` to not [add](https://github.com/electron-userland/electron-builder/issues/1822).\n\nPlease see [required permissions for the S3 provider](https://github.com/electron-userland/electron-builder/issues/1618#issuecomment-314679128).",
+                    default: "public-read",
+                    anyOf: [
+                        {
+                            enum: ["private", "public-read"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                storageClass: {
+                    description: "The type of storage to use for the object.",
+                    default: "STANDARD",
+                    anyOf: [
+                        {
+                            enum: ["REDUCED_REDUNDANCY", "STANDARD", "STANDARD_IA"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                encryption: {
+                    description: "Server-side encryption algorithm to use for the object.",
+                    anyOf: [
+                        {
+                            enum: ["AES256", "aws:kms"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                endpoint: {
+                    description: "The endpoint URI to send requests to. The default endpoint is built from the configured region.\nThe endpoint should be a string like `https://{service}.{region}.amazonaws.com`.",
+                    type: ["null", "string"],
+                },
+                channel: {
+                    description: "The update channel.",
+                    default: "latest",
+                    type: ["null", "string"],
+                },
+                path: {
+                    description: "The directory path.",
+                    default: "/",
+                    type: ["null", "string"],
+                },
+                publisherName: {
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                updaterCacheDirName: {
+                    type: ["null", "string"],
+                },
+                publishAutoUpdate: {
+                    description: "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    default: true,
+                    type: "boolean",
+                },
+                requestHeaders: {
+                    description: "Any custom request headers",
+                    $ref: "#/definitions/OutgoingHttpHeaders",
+                },
+            },
+            required: ["bucket", "provider"],
+        },
+        SpacesOptions: {
+            description: "[DigitalOcean Spaces](https://www.digitalocean.com/community/tutorials/an-introduction-to-digitalocean-spaces) options.\nAccess key is required, define `DO_KEY_ID` and `DO_SECRET_KEY` environment variables.",
+            type: "object",
+            properties: {
+                provider: {
+                    description: "The provider. Must be `spaces`.",
+                    type: "string",
+                    enum: ["spaces"],
+                },
+                name: {
+                    description: "The space name.",
+                    type: "string",
+                },
+                region: {
+                    description: "The region (e.g. `nyc3`).",
+                    type: "string",
+                },
+                channel: {
+                    description: "The update channel.",
+                    default: "latest",
+                    type: ["null", "string"],
+                },
+                path: {
+                    description: "The directory path.",
+                    default: "/",
+                    type: ["null", "string"],
+                },
+                acl: {
+                    description: "The ACL. Set to `null` to not [add](https://github.com/electron-userland/electron-builder/issues/1822).",
+                    default: "public-read",
+                    anyOf: [
+                        {
+                            enum: ["private", "public-read"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                publisherName: {
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                updaterCacheDirName: {
+                    type: ["null", "string"],
+                },
+                publishAutoUpdate: {
+                    description: "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    default: true,
+                    type: "boolean",
+                },
+                requestHeaders: {
+                    description: "Any custom request headers",
+                    $ref: "#/definitions/OutgoingHttpHeaders",
+                },
+            },
+            required: ["name", "provider", "region"],
+        },
+        GenericServerOptions: {
+            description: "Generic (any HTTP(S) server) options.\nIn all publish options [File Macros](/file-patterns#file-macros) are supported.",
+            type: "object",
+            properties: {
+                provider: {
+                    description: "The provider. Must be `generic`.",
+                    type: "string",
+                    enum: ["generic"],
+                },
+                url: {
+                    description: "The base url. e.g. `https://bucket_name.s3.amazonaws.com`.",
+                    type: "string",
+                },
+                channel: {
+                    description: "The channel.",
+                    default: "latest",
+                    type: ["null", "string"],
+                },
+                useMultipleRangeRequest: {
+                    description: "Whether to use multiple range requests for differential update. Defaults to `true` if `url` doesn't contain `s3.amazonaws.com`.",
+                    type: "boolean",
+                },
+                publisherName: {
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                updaterCacheDirName: {
+                    type: ["null", "string"],
+                },
+                publishAutoUpdate: {
+                    description: "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    default: true,
+                    type: "boolean",
+                },
+                requestHeaders: {
+                    description: "Any custom request headers",
+                    $ref: "#/definitions/OutgoingHttpHeaders",
+                },
+            },
+            required: ["provider", "url"],
+        },
+        BintrayOptions: {
+            description: '[Bintray](https://bintray.com/) options. Requires an API key. An API key can be obtained from the user [profile](https://bintray.com/profile/edit) page ("Edit Your Profile" -> API Key).\nDefine `BT_TOKEN` environment variable.',
+            type: "object",
+            properties: {
+                provider: {
+                    description: "The provider. Must be `bintray`.",
+                    type: "string",
+                    enum: ["bintray"],
+                },
+                package: {
+                    description: "The Bintray package name.",
+                    type: ["null", "string"],
+                },
+                repo: {
+                    description: "The Bintray repository name.",
+                    default: "generic",
+                    type: ["null", "string"],
+                },
+                owner: {
+                    description: "The owner.",
+                    type: ["null", "string"],
+                },
+                component: {
+                    description: "The Bintray component (Debian only).",
+                    type: ["null", "string"],
+                },
+                distribution: {
+                    description: "The Bintray distribution (Debian only).",
+                    default: "stable",
+                    type: ["null", "string"],
+                },
+                user: {
+                    description: "The Bintray user account. Used in cases where the owner is an organization.",
+                    type: ["null", "string"],
+                },
+                token: {
+                    type: ["null", "string"],
+                },
+                publisherName: {
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                updaterCacheDirName: {
+                    type: ["null", "string"],
+                },
+                publishAutoUpdate: {
+                    description: "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    default: true,
+                    type: "boolean",
+                },
+                requestHeaders: {
+                    description: "Any custom request headers",
+                    $ref: "#/definitions/OutgoingHttpHeaders",
+                },
+            },
+            required: ["provider"],
+        },
+        CustomPublishOptions: {
+            type: "object",
+            additionalProperties: {},
+            properties: {
+                provider: {
+                    description: "The provider. Must be `custom`.",
+                    type: "string",
+                    enum: ["custom"],
+                },
+                updateProvider: {
+                    description: "The Provider to provide UpdateInfo regarding available updates.  Required\nto use custom providers with electron-updater.",
+                    type: "object",
+                },
+                publisherName: {
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                updaterCacheDirName: {
+                    type: ["null", "string"],
+                },
+                publishAutoUpdate: {
+                    description: "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    default: true,
+                    type: "boolean",
+                },
+                requestHeaders: {
+                    description: "Any custom request headers",
+                    $ref: "#/definitions/OutgoingHttpHeaders",
+                },
+            },
+            required: ["provider"],
+        },
+        KeygenOptions: {
+            description: "Keygen options.\nhttps://keygen.sh/\nDefine `KEYGEN_TOKEN` environment variable.",
+            type: "object",
+            properties: {
+                provider: {
+                    description: "The provider. Must be `keygen`.",
+                    type: "string",
+                    enum: ["keygen"],
+                },
+                account: {
+                    description: "Keygen account's UUID",
+                    type: "string",
+                },
+                product: {
+                    description: "Keygen product's UUID",
+                    type: "string",
+                },
+                channel: {
+                    description: "The channel.",
+                    default: "stable",
+                    type: ["null", "string"],
+                },
+                platform: {
+                    description: "The target Platform. Is set programmatically explicitly for publishing.",
+                    type: "string",
+                },
+                publisherName: {
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                updaterCacheDirName: {
+                    type: ["null", "string"],
+                },
+                publishAutoUpdate: {
+                    description: "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    default: true,
+                    type: "boolean",
+                },
+                requestHeaders: {
+                    description: "Any custom request headers",
+                    $ref: "#/definitions/OutgoingHttpHeaders",
+                },
+            },
+            required: ["account", "product", "provider"],
+        },
+        SnapStoreOptions: {
+            description: "[Snap Store](https://snapcraft.io/) options.",
+            type: "object",
+            properties: {
+                channels: {
+                    description: "The list of channels the snap would be released.",
+                    default: ["edge"],
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                provider: {
+                    $ref: "#/definitions/PublishProvider",
+                    description: "The provider.",
+                },
+                publisherName: {
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                updaterCacheDirName: {
+                    type: ["null", "string"],
+                },
+                publishAutoUpdate: {
+                    description: "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    default: true,
+                    type: "boolean",
+                },
+                requestHeaders: {
+                    description: "Any custom request headers",
+                    $ref: "#/definitions/OutgoingHttpHeaders",
+                },
+            },
+            required: ["provider"],
+        },
+        PublishProvider: {
+            enum: ["bintray", "custom", "generic", "github", "keygen", "s3", "snapStore", "spaces"],
+            type: "string",
+        },
+        ReleaseInfo: {
+            type: "object",
+            properties: {
+                releaseName: {
+                    description: "The release name.",
+                    type: ["null", "string"],
+                },
+                releaseNotes: {
+                    description: "The release notes.",
+                    type: ["null", "string"],
+                },
+                releaseNotesFile: {
+                    description: "The path to release notes file. Defaults to `release-notes-${platform}.md` (where `platform` it is current platform — `mac`, `linux` or `windows`) or `release-notes.md` in the [build resources](#MetadataDirectories-buildResources).",
+                    type: ["null", "string"],
+                },
+                releaseDate: {
+                    description: "The release date.",
+                    type: "string",
+                },
+            },
+        },
+        MasConfiguration: {
+            type: "object",
+            properties: {
+                entitlements: {
+                    description: "The path to entitlements file for signing the app. `build/entitlements.mas.plist` will be used if exists (it is a recommended way to set).\nOtherwise [default](https://github.com/electron-userland/electron-osx-sign/blob/master/default.entitlements.mas.plist).",
+                    type: ["null", "string"],
+                },
+                entitlementsInherit: {
+                    description: "The path to child entitlements which inherit the security settings for signing frameworks and bundles of a distribution. `build/entitlements.mas.inherit.plist` will be used if exists (it is a recommended way to set).\nOtherwise [default](https://github.com/electron-userland/electron-osx-sign/blob/master/default.entitlements.mas.inherit.plist).",
+                    type: ["null", "string"],
+                },
+                binaries: {
+                    description: "Paths of any extra binaries that need to be signed.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                category: {
+                    description: 'The application category type, as shown in the Finder via *View -> Arrange by Application Category* when viewing the Applications directory.\n\nFor example, `"category": "public.app-category.developer-tools"` will set the application category to *Developer Tools*.\n\nValid values are listed in [Apple\'s documentation](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/LaunchServicesKeys.html#//apple_ref/doc/uid/TP40009250-SW8).',
+                    type: ["null", "string"],
+                },
+                target: {
+                    description: "The target package type: list of `default`, `dmg`, `mas`, `mas-dev`, `pkg`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir`. Defaults to `default` (dmg and zip for Squirrel.Mac).",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/TargetConfiguration",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/TargetConfiguration",
+                                    },
+                                    {
+                                        enum: ["7z", "default", "dir", "dmg", "mas", "mas-dev", "pkg", "tar.bz2", "tar.gz", "tar.lz", "tar.xz", "zip"],
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            enum: ["7z", "default", "dir", "dmg", "mas", "mas-dev", "pkg", "tar.bz2", "tar.gz", "tar.lz", "tar.xz", "zip"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                identity: {
+                    description: "The name of certificate to use when signing. Consider using environment variables [CSC_LINK or CSC_NAME](/code-signing) instead of specifying this option.\nMAS installer identity is specified in the [mas](/configuration/mas).",
+                    type: ["null", "string"],
+                },
+                icon: {
+                    description: "The path to application icon.",
+                    default: "build/icon.icns",
+                    type: ["null", "string"],
+                },
+                entitlementsLoginHelper: {
+                    description: "Path to login helper entitlement file.\nWhen using App Sandbox, the the `com.apple.security.inherit` key that is normally in the inherited entitlements cannot be inherited since the login helper is a standalone executable.\nDefaults to the value provided for `entitlements`. This option only applies when signing with `entitlements` provided.",
+                    type: ["null", "string"],
+                },
+                provisioningProfile: {
+                    description: "The path to the provisioning profile to use when signing, absolute or relative to the app root.",
+                    type: ["null", "string"],
+                },
+                bundleVersion: {
+                    description: "The `CFBundleVersion`. Do not use it unless [you need to](https://github.com/electron-userland/electron-builder/issues/565#issuecomment-230678643).",
+                    type: ["null", "string"],
+                },
+                bundleShortVersion: {
+                    description: "The `CFBundleShortVersionString`. Do not use it unless you need to.",
+                    type: ["null", "string"],
+                },
+                darkModeSupport: {
+                    description: "Whether a dark mode is supported. If your app does have a dark mode, you can make your app follow the system-wide dark mode setting.",
+                    default: false,
+                    type: "boolean",
+                },
+                helperBundleId: {
+                    description: "The bundle identifier to use in the application helper's plist.",
+                    default: "${appBundleIdentifier}.helper",
+                    type: ["null", "string"],
+                },
+                helperRendererBundleId: {
+                    description: "The bundle identifier to use in the Renderer helper's plist.",
+                    default: "${appBundleIdentifier}.helper.Renderer",
+                    type: ["null", "string"],
+                },
+                helperPluginBundleId: {
+                    description: "The bundle identifier to use in the Plugin helper's plist.",
+                    default: "${appBundleIdentifier}.helper.Plugin",
+                    type: ["null", "string"],
+                },
+                helperGPUBundleId: {
+                    description: "The bundle identifier to use in the GPU helper's plist.",
+                    default: "${appBundleIdentifier}.helper.GPU",
+                    type: ["null", "string"],
+                },
+                helperEHBundleId: {
+                    description: "The bundle identifier to use in the EH helper's plist.",
+                    default: "${appBundleIdentifier}.helper.EH",
+                    type: ["null", "string"],
+                },
+                helperNPBundleId: {
+                    description: "The bundle identifier to use in the NP helper's plist.",
+                    default: "${appBundleIdentifier}.helper.NP",
+                    type: ["null", "string"],
+                },
+                type: {
+                    description: "Whether to sign app for development or for distribution.",
+                    default: "distribution",
+                    anyOf: [
+                        {
+                            enum: ["development", "distribution"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                extendInfo: {
+                    description: "The extra entries for `Info.plist`.",
+                },
+                minimumSystemVersion: {
+                    description: "The minimum version of macOS required for the app to run. Corresponds to `LSMinimumSystemVersion`.",
+                    type: ["null", "string"],
+                },
+                requirements: {
+                    description: "Path of [requirements file](https://developer.apple.com/library/mac/documentation/Security/Conceptual/CodeSigningGuide/RequirementLang/RequirementLang.html) used in signing. Not applicable for MAS.",
+                    type: ["null", "string"],
+                },
+                electronLanguages: {
+                    description: "The electron locales. By default Electron locales used as is.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "string",
+                        },
+                    ],
+                },
+                cscInstallerLink: {
+                    type: ["null", "string"],
+                },
+                cscInstallerKeyPassword: {
+                    type: ["null", "string"],
+                },
+                extraDistFiles: {
+                    description: "Extra files to put in archive. Not applicable for `tar.*`.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                hardenedRuntime: {
+                    description: "Whether your app has to be signed with hardened runtime.",
+                    default: true,
+                    type: "boolean",
+                },
+                gatekeeperAssess: {
+                    description: "Whether to let electron-osx-sign validate the signing or not.",
+                    default: false,
+                    type: "boolean",
+                },
+                strictVerify: {
+                    description: "Whether to let electron-osx-sign verify the contents or not.",
+                    default: true,
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["string", "boolean"],
+                        },
+                    ],
+                },
+                signIgnore: {
+                    description: "Regex or an array of regex's that signal skipping signing a file.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                timestamp: {
+                    description: "Specify the URL of the timestamp authority server",
+                    type: ["null", "string"],
+                },
+                appId: {
+                    description: "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
+                    default: "com.electron.${name}",
+                    type: ["null", "string"],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
+                    type: ["null", "string"],
+                },
+                executableName: {
+                    description: "The executable name. Defaults to `productName`.",
+                    type: ["null", "string"],
+                },
+                compression: {
+                    description: "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
+                    default: "normal",
+                    anyOf: [
+                        {
+                            enum: ["maximum", "normal", "store"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                files: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                extraResources: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                extraFiles: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                asar: {
+                    description: "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work.",
+                    default: true,
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/AsarOptions",
+                        },
+                        {
+                            type: ["null", "boolean"],
+                        },
+                    ],
+                },
+                asarUnpack: {
+                    description: "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                fileAssociations: {
+                    description: "The file associations.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileAssociation",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                $ref: "#/definitions/FileAssociation",
+                            },
+                        },
+                    ],
+                },
+                protocols: {
+                    description: "The URL protocol schemes.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/Protocol",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                $ref: "#/definitions/Protocol",
+                            },
+                        },
+                    ],
+                },
+                forceCodeSigning: {
+                    description: "Whether to fail if app will be not code signed.",
+                    type: "boolean",
+                },
+                electronUpdaterCompatibility: {
+                    description: "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                detectUpdateChannel: {
+                    description: "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
+                    default: true,
+                    type: "boolean",
+                },
+                generateUpdatesFilesForAllChannels: {
+                    description: "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
+                    default: false,
+                    type: "boolean",
+                },
+                releaseInfo: {
+                    description: 'The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes="new features"\n```',
+                    $ref: "#/definitions/ReleaseInfo",
+                },
+                cscLink: {
+                    type: ["null", "string"],
+                },
+                cscKeyPassword: {
+                    type: ["null", "string"],
+                },
+                defaultArch: {
+                    type: "string",
+                },
+            },
+        },
+        DmgOptions: {
+            type: "object",
+            properties: {
+                background: {
+                    description: "The path to background image (default: `build/background.tiff` or `build/background.png` if exists). The resolution of this file determines the resolution of the installer window.\nIf background is not specified, use `window.size`. Default locations expected background size to be 540x380.",
+                    type: ["null", "string"],
+                },
+                backgroundColor: {
+                    description: "The background color (accepts css colors). Defaults to `#ffffff` (white) if no background image.",
+                    type: ["null", "string"],
+                },
+                icon: {
+                    description: "The path to DMG icon (volume icon), which will be shown when mounted, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to the application icon (`build/icon.icns`).",
+                    type: ["null", "string"],
+                },
+                iconSize: {
+                    description: "The size of all the icons inside the DMG.",
+                    default: 80,
+                    type: ["null", "number"],
+                },
+                iconTextSize: {
+                    description: "The size of all the icon texts inside the DMG.",
+                    default: 12,
+                    type: ["null", "number"],
+                },
+                title: {
+                    description: "The title of the produced DMG, which will be shown when mounted (volume name).\n\nMacro `${productName}`, `${version}` and `${name}` are supported.",
+                    default: "${productName} ${version}",
+                    type: ["null", "string"],
+                },
+                contents: {
+                    description: "The content — to customize icon locations. The x and y coordinates refer to the position of the **center** of the icon (at 1x scale), and do not take the label into account.",
+                    type: "array",
+                    items: {
+                        $ref: "#/definitions/DmgContent",
+                    },
+                },
+                format: {
+                    description: "The disk image format. `ULFO` (lzfse-compressed image (OS X 10.11+ only)).",
+                    default: "UDZO",
+                    enum: ["UDBZ", "UDCO", "UDRO", "UDRW", "UDZO", "ULFO"],
+                    type: "string",
+                },
+                window: {
+                    description: 'The DMG window position and size. With y co-ordinates running from bottom to top.\n\nThe Finder makes sure that the window will be on the user’s display, so if you want your window at the top left of the display you could use `"x": 0, "y": 100000` as the x, y co-ordinates.\nIt is not to be possible to position the window relative to the [top left](https://github.com/electron-userland/electron-builder/issues/3990#issuecomment-512960957) or relative to the center of the user’s screen.',
+                    $ref: "#/definitions/DmgWindow",
+                },
+                internetEnabled: {
+                    description: "Whether to create internet-enabled disk image (when it is downloaded using a browser it will automatically decompress the image, put the application on the desktop, unmount and remove the disk image file).",
+                    default: false,
+                    type: "boolean",
+                },
+                sign: {
+                    description: "Whether to sign the DMG or not. Signing is not required and will lead to unwanted errors in combination with notarization requirements.",
+                    default: false,
+                    type: "boolean",
+                },
+                writeUpdateInfo: {
+                    default: true,
+                    type: "boolean",
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        DmgContent: {
+            type: "object",
+            properties: {
+                x: {
+                    description: "The device-independent pixel offset from the left of the window to the **center** of the icon.",
+                    type: "number",
+                },
+                y: {
+                    description: "The device-independent pixel offset from the top of the window to the **center** of the icon.",
+                    type: "number",
+                },
+                type: {
+                    enum: ["dir", "file", "link"],
+                    type: "string",
+                },
+                name: {
+                    description: "The name of the file within the DMG. Defaults to basename of `path`.",
+                    type: "string",
+                },
+                path: {
+                    description: "The path of the file within the DMG.",
+                    type: "string",
+                },
+            },
+            required: ["x", "y"],
+        },
+        DmgWindow: {
+            type: "object",
+            properties: {
+                x: {
+                    description: "The X position relative to left of the screen.",
+                    default: 400,
+                    type: "number",
+                },
+                y: {
+                    description: "The Y position relative to bottom of the screen.",
+                    default: 100,
+                    type: "number",
+                },
+                width: {
+                    description: "The width. Defaults to background image width or 540.",
+                    type: "number",
+                },
+                height: {
+                    description: "The height. Defaults to background image height or 380.",
+                    type: "number",
+                },
+            },
+        },
+        PkgOptions: {
+            description: "macOS product archive options.",
+            type: "object",
+            properties: {
+                scripts: {
+                    description: "The scripts directory, relative to `build` (build resources directory).\nThe scripts can be in any language so long as the files are marked executable and have the appropriate shebang indicating the path to the interpreter.\nScripts are required to be executable (`chmod +x file`).",
+                    default: "build/pkg-scripts",
+                    type: ["null", "string"],
+                },
+                productbuild: {
+                    description: "should be not documented, only to experiment",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                installLocation: {
+                    description: "The install location. [Do not use it](https://stackoverflow.com/questions/12863944/how-do-you-specify-a-default-install-location-to-home-with-pkgbuild) to create per-user package.\nMostly never you will need to change this option. `/Applications` would install it as expected into `/Applications` if the local system domain is chosen, or into `$HOME/Applications` if the home installation is chosen.",
+                    default: "/Applications",
+                    type: ["null", "string"],
+                },
+                allowAnywhere: {
+                    description: "Whether can be installed at the root of any volume, including non-system volumes. Otherwise, it cannot be installed at the root of a volume.\n\nCorresponds to [enable_anywhere](https://developer.apple.com/library/content/documentation/DeveloperTools/Reference/DistributionDefinitionRef/Chapters/Distribution_XML_Ref.html#//apple_ref/doc/uid/TP40005370-CH100-SW70).",
+                    default: true,
+                    type: ["null", "boolean"],
+                },
+                allowCurrentUserHome: {
+                    description: "Whether can be installed into the current user’s home directory.\nA home directory installation is done as the current user (not as root), and it cannot write outside of the home directory.\nIf the product cannot be installed in the user’s home directory and be not completely functional from user’s home directory.\n\nCorresponds to [enable_currentUserHome](https://developer.apple.com/library/content/documentation/DeveloperTools/Reference/DistributionDefinitionRef/Chapters/Distribution_XML_Ref.html#//apple_ref/doc/uid/TP40005370-CH100-SW70).",
+                    default: true,
+                    type: ["null", "boolean"],
+                },
+                allowRootDirectory: {
+                    description: "Whether can be installed into the root directory. Should usually be `true` unless the product can be installed only to the user’s home directory.\n\nCorresponds to [enable_localSystem](https://developer.apple.com/library/content/documentation/DeveloperTools/Reference/DistributionDefinitionRef/Chapters/Distribution_XML_Ref.html#//apple_ref/doc/uid/TP40005370-CH100-SW70).",
+                    default: true,
+                    type: ["null", "boolean"],
+                },
+                identity: {
+                    description: "The name of certificate to use when signing. Consider using environment variables [CSC_LINK or CSC_NAME](/code-signing) instead of specifying this option.",
+                    type: ["null", "string"],
+                },
+                license: {
+                    description: 'The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). In addition to `txt, `rtf` and `html` supported (don\'t forget to use `target="_blank"` for links).',
+                    type: ["null", "string"],
+                },
+                background: {
+                    description: "Options for the background image for the installer.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/PkgBackgroundOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                welcome: {
+                    description: "The path to the welcome file. This may be used to customize the text on the Introduction page of the installer.",
+                    type: ["null", "string"],
+                },
+                mustClose: {
+                    description: "Identifies applications that must be closed before the package is installed.\\n\\nCorresponds to [must-close](https://developer.apple.com/library/archive/documentation/DeveloperTools/Reference/DistributionDefinitionRef/Chapters/Distribution_XML_Ref.html#//apple_ref/doc/uid/TP40005370-CH100-SW77)",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                conclusion: {
+                    description: 'The path to the conclusion file. This may be used to customize the text on the final "Summary" page of the installer.',
+                    type: ["null", "string"],
+                },
+                isRelocatable: {
+                    description: "Install bundle over previous version if moved by user?",
+                    default: true,
+                    type: ["null", "boolean"],
+                },
+                isVersionChecked: {
+                    description: "Don't install bundle if newer version on disk?",
+                    default: true,
+                    type: ["null", "boolean"],
+                },
+                hasStrictIdentifier: {
+                    description: "Require identical bundle identifiers at install path?",
+                    default: true,
+                    type: ["null", "boolean"],
+                },
+                overwriteAction: {
+                    description: "Specifies how an existing version of the bundle on disk should be handled when the version in\nthe package is installed.\n\nIf you specify upgrade, the bundle in the package atomi-cally replaces any version on disk;\nthis has the effect of deleting old paths that no longer exist in the new version of\nthe bundle.\n\nIf you specify update, the bundle in the package overwrites the version on disk, and any files\nnot contained in the package will be left intact; this is appropriate when you are delivering\nan update-only package.\n\nAnother effect of update is that the package bundle will not be installed at all if there is\nnot already a version on disk; this allows a package to deliver an update for an app that\nthe user might have deleted.",
+                    default: "upgrade",
+                    anyOf: [
+                        {
+                            enum: ["update", "upgrade"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        PkgBackgroundOptions: {
+            description: "Options for the background image in a PKG installer",
+            type: "object",
+            properties: {
+                file: {
+                    description: "Path to the image to use as an installer background.",
+                    type: "string",
+                },
+                alignment: {
+                    description: "Alignment of the background image.\nOptions are: center, left, right, top, bottom, topleft, topright, bottomleft, bottomright",
+                    default: "center",
+                    anyOf: [
+                        {
+                            enum: ["bottom", "bottomleft", "bottomright", "center", "left", "right", "top", "topleft", "topright"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                scaling: {
+                    description: "Scaling of the background image.\nOptions are: tofit, none, proportional",
+                    default: "tofit",
+                    anyOf: [
+                        {
+                            enum: ["none", "proportional", "tofit"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+            },
+        },
+        WindowsConfiguration: {
+            type: "object",
+            properties: {
+                target: {
+                    description: "The target package type: list of `nsis`, `nsis-web` (Web installer), `portable` ([portable](/configuration/nsis#portable) app without installation), `appx`, `msi`, `squirrel`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir`.\nAppX package can be built only on Windows 10.\n\nTo use Squirrel.Windows please install `electron-builder-squirrel-windows` dependency.",
+                    default: "nsis",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/TargetConfiguration",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/TargetConfiguration",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                icon: {
+                    description: "The path to application icon.",
+                    default: "build/icon.ico",
+                    type: ["null", "string"],
+                },
+                legalTrademarks: {
+                    description: "The trademarks and registered trademarks.",
+                    type: ["null", "string"],
+                },
+                signingHashAlgorithms: {
+                    description: "Array of signing algorithms used. For AppX `sha256` is always used.",
+                    default: "['sha1', 'sha256']",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                enum: ["sha1", "sha256"],
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                sign: {
+                    description: "The custom function (or path to file or module id) to sign Windows executable.",
+                    type: ["null", "string", "object"],
+                },
+                certificateFile: {
+                    description: "The path to the *.pfx certificate you want to sign with. Please use it only if you cannot use env variable `CSC_LINK` (`WIN_CSC_LINK`) for some reason.\nPlease see [Code Signing](/code-signing).",
+                    type: ["null", "string"],
+                },
+                certificatePassword: {
+                    description: "The password to the certificate provided in `certificateFile`. Please use it only if you cannot use env variable `CSC_KEY_PASSWORD` (`WIN_CSC_KEY_PASSWORD`) for some reason.\nPlease see [Code Signing](/code-signing).",
+                    type: ["null", "string"],
+                },
+                certificateSubjectName: {
+                    description: "The name of the subject of the signing certificate. Required only for EV Code Signing and works only on Windows (or on macOS if [Parallels Desktop](https://www.parallels.com/products/desktop/) Windows 10 virtual machines exits).",
+                    type: ["null", "string"],
+                },
+                certificateSha1: {
+                    description: "The SHA1 hash of the signing certificate. The SHA1 hash is commonly specified when multiple certificates satisfy the criteria specified by the remaining switches. Works only on Windows (or on macOS if [Parallels Desktop](https://www.parallels.com/products/desktop/) Windows 10 virtual machines exits).",
+                    type: ["null", "string"],
+                },
+                additionalCertificateFile: {
+                    description: "The path to an additional certificate file you want to add to the signature block.",
+                    type: ["null", "string"],
+                },
+                rfc3161TimeStampServer: {
+                    description: "The URL of the RFC 3161 time stamp server.",
+                    default: "http://timestamp.digicert.com",
+                    type: ["null", "string"],
+                },
+                timeStampServer: {
+                    description: "The URL of the time stamp server.",
+                    default: "http://timestamp.digicert.com",
+                    type: ["null", "string"],
+                },
+                publisherName: {
+                    description: "[The publisher name](https://github.com/electron-userland/electron-builder/issues/1187#issuecomment-278972073), exactly as in your code signed certificate. Several names can be provided.\nDefaults to common name from your code signing certificate.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                verifyUpdateCodeSignature: {
+                    description: "Whether to verify the signature of an available update before installation.\nThe [publisher name](#publisherName) will be used for the signature verification.",
+                    default: true,
+                    type: "boolean",
+                },
+                requestedExecutionLevel: {
+                    description: "The [security level](https://msdn.microsoft.com/en-us/library/6ad1fshk.aspx#Anchor_9) at which the application requests to be executed.\nCannot be specified per target, allowed only in the `win`.",
+                    default: "asInvoker",
+                    anyOf: [
+                        {
+                            enum: ["asInvoker", "highestAvailable", "requireAdministrator"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                signAndEditExecutable: {
+                    description: "Whether to sign and add metadata to executable. Advanced option.",
+                    default: true,
+                    type: "boolean",
+                },
+                signDlls: {
+                    description: "Whether to sign DLL files. Advanced option.",
+                    default: false,
+                    type: "boolean",
+                },
+                appId: {
+                    description: "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
+                    default: "com.electron.${name}",
+                    type: ["null", "string"],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
+                    type: ["null", "string"],
+                },
+                executableName: {
+                    description: "The executable name. Defaults to `productName`.",
+                    type: ["null", "string"],
+                },
+                compression: {
+                    description: "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
+                    default: "normal",
+                    anyOf: [
+                        {
+                            enum: ["maximum", "normal", "store"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                files: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                extraResources: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                extraFiles: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                asar: {
+                    description: "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work.",
+                    default: true,
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/AsarOptions",
+                        },
+                        {
+                            type: ["null", "boolean"],
+                        },
+                    ],
+                },
+                asarUnpack: {
+                    description: "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                fileAssociations: {
+                    description: "The file associations.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileAssociation",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                $ref: "#/definitions/FileAssociation",
+                            },
+                        },
+                    ],
+                },
+                protocols: {
+                    description: "The URL protocol schemes.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/Protocol",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                $ref: "#/definitions/Protocol",
+                            },
+                        },
+                    ],
+                },
+                forceCodeSigning: {
+                    description: "Whether to fail if app will be not code signed.",
+                    type: "boolean",
+                },
+                electronUpdaterCompatibility: {
+                    description: "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                detectUpdateChannel: {
+                    description: "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
+                    default: true,
+                    type: "boolean",
+                },
+                generateUpdatesFilesForAllChannels: {
+                    description: "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
+                    default: false,
+                    type: "boolean",
+                },
+                releaseInfo: {
+                    description: 'The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes="new features"\n```',
+                    $ref: "#/definitions/ReleaseInfo",
+                },
+                cscLink: {
+                    type: ["null", "string"],
+                },
+                cscKeyPassword: {
+                    type: ["null", "string"],
+                },
+                defaultArch: {
+                    type: "string",
+                },
+            },
+        },
+        NsisOptions: {
+            type: "object",
+            properties: {
+                oneClick: {
+                    description: "Whether to create one-click installer or assisted.",
+                    default: true,
+                    type: "boolean",
+                },
+                perMachine: {
+                    description: "Whether to show install mode installer page (choice per-machine or per-user) for assisted installer. Or whether installation always per all users (per-machine).\n\nIf `oneClick` is `true` (default): Whether to install per all users (per-machine).\n\nIf `oneClick` is `false` and `perMachine` is `true`: no install mode installer page, always install per-machine.\n\nIf `oneClick` is `false` and `perMachine` is `false` (default): install mode installer page.",
+                    default: false,
+                    type: "boolean",
+                },
+                allowElevation: {
+                    description: "*assisted installer only.* Allow requesting for elevation. If false, user will have to restart installer with elevated permissions.",
+                    default: true,
+                    type: "boolean",
+                },
+                allowToChangeInstallationDirectory: {
+                    description: "*assisted installer only.* Whether to allow user to change installation directory.",
+                    default: false,
+                    type: "boolean",
+                },
+                installerIcon: {
+                    description: "The path to installer icon, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerIcon.ico` or application icon.",
+                    type: ["null", "string"],
+                },
+                uninstallerIcon: {
+                    description: "The path to uninstaller icon, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/uninstallerIcon.ico` or application icon.",
+                    type: ["null", "string"],
+                },
+                installerHeader: {
+                    description: "*assisted installer only.* `MUI_HEADERIMAGE`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.",
+                    default: "build/installerHeader.bmp",
+                    type: ["null", "string"],
+                },
+                installerHeaderIcon: {
+                    description: "*one-click installer only.* The path to header icon (above the progress bar), relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerHeaderIcon.ico` or application icon.",
+                    type: ["null", "string"],
+                },
+                installerSidebar: {
+                    description: "*assisted installer only.* `MUI_WELCOMEFINISHPAGE_BITMAP`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerSidebar.bmp` or `${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp`. Image size 164 × 314 pixels.",
+                    type: ["null", "string"],
+                },
+                uninstallerSidebar: {
+                    description: "*assisted installer only.* `MUI_UNWELCOMEFINISHPAGE_BITMAP`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `installerSidebar` option or `build/uninstallerSidebar.bmp` or `build/installerSidebar.bmp` or `${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp`",
+                    type: ["null", "string"],
+                },
+                uninstallDisplayName: {
+                    description: "The uninstaller display name in the control panel.",
+                    default: "${productName} ${version}",
+                    type: "string",
+                },
+                include: {
+                    description: "The path to NSIS include script to customize installer. Defaults to `build/installer.nsh`. See [Custom NSIS script](#custom-nsis-script).",
+                    type: ["null", "string"],
+                },
+                script: {
+                    description: "The path to NSIS script to customize installer. Defaults to `build/installer.nsi`. See [Custom NSIS script](#custom-nsis-script).",
+                    type: ["null", "string"],
+                },
+                license: {
+                    description: 'The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). In addition to `txt, `rtf` and `html` supported (don\'t forget to use `target="_blank"` for links).\n\nMultiple license files in different languages are supported — use lang postfix (e.g. `_de`, `_ru`)). For example, create files `license_de.txt` and `license_en.txt` in the build resources.\nIf OS language is german, `license_de.txt` will be displayed. See map of [language code to name](https://github.com/meikidd/iso-639-1/blob/master/src/data.js).\n\nAppropriate license file will be selected by user OS language.',
+                    type: ["null", "string"],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName} Setup ${version}.${ext}`.",
+                    type: ["null", "string"],
+                },
+                deleteAppDataOnUninstall: {
+                    description: "*one-click installer only.* Whether to delete app data on uninstall.",
+                    default: false,
+                    type: "boolean",
+                },
+                differentialPackage: {
+                    type: "boolean",
+                },
+                displayLanguageSelector: {
+                    description: "Whether to display a language selection dialog. Not recommended (by default will be detected using OS language).",
+                    default: false,
+                    type: "boolean",
+                },
+                installerLanguages: {
+                    description: "The installer languages (e.g. `en_US`, `de_DE`). Change only if you understand what do you do and for what.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                language: {
+                    description: "[LCID Dec](https://msdn.microsoft.com/en-au/goglobal/bb964664.aspx), defaults to `1033`(`English - United States`).",
+                    type: ["null", "string"],
+                },
+                multiLanguageInstaller: {
+                    description: "Whether to create multi-language installer. Defaults to `unicode` option value.",
+                    type: "boolean",
+                },
+                packElevateHelper: {
+                    description: "Whether to pack the elevate executable (required for electron-updater if per-machine installer used or can be used in the future). Ignored if `perMachine` is set to `true`.",
+                    default: true,
+                    type: "boolean",
+                },
+                preCompressedFileExtensions: {
+                    description: "The file extension of files that will be not compressed. Applicable only for `extraResources` and `extraFiles` files.",
+                    default: [".avi", ".mov", ".m4v", ".mp4", ".m4p", ".qt", ".mkv", ".webm", ".vmdk"],
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                unicode: {
+                    description: "Whether to create [Unicode installer](http://nsis.sourceforge.net/Docs/Chapter1.html#intro-unicode).",
+                    default: true,
+                    type: "boolean",
+                },
+                guid: {
+                    description: "See [GUID vs Application Name](../configuration/nsis#guid-vs-application-name).",
+                    type: ["null", "string"],
+                },
+                warningsAsErrors: {
+                    description: "If `warningsAsErrors` is `true` (default): NSIS will treat warnings as errors. If `warningsAsErrors` is `false`: NSIS will allow warnings.",
+                    default: true,
+                    type: "boolean",
+                },
+                useZip: {
+                    default: false,
+                    type: "boolean",
+                },
+                customNsisBinary: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/CustomNsisBinary",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                debugLogging: {
+                    description: "Whether or not to enable NSIS logging for debugging.\nNote: Requires a debug-enabled NSIS build.\nelectron-builder's included `makensis` only supports building debug-enabled NSIS installers on Windows currently\nhttps://github.com/electron-userland/electron-builder/issues/5119#issuecomment-811353612",
+                    type: ["null", "boolean"],
+                },
+                runAfterFinish: {
+                    description: "Whether to run the installed application after finish. For assisted installer corresponding checkbox will be removed.",
+                    default: true,
+                    type: "boolean",
+                },
+                createDesktopShortcut: {
+                    description: "Whether to create desktop shortcut. Set to `always` if to recreate also on reinstall (even if removed by user).",
+                    default: true,
+                    enum: ["always", false, true],
+                },
+                createStartMenuShortcut: {
+                    description: "Whether to create start menu shortcut.",
+                    default: true,
+                    type: "boolean",
+                },
+                menuCategory: {
+                    description: "Whether to create submenu for start menu shortcut and program files directory. If `true`, company name will be used. Or string value.",
+                    default: false,
+                    type: ["string", "boolean"],
+                },
+                shortcutName: {
+                    description: "The name that will be used for all shortcuts. Defaults to the application name.",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        CustomNsisBinary: {
+            type: "object",
+            properties: {
+                url: {
+                    default: "https://github.com/electron-userland/electron-builder-binaries/releases/download",
+                    type: ["null", "string"],
+                },
+                checksum: {
+                    default: "o+YZsXHp8LNihhuk7JsCDhdIgx0MKKK+1b3sGD+4zX5djZULe4/4QMcAsfQ+0r+a8FnwBt7BVBHkIkJHjKQ0sg==",
+                    type: ["null", "string"],
+                },
+                version: {
+                    default: "3.0.4.2",
+                    type: ["null", "string"],
+                },
+            },
+            required: ["url"],
+        },
+        NsisWebOptions: {
+            description: "Web Installer options.",
+            type: "object",
+            properties: {
+                appPackageUrl: {
+                    description: "The application package download URL. Optional — by default computed using publish configuration.\n\nURL like `https://example.com/download/latest` allows web installer to be version independent (installer will download latest application package).\nPlease note — it is [full URL](https://github.com/electron-userland/electron-builder/issues/1810#issuecomment-317650878).\n\nCustom `X-Arch` http header is set to `32` or `64`.",
+                    type: ["null", "string"],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName} Web Setup ${version}.${ext}`.",
+                    type: ["null", "string"],
+                },
+                oneClick: {
+                    description: "Whether to create one-click installer or assisted.",
+                    default: true,
+                    type: "boolean",
+                },
+                perMachine: {
+                    description: "Whether to show install mode installer page (choice per-machine or per-user) for assisted installer. Or whether installation always per all users (per-machine).\n\nIf `oneClick` is `true` (default): Whether to install per all users (per-machine).\n\nIf `oneClick` is `false` and `perMachine` is `true`: no install mode installer page, always install per-machine.\n\nIf `oneClick` is `false` and `perMachine` is `false` (default): install mode installer page.",
+                    default: false,
+                    type: "boolean",
+                },
+                allowElevation: {
+                    description: "*assisted installer only.* Allow requesting for elevation. If false, user will have to restart installer with elevated permissions.",
+                    default: true,
+                    type: "boolean",
+                },
+                allowToChangeInstallationDirectory: {
+                    description: "*assisted installer only.* Whether to allow user to change installation directory.",
+                    default: false,
+                    type: "boolean",
+                },
+                installerIcon: {
+                    description: "The path to installer icon, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerIcon.ico` or application icon.",
+                    type: ["null", "string"],
+                },
+                uninstallerIcon: {
+                    description: "The path to uninstaller icon, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/uninstallerIcon.ico` or application icon.",
+                    type: ["null", "string"],
+                },
+                installerHeader: {
+                    description: "*assisted installer only.* `MUI_HEADERIMAGE`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.",
+                    default: "build/installerHeader.bmp",
+                    type: ["null", "string"],
+                },
+                installerHeaderIcon: {
+                    description: "*one-click installer only.* The path to header icon (above the progress bar), relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerHeaderIcon.ico` or application icon.",
+                    type: ["null", "string"],
+                },
+                installerSidebar: {
+                    description: "*assisted installer only.* `MUI_WELCOMEFINISHPAGE_BITMAP`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerSidebar.bmp` or `${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp`. Image size 164 × 314 pixels.",
+                    type: ["null", "string"],
+                },
+                uninstallerSidebar: {
+                    description: "*assisted installer only.* `MUI_UNWELCOMEFINISHPAGE_BITMAP`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `installerSidebar` option or `build/uninstallerSidebar.bmp` or `build/installerSidebar.bmp` or `${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp`",
+                    type: ["null", "string"],
+                },
+                uninstallDisplayName: {
+                    description: "The uninstaller display name in the control panel.",
+                    default: "${productName} ${version}",
+                    type: "string",
+                },
+                include: {
+                    description: "The path to NSIS include script to customize installer. Defaults to `build/installer.nsh`. See [Custom NSIS script](#custom-nsis-script).",
+                    type: ["null", "string"],
+                },
+                script: {
+                    description: "The path to NSIS script to customize installer. Defaults to `build/installer.nsi`. See [Custom NSIS script](#custom-nsis-script).",
+                    type: ["null", "string"],
+                },
+                license: {
+                    description: 'The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). In addition to `txt, `rtf` and `html` supported (don\'t forget to use `target="_blank"` for links).\n\nMultiple license files in different languages are supported — use lang postfix (e.g. `_de`, `_ru`)). For example, create files `license_de.txt` and `license_en.txt` in the build resources.\nIf OS language is german, `license_de.txt` will be displayed. See map of [language code to name](https://github.com/meikidd/iso-639-1/blob/master/src/data.js).\n\nAppropriate license file will be selected by user OS language.',
+                    type: ["null", "string"],
+                },
+                deleteAppDataOnUninstall: {
+                    description: "*one-click installer only.* Whether to delete app data on uninstall.",
+                    default: false,
+                    type: "boolean",
+                },
+                differentialPackage: {
+                    type: "boolean",
+                },
+                displayLanguageSelector: {
+                    description: "Whether to display a language selection dialog. Not recommended (by default will be detected using OS language).",
+                    default: false,
+                    type: "boolean",
+                },
+                installerLanguages: {
+                    description: "The installer languages (e.g. `en_US`, `de_DE`). Change only if you understand what do you do and for what.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                language: {
+                    description: "[LCID Dec](https://msdn.microsoft.com/en-au/goglobal/bb964664.aspx), defaults to `1033`(`English - United States`).",
+                    type: ["null", "string"],
+                },
+                multiLanguageInstaller: {
+                    description: "Whether to create multi-language installer. Defaults to `unicode` option value.",
+                    type: "boolean",
+                },
+                packElevateHelper: {
+                    description: "Whether to pack the elevate executable (required for electron-updater if per-machine installer used or can be used in the future). Ignored if `perMachine` is set to `true`.",
+                    default: true,
+                    type: "boolean",
+                },
+                preCompressedFileExtensions: {
+                    description: "The file extension of files that will be not compressed. Applicable only for `extraResources` and `extraFiles` files.",
+                    default: [".avi", ".mov", ".m4v", ".mp4", ".m4p", ".qt", ".mkv", ".webm", ".vmdk"],
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                unicode: {
+                    description: "Whether to create [Unicode installer](http://nsis.sourceforge.net/Docs/Chapter1.html#intro-unicode).",
+                    default: true,
+                    type: "boolean",
+                },
+                guid: {
+                    description: "See [GUID vs Application Name](../configuration/nsis#guid-vs-application-name).",
+                    type: ["null", "string"],
+                },
+                warningsAsErrors: {
+                    description: "If `warningsAsErrors` is `true` (default): NSIS will treat warnings as errors. If `warningsAsErrors` is `false`: NSIS will allow warnings.",
+                    default: true,
+                    type: "boolean",
+                },
+                useZip: {
+                    default: false,
+                    type: "boolean",
+                },
+                customNsisBinary: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/CustomNsisBinary",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                debugLogging: {
+                    description: "Whether or not to enable NSIS logging for debugging.\nNote: Requires a debug-enabled NSIS build.\nelectron-builder's included `makensis` only supports building debug-enabled NSIS installers on Windows currently\nhttps://github.com/electron-userland/electron-builder/issues/5119#issuecomment-811353612",
+                    type: ["null", "boolean"],
+                },
+                runAfterFinish: {
+                    description: "Whether to run the installed application after finish. For assisted installer corresponding checkbox will be removed.",
+                    default: true,
+                    type: "boolean",
+                },
+                createDesktopShortcut: {
+                    description: "Whether to create desktop shortcut. Set to `always` if to recreate also on reinstall (even if removed by user).",
+                    default: true,
+                    enum: ["always", false, true],
+                },
+                createStartMenuShortcut: {
+                    description: "Whether to create start menu shortcut.",
+                    default: true,
+                    type: "boolean",
+                },
+                menuCategory: {
+                    description: "Whether to create submenu for start menu shortcut and program files directory. If `true`, company name will be used. Or string value.",
+                    default: false,
+                    type: ["string", "boolean"],
+                },
+                shortcutName: {
+                    description: "The name that will be used for all shortcuts. Defaults to the application name.",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        PortableOptions: {
+            description: "Portable options.",
+            type: "object",
+            properties: {
+                requestExecutionLevel: {
+                    description: "The [requested execution level](http://nsis.sourceforge.net/Reference/RequestExecutionLevel) for Windows.",
+                    default: "user",
+                    enum: ["admin", "highest", "user"],
+                    type: "string",
+                },
+                unpackDirName: {
+                    description: "The unpack directory for the portable app resources.\n\nIf set to a string, it will be the name in [TEMP](https://www.askvg.com/where-does-windows-store-temporary-files-and-how-to-change-temp-folder-location/) directory\nIf set explicitly to `false`, it will use the Windows temp directory ($PLUGINSDIR) that is unique to each launch of the portable application.\n\nDefaults to [uuid](https://github.com/segmentio/ksuid) of build (changed on each build of portable executable).",
+                    type: ["string", "boolean"],
+                },
+                splashImage: {
+                    description: "The image to show while the portable executable is extracting. This image must be a bitmap (`.bmp`) image.",
+                    type: ["null", "string"],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                unicode: {
+                    description: "Whether to create [Unicode installer](http://nsis.sourceforge.net/Docs/Chapter1.html#intro-unicode).",
+                    default: true,
+                    type: "boolean",
+                },
+                guid: {
+                    description: "See [GUID vs Application Name](../configuration/nsis#guid-vs-application-name).",
+                    type: ["null", "string"],
+                },
+                warningsAsErrors: {
+                    description: "If `warningsAsErrors` is `true` (default): NSIS will treat warnings as errors. If `warningsAsErrors` is `false`: NSIS will allow warnings.",
+                    default: true,
+                    type: "boolean",
+                },
+                useZip: {
+                    default: false,
+                    type: "boolean",
+                },
+                customNsisBinary: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/CustomNsisBinary",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                debugLogging: {
+                    description: "Whether or not to enable NSIS logging for debugging.\nNote: Requires a debug-enabled NSIS build.\nelectron-builder's included `makensis` only supports building debug-enabled NSIS installers on Windows currently\nhttps://github.com/electron-userland/electron-builder/issues/5119#issuecomment-811353612",
+                    type: ["null", "boolean"],
+                },
+            },
+        },
+        AppXOptions: {
+            type: "object",
+            properties: {
+                applicationId: {
+                    description: "The application id. Defaults to `identityName`. Can’t start with numbers.",
+                    type: "string",
+                },
+                backgroundColor: {
+                    description: "The background color of the app tile. See [Visual Elements](https://msdn.microsoft.com/en-us/library/windows/apps/br211471.aspx).",
+                    default: "#464646",
+                    type: ["null", "string"],
+                },
+                displayName: {
+                    description: "A friendly name that can be displayed to users. Corresponds to [Properties.DisplayName](https://msdn.microsoft.com/en-us/library/windows/apps/br211432.aspx).\nDefaults to the application product name.",
+                    type: ["null", "string"],
+                },
+                identityName: {
+                    description: "The name. Corresponds to [Identity.Name](https://msdn.microsoft.com/en-us/library/windows/apps/br211441.aspx). Defaults to the [application name](/configuration/configuration#Metadata-name).",
+                    type: ["null", "string"],
+                },
+                publisher: {
+                    description: "The Windows Store publisher. Not used if AppX is build for testing. See [AppX Package Code Signing](#appx-package-code-signing) below.",
+                    type: ["null", "string"],
+                },
+                publisherDisplayName: {
+                    description: "A friendly name for the publisher that can be displayed to users. Corresponds to [Properties.PublisherDisplayName](https://msdn.microsoft.com/en-us/library/windows/apps/br211460.aspx).\nDefaults to company name from the application metadata.",
+                    type: ["null", "string"],
+                },
+                languages: {
+                    description: "The list of [supported languages](https://docs.microsoft.com/en-us/windows/uwp/globalizing/manage-language-and-region#specify-the-supported-languages-in-the-apps-manifest) that will be listed in the Windows Store.\nThe first entry (index 0) will be the default language.\nDefaults to en-US if omitted.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                addAutoLaunchExtension: {
+                    description: "Whether to add auto launch extension. Defaults to `true` if [electron-winstore-auto-launch](https://github.com/felixrieseberg/electron-winstore-auto-launch) in the dependencies.",
+                    type: "boolean",
+                },
+                customExtensionsPath: {
+                    description: "Relative path to custom extensions xml to be included in an `appmanifest.xml`.",
+                    type: "string",
+                },
+                showNameOnTiles: {
+                    description: "Whether to overlay the app's name on top of tile images on the Start screen. Defaults to `false`. (https://docs.microsoft.com/en-us/uwp/schemas/appxpackage/uapmanifestschema/element-uap-shownameontiles) in the dependencies.",
+                    default: false,
+                    type: "boolean",
+                },
+                electronUpdaterAware: {
+                    default: false,
+                    type: "boolean",
+                },
+                setBuildNumber: {
+                    description: "Whether to set build number. See https://github.com/electron-userland/electron-builder/issues/3875",
+                    default: false,
+                    type: "boolean",
+                },
+                makeappxArgs: {
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        MsiOptions: {
+            type: "object",
+            properties: {
+                oneClick: {
+                    description: "One-click installation.",
+                    default: true,
+                    type: "boolean",
+                },
+                upgradeCode: {
+                    description: "The [upgrade code](https://msdn.microsoft.com/en-us/library/windows/desktop/aa372375(v=vs.85).aspx). Optional, by default generated using app id.",
+                    type: ["null", "string"],
+                },
+                warningsAsErrors: {
+                    description: "If `warningsAsErrors` is `true` (default): treat warnings as errors. If `warningsAsErrors` is `false`: allow warnings.",
+                    default: true,
+                    type: "boolean",
+                },
+                additionalWixArgs: {
+                    description: 'Any additional arguments to be passed to the WiX installer compiler, such as `["-ext", "WixUtilExtension"]`',
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                perMachine: {
+                    description: "Whether to install per all users (per-machine).",
+                    default: false,
+                    type: "boolean",
+                },
+                runAfterFinish: {
+                    description: "Whether to run the installed application after finish. For assisted installer corresponding checkbox will be removed.",
+                    default: true,
+                    type: "boolean",
+                },
+                createDesktopShortcut: {
+                    description: "Whether to create desktop shortcut. Set to `always` if to recreate also on reinstall (even if removed by user).",
+                    default: true,
+                    enum: ["always", false, true],
+                },
+                createStartMenuShortcut: {
+                    description: "Whether to create start menu shortcut.",
+                    default: true,
+                    type: "boolean",
+                },
+                menuCategory: {
+                    description: "Whether to create submenu for start menu shortcut and program files directory. If `true`, company name will be used. Or string value.",
+                    default: false,
+                    type: ["string", "boolean"],
+                },
+                shortcutName: {
+                    description: "The name that will be used for all shortcuts. Defaults to the application name.",
+                    type: ["null", "string"],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        SquirrelWindowsOptions: {
+            type: "object",
+            properties: {
+                iconUrl: {
+                    description: "A URL to an ICO file to use as the application icon (displayed in Control Panel > Programs and Features). Defaults to the Electron icon.\n\nPlease note — [local icon file url is not accepted](https://github.com/atom/grunt-electron-installer/issues/73), must be https/http.\n\nIf you don't plan to build windows installer, you can omit it.\nIf your project repository is public on GitHub, it will be `https://github.com/${u}/${p}/blob/master/build/icon.ico?raw=true` by default.",
+                    type: ["null", "string"],
+                },
+                loadingGif: {
+                    description: "The path to a .gif file to display during install. `build/install-spinner.gif` will be used if exists (it is a recommended way to set)\n(otherwise [default](https://github.com/electron/windows-installer/blob/master/resources/install-spinner.gif)).",
+                    type: ["null", "string"],
+                },
+                msi: {
+                    description: "Whether to create an MSI installer. Defaults to `false` (MSI is not created).",
+                    type: "boolean",
+                },
+                remoteReleases: {
+                    description: "A URL to your existing updates. Or `true` to automatically set to your GitHub repository. If given, these will be downloaded to create delta updates.",
+                    type: ["null", "string", "boolean"],
+                },
+                remoteToken: {
+                    description: "Authentication token for remote updates",
+                    type: ["null", "string"],
+                },
+                useAppIdAsId: {
+                    description: "Use `appId` to identify package instead of `name`.",
+                    type: "boolean",
+                },
+                name: {
+                    description: "https://github.com/electron-userland/electron-builder/issues/1743",
+                    type: "string",
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        LinuxConfiguration: {
+            type: "object",
+            properties: {
+                target: {
+                    description: "Target package type: list of `AppImage`, `snap`, `deb`, `rpm`, `freebsd`, `pacman`, `p5p`, `apk`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir`.\n\nelectron-builder [docker image](/multi-platform-build#docker) can be used to build Linux targets on any platform.\n\nPlease [do not put an AppImage into another archive](https://github.com/probonopd/AppImageKit/wiki/Creating-AppImages#common-mistake) like a .zip or .tar.gz.",
+                    default: "AppImage",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/TargetConfiguration",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/TargetConfiguration",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                maintainer: {
+                    description: "The maintainer. Defaults to [author](/configuration/configuration#Metadata-author).",
+                    type: ["null", "string"],
+                },
+                vendor: {
+                    description: "The vendor. Defaults to [author](/configuration/configuration#Metadata-author).",
+                    type: ["null", "string"],
+                },
+                icon: {
+                    description: "The path to icon set directory or one png file, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory. The icon filename must contain the size (e.g. 32x32.png) of the icon.\nBy default will be generated automatically based on the macOS icns file.",
+                    type: "string",
+                },
+                packageCategory: {
+                    description: "backward compatibility + to allow specify fpm-only category for all possible fpm targets in one place",
+                    type: ["null", "string"],
+                },
+                synopsis: {
+                    description: "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
+                    type: ["null", "string"],
+                },
+                description: {
+                    description: "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
+                    type: ["null", "string"],
+                },
+                category: {
+                    description: "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
+                    type: ["null", "string"],
+                },
+                mimeTypes: {
+                    description: "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                desktop: {
+                    description: "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value).",
+                },
+                executableArgs: {
+                    description: "The executable parameters. Pass to executableName",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                appId: {
+                    description: "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
+                    default: "com.electron.${name}",
+                    type: ["null", "string"],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
+                    type: ["null", "string"],
+                },
+                executableName: {
+                    description: "The executable name. Defaults to `productName`.",
+                    type: ["null", "string"],
+                },
+                compression: {
+                    description: "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
+                    default: "normal",
+                    anyOf: [
+                        {
+                            enum: ["maximum", "normal", "store"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                files: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                extraResources: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                extraFiles: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                asar: {
+                    description: "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work.",
+                    default: true,
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/AsarOptions",
+                        },
+                        {
+                            type: ["null", "boolean"],
+                        },
+                    ],
+                },
+                asarUnpack: {
+                    description: "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                fileAssociations: {
+                    description: "The file associations.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileAssociation",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                $ref: "#/definitions/FileAssociation",
+                            },
+                        },
+                    ],
+                },
+                protocols: {
+                    description: "The URL protocol schemes.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/Protocol",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                $ref: "#/definitions/Protocol",
+                            },
+                        },
+                    ],
+                },
+                forceCodeSigning: {
+                    description: "Whether to fail if app will be not code signed.",
+                    type: "boolean",
+                },
+                electronUpdaterCompatibility: {
+                    description: "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                detectUpdateChannel: {
+                    description: "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
+                    default: true,
+                    type: "boolean",
+                },
+                generateUpdatesFilesForAllChannels: {
+                    description: "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
+                    default: false,
+                    type: "boolean",
+                },
+                releaseInfo: {
+                    description: 'The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes="new features"\n```',
+                    $ref: "#/definitions/ReleaseInfo",
+                },
+                cscLink: {
+                    type: ["null", "string"],
+                },
+                cscKeyPassword: {
+                    type: ["null", "string"],
+                },
+                defaultArch: {
+                    type: "string",
+                },
+            },
+        },
+        DebOptions: {
+            type: "object",
+            properties: {
+                depends: {
+                    description: 'Package dependencies. Defaults to `["gconf2", "gconf-service", "libnotify4", "libappindicator1", "libxtst6", "libnss3"]`.',
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                packageCategory: {
+                    description: "The [package category](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Section).",
+                    type: ["null", "string"],
+                },
+                priority: {
+                    description: "The [Priority](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Priority) attribute.",
+                    type: ["null", "string"],
+                },
+                compression: {
+                    description: "The compression type.",
+                    default: "xz",
+                    anyOf: [
+                        {
+                            enum: ["bzip2", "gz", "xz"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                icon: {
+                    type: "string",
+                },
+                packageName: {
+                    description: "The name of the package.",
+                    type: ["null", "string"],
+                },
+                vendor: {
+                    type: ["null", "string"],
+                },
+                maintainer: {
+                    type: ["null", "string"],
+                },
+                afterInstall: {
+                    type: ["null", "string"],
+                },
+                afterRemove: {
+                    type: ["null", "string"],
+                },
+                fpm: {
+                    description: '*Advanced only* The [fpm](https://github.com/jordansissel/fpm/wiki#usage) options.\n\nExample: `["--before-install=build/deb-preinstall.sh", "--after-upgrade=build/deb-postinstall.sh"]`',
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                synopsis: {
+                    description: "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
+                    type: ["null", "string"],
+                },
+                description: {
+                    description: "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
+                    type: ["null", "string"],
+                },
+                category: {
+                    description: "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
+                    type: ["null", "string"],
+                },
+                mimeTypes: {
+                    description: "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                desktop: {
+                    description: "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value).",
+                },
+                executableArgs: {
+                    description: "The executable parameters. Pass to executableName",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        SnapOptions: {
+            type: "object",
+            properties: {
+                confinement: {
+                    description: "The type of [confinement](https://snapcraft.io/docs/reference/confinement) supported by the snap.",
+                    default: "strict",
+                    anyOf: [
+                        {
+                            enum: ["classic", "devmode", "strict"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                environment: {
+                    description: 'The custom environment. Defaults to `{"TMPDIR: "$XDG_RUNTIME_DIR"}`. If you set custom, it will be merged with default.',
+                    anyOf: [
+                        {
+                            type: "object",
+                            additionalProperties: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                summary: {
+                    description: "The 78 character long summary. Defaults to [productName](/configuration/configuration#Configuration-productName).",
+                    type: ["null", "string"],
+                },
+                grade: {
+                    description: "The quality grade of the snap. It can be either `devel` (i.e. a development version of the snap, so not to be published to the “stable” or “candidate” channels) or “stable” (i.e. a stable release or release candidate, which can be released to all channels).",
+                    default: "stable",
+                    anyOf: [
+                        {
+                            enum: ["devel", "stable"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                assumes: {
+                    description: "The list of features that must be supported by the core in order for this snap to install.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                buildPackages: {
+                    description: "The list of debian packages needs to be installed for building this snap.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                stagePackages: {
+                    description: 'The list of Ubuntu packages to use that are needed to support the `app` part creation. Like `depends` for `deb`.\nDefaults to `["libnspr4", "libnss3", "libxss1", "libappindicator3-1", "libsecret-1-0"]`.\n\nIf list contains `default`, it will be replaced to default list, so, `["default", "foo"]` can be used to add custom package `foo` in addition to defaults.',
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                hooks: {
+                    description: "The [hooks](https://docs.snapcraft.io/build-snaps/hooks) directory, relative to `build` (build resources directory).",
+                    default: "build/snap-hooks",
+                    type: ["null", "string"],
+                },
+                plugs: {
+                    description: 'The list of [plugs](https://snapcraft.io/docs/reference/interfaces).\nDefaults to `["desktop", "desktop-legacy", "home", "x11", "unity7", "browser-support", "network", "gsettings", "audio-playback", "pulseaudio", "opengl"]`.\n\nIf list contains `default`, it will be replaced to default list, so, `["default", "foo"]` can be used to add custom plug `foo` in addition to defaults.\n\nAdditional attributes can be specified using object instead of just name of plug:\n```\n[\n {\n   "browser-sandbox": {\n     "interface": "browser-support",\n     "allow-sandbox": true\n   },\n },\n "another-simple-plug-name"\n]\n```',
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/PlugDescriptor",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/PlugDescriptor",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                slots: {
+                    description: 'The list of [slots](https://snapcraft.io/docs/reference/interfaces).\n\nAdditional attributes can be specified using object instead of just name of slot:\n```\n[\n {\n   "mpris": {\n     "name": "chromium"\n   },\n }\n]\n\nIn case you want your application to be a compliant MPris player, you will need to definie\nThe mpris slot with "chromium" name.\nThis electron has it [hardcoded](https://source.chromium.org/chromium/chromium/src/+/master:components/system_media_controls/linux/system_media_controls_linux.cc;l=51;bpv=0;bpt=1),\nand we need to pass this name so snap [will allow it](https://forum.snapcraft.io/t/unable-to-use-mpris-interface/15360/7) in strict confinement.',
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/PlugDescriptor",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/SlotDescriptor",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                after: {
+                    description: 'Specifies any [parts](https://snapcraft.io/docs/reference/parts) that should be built before this part.\nDefaults to `["desktop-gtk2""]`.\n\nIf list contains `default`, it will be replaced to default list, so, `["default", "foo"]` can be used to add custom parts `foo` in addition to defaults.',
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                useTemplateApp: {
+                    description: "Whether to use template snap. Defaults to `true` if `stagePackages` not specified.",
+                    type: "boolean",
+                },
+                autoStart: {
+                    description: "Whether or not the snap should automatically start on login.",
+                    default: false,
+                    type: "boolean",
+                },
+                layout: {
+                    description: "Specifies any files to make accessible from locations such as `/usr`, `/var`, and `/etc`. See [snap layouts](https://snapcraft.io/docs/snap-layouts) to learn more.",
+                    anyOf: [
+                        {
+                            type: "object",
+                            additionalProperties: {
+                                type: "object",
+                                additionalProperties: {
+                                    type: "string",
+                                },
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                appPartStage: {
+                    description: "Specifies which files from the app part to stage and which to exclude. Individual files, directories, wildcards, globstars, and exclusions are accepted. See [Snapcraft filesets](https://snapcraft.io/docs/snapcraft-filesets) to learn more about the format.\n\nThe defaults can be found in [snap.ts](https://github.com/electron-userland/electron-builder/blob/master/packages/app-builder-lib/templates/snap/snapcraft.yaml#L29).",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                title: {
+                    description: "An optional title for the snap, may contain uppercase letters and spaces. Defaults to `productName`. See [snap format documentation](https://snapcraft.io/docs/snap-format).",
+                    type: ["null", "string"],
+                },
+                synopsis: {
+                    description: "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
+                    type: ["null", "string"],
+                },
+                description: {
+                    description: "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
+                    type: ["null", "string"],
+                },
+                category: {
+                    description: "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
+                    type: ["null", "string"],
+                },
+                mimeTypes: {
+                    description: "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                desktop: {
+                    description: "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value).",
+                },
+                executableArgs: {
+                    description: "The executable parameters. Pass to executableName",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        PlugDescriptor: {
+            type: "object",
+            additionalProperties: {
+                anyOf: [
+                    {
+                        type: "object",
+                        additionalProperties: {},
+                    },
+                    {
+                        type: "null",
+                    },
+                ],
+            },
+        },
+        SlotDescriptor: {
+            type: "object",
+            additionalProperties: {
+                anyOf: [
+                    {
+                        type: "object",
+                        additionalProperties: {},
+                    },
+                    {
+                        type: "null",
+                    },
+                ],
+            },
+        },
+        AppImageOptions: {
+            type: "object",
+            properties: {
+                license: {
+                    description: "The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). Only plain text is supported.",
+                    type: ["null", "string"],
+                },
+                synopsis: {
+                    description: "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
+                    type: ["null", "string"],
+                },
+                description: {
+                    description: "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
+                    type: ["null", "string"],
+                },
+                category: {
+                    description: "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
+                    type: ["null", "string"],
+                },
+                mimeTypes: {
+                    description: "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                desktop: {
+                    description: "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value).",
+                },
+                executableArgs: {
+                    description: "The executable parameters. Pass to executableName",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        FlatpakOptions: {
+            type: "object",
+            properties: {
+                license: {
+                    description: "The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). Only plain text is supported.",
+                    type: ["null", "string"],
+                },
+                runtime: {
+                    description: "The name of the runtime that the application uses. Defaults to `org.freedesktop.Platform`.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    type: "string",
+                },
+                runtimeVersion: {
+                    description: "The version of the runtime that the application uses. Defaults to `20.08`.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    type: "string",
+                },
+                sdk: {
+                    description: "The name of the development runtime that the application builds with. Defaults to `org.freedesktop.Sdk`.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    type: "string",
+                },
+                base: {
+                    description: "Start with the files from the specified application. This can be used to create applications that extend another application.\nDefaults to [org.electronjs.Electron2.BaseApp](https://github.com/flathub/org.electronjs.Electron2.BaseApp).\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    type: "string",
+                },
+                baseVersion: {
+                    description: "Use this specific version of the application specified in base. Defaults to `20.08`.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    type: "string",
+                },
+                branch: {
+                    description: "The branch to use when exporting the application. Defaults to `master`.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    type: "string",
+                },
+                finishArgs: {
+                    description: 'An array of arguments passed to the flatpak build-finish command. Defaults to:\n```json\n[\n  // Wayland/X11 Rendering\n  "--socket=wayland",\n  "--socket=x11",\n  "--share=ipc",\n  // Open GL\n  "--device=dri",\n  // Audio output\n  "--socket=pulseaudio",\n  // Read/write home directory access\n  "--filesystem=home",\n  // Allow communication with network\n  "--share=network",\n  // System notifications with libnotify\n  "--talk-name=org.freedesktop.Notifications",\n]\n```\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).',
+                    type: "array",
+                    items: {
+                        type: "string",
+                    },
+                },
+                modules: {
+                    description: "An array of objects specifying the modules to be built in order.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    type: "array",
+                    items: {},
+                },
+                files: {
+                    description: "Files to copy directly into the app. Should be a list of [source, dest] tuples. Source should be a relative/absolute path to a file/directory to copy into the flatpak, and dest should be the path inside the app install prefix (e.g. /share/applications/).\n\nSee [@malept/flatpak-bundler documentation](https://github.com/malept/flatpak-bundler#build-options).",
+                    type: "array",
+                    items: {
+                        type: "array",
+                        items: [
+                            {
+                                type: "string",
+                            },
+                            {
+                                type: "string",
+                            },
+                        ],
+                        minItems: 2,
+                        maxItems: 2,
+                    },
+                },
+                symlinks: {
+                    description: "Symlinks to create in the app files. Should be a list of [target, location] symlink tuples. Target can be either a relative or absolute path inside the app install prefix, and location should be a absolute path inside the prefix to create the symlink at.\n\nSee [@malept/flatpak-bundler documentation](https://github.com/malept/flatpak-bundler#build-options).",
+                    type: "array",
+                    items: {
+                        type: "array",
+                        items: [
+                            {
+                                type: "string",
+                            },
+                            {
+                                type: "string",
+                            },
+                        ],
+                        minItems: 2,
+                        maxItems: 2,
+                    },
+                },
+                useWaylandFlags: {
+                    description: "Whether to enable the Wayland specific flags (`--enable-features=UseOzonePlatform --ozone-platform=wayland`) in the wrapper script. These flags are only available starting with Electron version 12. Defaults to `false`.",
+                    type: "boolean",
+                },
+                synopsis: {
+                    description: "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
+                    type: ["null", "string"],
+                },
+                description: {
+                    description: "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
+                    type: ["null", "string"],
+                },
+                category: {
+                    description: "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
+                    type: ["null", "string"],
+                },
+                mimeTypes: {
+                    description: "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                desktop: {
+                    description: "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value).",
+                },
+                executableArgs: {
+                    description: "The executable parameters. Pass to executableName",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        LinuxTargetSpecificOptions: {
+            type: "object",
+            properties: {
+                depends: {
+                    description: "Package dependencies.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                compression: {
+                    description: "The compression type.",
+                    default: "xz",
+                    anyOf: [
+                        {
+                            enum: ["bzip2", "gz", "xz"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                icon: {
+                    type: "string",
+                },
+                packageCategory: {
+                    description: "The package category.",
+                    type: ["null", "string"],
+                },
+                packageName: {
+                    description: "The name of the package.",
+                    type: ["null", "string"],
+                },
+                vendor: {
+                    type: ["null", "string"],
+                },
+                maintainer: {
+                    type: ["null", "string"],
+                },
+                afterInstall: {
+                    type: ["null", "string"],
+                },
+                afterRemove: {
+                    type: ["null", "string"],
+                },
+                fpm: {
+                    description: '*Advanced only* The [fpm](https://github.com/jordansissel/fpm/wiki#usage) options.\n\nExample: `["--before-install=build/deb-preinstall.sh", "--after-upgrade=build/deb-postinstall.sh"]`',
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                synopsis: {
+                    description: "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
+                    type: ["null", "string"],
+                },
+                description: {
+                    description: "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
+                    type: ["null", "string"],
+                },
+                category: {
+                    description: "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
+                    type: ["null", "string"],
+                },
+                mimeTypes: {
+                    description: "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                desktop: {
+                    description: "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value).",
+                },
+                executableArgs: {
+                    description: "The executable parameters. Pass to executableName",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        ElectronDownloadOptions: {
+            type: "object",
+            properties: {
+                version: {
+                    type: "string",
+                },
+                cache: {
+                    description: "The [cache location](https://github.com/electron-userland/electron-download#cache-location).",
+                    type: ["null", "string"],
+                },
+                mirror: {
+                    description: "The mirror.",
+                    type: ["null", "string"],
+                },
+                customDir: {
+                    type: ["null", "string"],
+                },
+                customFilename: {
+                    type: ["null", "string"],
+                },
+                strictSSL: {
+                    type: "boolean",
+                },
+                isVerifyChecksum: {
+                    type: "boolean",
+                },
+                platform: {
+                    enum: ["darwin", "linux", "mas", "win32"],
+                    type: "string",
+                },
+                arch: {
+                    type: "string",
+                },
+            },
+        },
+        ElectronBrandingOptions: {
+            description: "Electron distributables branding options.",
+            type: "object",
+            properties: {
+                projectName: {
+                    type: "string",
+                },
+                productName: {
+                    type: "string",
+                },
+            },
+        },
+        "PlatformPackager<any>": {
+            type: "object",
+            properties: {
+                packagerOptions: {
+                    $ref: "#/definitions/PackagerOptions",
+                },
+                buildResourcesDir: {
+                    type: "string",
+                },
+                projectDir: {
+                    type: "string",
+                },
+                config: {
+                    $ref: "#/definitions/Configuration",
+                },
+                platformSpecificBuildOptions: {},
+                resourceList: {
+                    $ref: "#/definitions/Promise<string[]>",
+                },
+                _resourceList: {
+                    $ref: "#/definitions/Lazy<string[]>",
+                },
+                appInfo: {
+                    $ref: "#/definitions/AppInfo",
+                },
+                info: {
+                    $ref: "#/definitions/Packager",
+                },
+                platform: {
+                    $ref: "#/definitions/Platform",
+                },
+                compression: {
+                    $ref: "#/definitions/CompressionLevel",
+                },
+                debugLogger: {
+                    $ref: "#/definitions/DebugLogger",
+                },
+                defaultTarget: {
+                    type: "array",
+                    items: {
+                        type: "string",
+                    },
+                },
+                fileAssociations: {
+                    type: "array",
+                    items: {
+                        $ref: "#/definitions/FileAssociation",
+                    },
+                },
+                forceCodeSigning: {
+                    type: "boolean",
+                },
+            },
+            required: [
+                "_resourceList",
+                "appInfo",
+                "buildResourcesDir",
+                "compression",
+                "config",
+                "debugLogger",
+                "defaultTarget",
+                "fileAssociations",
+                "forceCodeSigning",
+                "info",
+                "packagerOptions",
+                "platform",
+                "platformSpecificBuildOptions",
+                "projectDir",
+                "resourceList",
+            ],
+        },
+        PackagerOptions: {
+            type: "object",
+            properties: {
+                targets: {
+                    $ref: "#/definitions/Map<Platform,Map<Arch,string[]>>",
+                },
+                mac: {
+                    type: "array",
+                    items: {
+                        type: "string",
+                    },
+                },
+                linux: {
+                    type: "array",
+                    items: {
+                        type: "string",
+                    },
+                },
+                win: {
+                    type: "array",
+                    items: {
+                        type: "string",
+                    },
+                },
+                projectDir: {
+                    type: ["null", "string"],
+                },
+                platformPackagerFactory: {
+                    type: ["null", "object"],
+                },
+                config: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/Configuration",
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                effectiveOptionComputed: {
+                    type: "object",
+                },
+                prepackaged: {
+                    type: ["null", "string"],
+                },
+            },
+        },
+        "Map<Platform,Map<Arch,string[]>>": {
+            type: "object",
+            properties: {
+                size: {
+                    type: "number",
+                },
+                "__@toStringTag": {
+                    type: "string",
+                },
+            },
+            required: ["__@toStringTag", "size"],
+        },
+        Configuration: {
+            description: "Configuration Options",
+            type: "object",
+            properties: {
+                appId: {
+                    description: "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
+                    default: "com.electron.${name}",
+                    type: ["null", "string"],
+                },
+                productName: {
+                    description: "As [name](#Metadata-name), but allows you to specify a product name for your executable which contains spaces and other special characters not allowed in the [name property](https://docs.npmjs.com/files/package.json#name).",
+                    type: ["null", "string"],
+                },
+                copyright: {
+                    description: "The human-readable copyright line for the app.",
+                    default: "Copyright © year ${author}",
+                    type: ["null", "string"],
+                },
+                directories: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/MetadataDirectories",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                mac: {
+                    description: "Options related to how build macOS targets.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/MacConfiguration",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                mas: {
+                    description: "MAS (Mac Application Store) options.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/MasConfiguration",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                masDev: {
+                    description: "MAS (Mac Application Store) development options (`mas-dev` target).",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/MasConfiguration",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                dmg: {
+                    description: "macOS DMG options.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/DmgOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                pkg: {
+                    description: "macOS PKG options.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/PkgOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                win: {
+                    description: "Options related to how build Windows targets.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/WindowsConfiguration",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                nsis: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/NsisOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                nsisWeb: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/NsisWebOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                portable: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/PortableOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                appx: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/AppXOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                msi: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/MsiOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                squirrelWindows: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/SquirrelWindowsOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                linux: {
+                    description: "Options related to how build Linux targets.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/LinuxConfiguration",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                deb: {
+                    description: "Debian package options.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/DebOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                snap: {
+                    description: "Snap options.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/SnapOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                appImage: {
+                    description: "AppImage options.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/AppImageOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                flatpak: {
+                    description: "Flatpak options.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FlatpakOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                pacman: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/LinuxTargetSpecificOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                rpm: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/LinuxTargetSpecificOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                freebsd: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/LinuxTargetSpecificOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                p5p: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/LinuxTargetSpecificOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                apk: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/LinuxTargetSpecificOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                includeSubNodeModules: {
+                    description: "Whether to include *all* of the submodules node_modules directories",
+                    default: false,
+                    type: "boolean",
+                },
+                buildDependenciesFromSource: {
+                    description: "Whether to build the application native dependencies from source.",
+                    default: false,
+                    type: "boolean",
+                },
+                nodeGypRebuild: {
+                    description: "Whether to execute `node-gyp rebuild` before starting to package the app.\n\nDon't [use](https://github.com/electron-userland/electron-builder/issues/683#issuecomment-241214075) [npm](http://electron.atom.io/docs/tutorial/using-native-node-modules/#using-npm) (neither `.npmrc`) for configuring electron headers. Use `electron-builder node-gyp-rebuild` instead.",
+                    default: false,
+                    type: "boolean",
+                },
+                npmArgs: {
+                    description: "Additional command line arguments to use when installing app native deps.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                npmRebuild: {
+                    description: "Whether to [rebuild](https://docs.npmjs.com/cli/rebuild) native dependencies before starting to package the app.",
+                    default: true,
+                    type: "boolean",
+                },
+                buildVersion: {
+                    description: "The build version. Maps to the `CFBundleVersion` on macOS, and `FileVersion` metadata property on Windows. Defaults to the `version`.\nIf `TRAVIS_BUILD_NUMBER` or `APPVEYOR_BUILD_NUMBER` or `CIRCLE_BUILD_NUM` or `BUILD_NUMBER` or `bamboo.buildNumber` or `CI_PIPELINE_IID` env defined, it will be used as a build version (`version.build_number`).",
+                    type: ["null", "string"],
+                },
+                electronCompile: {
+                    description: "Whether to use [electron-compile](http://github.com/electron/electron-compile) to compile app. Defaults to `true` if `electron-compile` in the dependencies. And `false` if in the `devDependencies` or doesn't specified.",
+                    type: "boolean",
+                },
+                electronDist: {
+                    description: "Returns the path to custom Electron build (e.g. `~/electron/out/R`). Zip files must follow the pattern `electron-v${version}-${platformName}-${arch}.zip`, otherwise it will be assumed to be an unpacked Electron app directory",
+                    type: ["string", "object"],
+                },
+                electronDownload: {
+                    description: "The [electron-download](https://github.com/electron-userland/electron-download#usage) options.",
+                    $ref: "#/definitions/ElectronDownloadOptions",
+                },
+                electronBranding: {
+                    description: "The branding used by Electron's distributables. This is needed if a fork has modified Electron's BRANDING.json file.",
+                    $ref: "#/definitions/ElectronBrandingOptions",
+                },
+                electronVersion: {
+                    description: "The version of electron you are packaging for. Defaults to version of `electron`, `electron-prebuilt` or `electron-prebuilt-compile` dependency.",
+                    type: ["null", "string"],
+                },
+                extends: {
+                    description: "The name of a built-in configuration preset (currently, only `react-cra` is supported) or any number of paths to config files (relative to project dir).\n\nThe latter allows to mixin a config from multiple other configs, as if you `Object.assign` them, but properly combine `files` glob patterns.\n\nIf `react-scripts` in the app dependencies, `react-cra` will be set automatically. Set to `null` to disable automatic detection.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                extraMetadata: {
+                    description: "Inject properties to `package.json`.",
+                },
+                forceCodeSigning: {
+                    description: "Whether to fail if the application is not signed (to prevent unsigned app if code signing configuration is not correct).",
+                    default: false,
+                    type: "boolean",
+                },
+                nodeVersion: {
+                    description: "*libui-based frameworks only* The version of NodeJS you are packaging for.\nYou can set it to `current` to set the Node.js version that you use to run.",
+                    type: ["null", "string"],
+                },
+                launchUiVersion: {
+                    description: "*libui-based frameworks only* The version of LaunchUI you are packaging for. Applicable for Windows only. Defaults to version suitable for used framework version.",
+                    type: ["null", "string", "boolean"],
+                },
+                framework: {
+                    description: "The framework name. One of `electron`, `proton`, `libui`. Defaults to `electron`.",
+                    type: ["null", "string"],
+                },
+                afterPack: {
+                    description: "The function (or path to file or module id) to be [run after pack](#afterpack) (but before pack into distributable format and sign).",
+                    type: ["null", "string", "object"],
+                },
+                afterSign: {
+                    description: "The function (or path to file or module id) to be [run after pack and sign](#aftersign) (but before pack into distributable format).",
+                    type: ["null", "string", "object"],
+                },
+                artifactBuildStarted: {
+                    description: "The function (or path to file or module id) to be run on artifact build start.",
+                    type: ["null", "string", "object"],
+                },
+                artifactBuildCompleted: {
+                    description: "The function (or path to file or module id) to be run on artifact build completed.",
+                    type: ["null", "string", "object"],
+                },
+                afterAllArtifactBuild: {
+                    description: "The function (or path to file or module id) to be [run after all artifacts are build](#afterAllArtifactBuild).",
+                    type: ["null", "string", "object"],
+                },
+                msiProjectCreated: {
+                    description: "MSI project created on disk - not packed into .msi package yet.",
+                    type: ["null", "string", "object"],
+                },
+                appxManifestCreated: {
+                    description: "Appx manifest created on disk - not packed into .appx package yet.",
+                    type: ["null", "string", "object"],
+                },
+                onNodeModuleFile: {
+                    description: "The function (or path to file or module id) to be [run on each node module](#onnodemodulefile) file.",
+                    type: ["null", "string", "object"],
+                },
+                beforeBuild: {
+                    description: "The function (or path to file or module id) to be run before dependencies are installed or rebuilt. Works when `npmRebuild` is set to `true`. Resolving to `false` will skip dependencies install or rebuild.\n\nIf provided and `node_modules` are missing, it will not invoke production dependencies check.",
+                    type: ["null", "string", "object"],
+                },
+                remoteBuild: {
+                    description: "Whether to build using Electron Build Service if target not supported on current OS.",
+                    default: true,
+                    type: "boolean",
+                },
+                includePdb: {
+                    description: "Whether to include PDB files.",
+                    default: false,
+                    type: "boolean",
+                },
+                removePackageScripts: {
+                    description: "Whether to remove `scripts` field from `package.json` files.",
+                    default: true,
+                    type: "boolean",
+                },
+                removePackageKeywords: {
+                    description: "Whether to remove `keywords` field from `package.json` files.",
+                    default: true,
+                    type: "boolean",
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
+                    type: ["null", "string"],
+                },
+                executableName: {
+                    description: "The executable name. Defaults to `productName`.",
+                    type: ["null", "string"],
+                },
+                compression: {
+                    description: "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
+                    default: "normal",
+                    anyOf: [
+                        {
+                            enum: ["maximum", "normal", "store"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                files: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                extraResources: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                extraFiles: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                asar: {
+                    description: "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work.",
+                    default: true,
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/AsarOptions",
+                        },
+                        {
+                            type: ["null", "boolean"],
+                        },
+                    ],
+                },
+                asarUnpack: {
+                    description: "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                icon: {
+                    type: ["null", "string"],
+                },
+                fileAssociations: {
+                    description: "The file associations.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileAssociation",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                $ref: "#/definitions/FileAssociation",
+                            },
+                        },
+                    ],
+                },
+                protocols: {
+                    description: "The URL protocol schemes.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/Protocol",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                $ref: "#/definitions/Protocol",
+                            },
+                        },
+                    ],
+                },
+                electronUpdaterCompatibility: {
+                    description: "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                detectUpdateChannel: {
+                    description: "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
+                    default: true,
+                    type: "boolean",
+                },
+                generateUpdatesFilesForAllChannels: {
+                    description: "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
+                    default: false,
+                    type: "boolean",
+                },
+                releaseInfo: {
+                    description: 'The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes="new features"\n```',
+                    $ref: "#/definitions/ReleaseInfo",
+                },
+                target: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/TargetConfiguration",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/TargetConfiguration",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                cscLink: {
+                    type: ["null", "string"],
+                },
+                cscKeyPassword: {
+                    type: ["null", "string"],
+                },
+                defaultArch: {
+                    type: "string",
+                },
+            },
+        },
+        "Promise<string[]>": {
+            type: "object",
+            properties: {
+                "__@toStringTag": {
+                    type: "string",
+                },
+            },
+            required: ["__@toStringTag"],
+        },
+        "Lazy<string[]>": {
+            type: "object",
+            properties: {
+                _value: {},
+                creator: {},
+                hasValue: {
+                    type: "boolean",
+                },
+                value: {
+                    $ref: "#/definitions/Promise<string[]>",
+                },
+            },
+            required: ["_value", "creator", "hasValue", "value"],
+        },
+        AppInfo: {
+            type: "object",
+            properties: {
+                description: {
+                    type: "string",
+                },
+                version: {
+                    type: "string",
+                },
+                shortVersion: {
+                    type: "string",
+                },
+                shortVersionWindows: {
+                    type: "string",
+                },
+                buildNumber: {
+                    type: "string",
+                },
+                buildVersion: {
+                    type: "string",
+                },
+                productName: {
+                    type: "string",
+                },
+                sanitizedProductName: {
+                    type: "string",
+                },
+                productFilename: {
+                    type: "string",
+                },
+                info: {
+                    $ref: "#/definitions/Packager",
+                },
+                platformSpecificOptions: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/PlatformSpecificBuildOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                    default: null,
+                },
+                channel: {
+                    type: ["null", "string"],
+                },
+                notNullDevMetadata: {
+                    $ref: "#/definitions/Metadata",
+                },
+                companyName: {
+                    type: ["null", "string"],
+                },
+                id: {
+                    type: "string",
+                },
+                macBundleIdentifier: {
+                    type: "string",
+                },
+                name: {
+                    type: "string",
+                },
+                linuxPackageName: {
+                    type: "string",
+                },
+                sanitizedName: {
+                    type: "string",
+                },
+                updaterCacheDirName: {
+                    type: "string",
+                },
+                copyright: {
+                    type: "string",
+                },
+            },
+            required: [
+                "buildVersion",
+                "channel",
+                "companyName",
+                "copyright",
+                "description",
+                "id",
+                "info",
+                "linuxPackageName",
+                "macBundleIdentifier",
+                "name",
+                "notNullDevMetadata",
+                "platformSpecificOptions",
+                "productFilename",
+                "productName",
+                "sanitizedName",
+                "sanitizedProductName",
+                "updaterCacheDirName",
+                "version",
+            ],
+        },
+        Packager: {
+            type: "object",
+            properties: {
+                projectDir: {
+                    type: "string",
+                },
+                _appDir: {
+                    type: "string",
+                },
+                appDir: {
+                    type: "string",
+                },
+                _metadata: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/Metadata",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                    default: null,
+                },
+                metadata: {
+                    $ref: "#/definitions/Metadata",
+                },
+                _nodeModulesHandledExternally: {
+                    type: "boolean",
+                    default: false,
+                },
+                areNodeModulesHandledExternally: {
+                    type: "boolean",
+                },
+                _isPrepackedAppAsar: {
+                    type: "boolean",
+                    default: false,
+                },
+                isPrepackedAppAsar: {
+                    type: "boolean",
+                },
+                _devMetadata: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/Metadata",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                    default: null,
+                },
+                devMetadata: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/Metadata",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                _configuration: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/Configuration",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                    default: null,
+                },
+                config: {
+                    $ref: "#/definitions/Configuration",
+                },
+                isTwoPackageJsonProjectLayoutUsed: {
+                    type: "boolean",
+                    default: false,
+                },
+                eventEmitter: {
+                    $ref: "#/definitions/EventEmitter",
+                },
+                _appInfo: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/AppInfo",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                    default: null,
+                },
+                appInfo: {
+                    $ref: "#/definitions/AppInfo",
+                },
+                tempDirManager: {
+                    $ref: "#/definitions/TmpDir",
+                },
+                _repositoryInfo: {
+                    $ref: "#/definitions/Lazy<SourceRepositoryInfo|null>",
+                },
+                afterPackHandlers: {
+                    type: "array",
+                    items: {
+                        type: "object",
+                    },
+                    default: [],
+                },
+                options: {
+                    $ref: "#/definitions/PackagerOptions",
+                },
+                debugLogger: {
+                    $ref: "#/definitions/DebugLogger",
+                },
+                repositoryInfo: {
+                    $ref: "#/definitions/Promise<SourceRepositoryInfo|null>",
+                },
+                nodeDependencyInfo: {
+                    $ref: "#/definitions/Map<string,Lazy<any[]>>",
+                },
+                stageDirPathCustomizer: {
+                    type: "object",
+                },
+                _buildResourcesDir: {
+                    type: ["null", "string"],
+                    default: null,
+                },
+                buildResourcesDir: {
+                    type: "string",
+                },
+                relativeBuildResourcesDirname: {
+                    type: "string",
+                },
+                _framework: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/Framework",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                    default: null,
+                },
+                framework: {
+                    $ref: "#/definitions/Framework",
+                },
+                toDispose: {
+                    type: "array",
+                    items: {
+                        type: "object",
+                    },
+                    default: [],
+                },
+                cancellationToken: {
+                    $ref: "#/definitions/CancellationToken",
+                },
+            },
+            required: [
+                "_appDir",
+                "_appInfo",
+                "_buildResourcesDir",
+                "_configuration",
+                "_devMetadata",
+                "_framework",
+                "_isPrepackedAppAsar",
+                "_metadata",
+                "_nodeModulesHandledExternally",
+                "_repositoryInfo",
+                "afterPackHandlers",
+                "appDir",
+                "appInfo",
+                "areNodeModulesHandledExternally",
+                "buildResourcesDir",
+                "cancellationToken",
+                "config",
+                "debugLogger",
+                "devMetadata",
+                "eventEmitter",
+                "framework",
+                "isPrepackedAppAsar",
+                "isTwoPackageJsonProjectLayoutUsed",
+                "metadata",
+                "nodeDependencyInfo",
+                "options",
+                "projectDir",
+                "relativeBuildResourcesDirname",
+                "repositoryInfo",
+                "stageDirPathCustomizer",
+                "tempDirManager",
+                "toDispose",
+            ],
+        },
+        Metadata: {
+            type: "object",
+            properties: {
+                name: {
+                    description: "The application name.",
+                    type: "string",
+                },
+                description: {
+                    description: "The application description.",
+                    type: "string",
+                },
+                homepage: {
+                    description: "The url to the project [homepage](https://docs.npmjs.com/files/package.json#homepage) (NuGet Package `projectUrl` (optional) or Linux Package URL (required)).\n\nIf not specified and your project repository is public on GitHub, it will be `https://github.com/${user}/${project}` by default.",
+                    type: ["null", "string"],
+                },
+                license: {
+                    description: "*linux-only.* The [license](https://docs.npmjs.com/files/package.json#license) name.",
+                    type: ["null", "string"],
+                },
+                author: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/AuthorMetadata",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                repository: {
+                    description: "The [repository](https://docs.npmjs.com/files/package.json#repository).",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/RepositoryInfo",
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                build: {
+                    description: "The electron-builder configuration.",
+                    $ref: "#/definitions/Configuration",
+                },
+                dependencies: {
+                    type: "object",
+                    additionalProperties: {
+                        type: "string",
+                    },
+                },
+                version: {
+                    type: "string",
+                },
+                shortVersion: {
+                    type: ["null", "string"],
+                },
+                shortVersionWindows: {
+                    type: ["null", "string"],
+                },
+                productName: {
+                    type: ["null", "string"],
+                },
+                main: {
+                    type: ["null", "string"],
+                },
+            },
+        },
+        AuthorMetadata: {
+            type: "object",
+            properties: {
+                name: {
+                    type: "string",
+                },
+                email: {
+                    type: "string",
+                },
+            },
+            required: ["name"],
+        },
+        RepositoryInfo: {
+            type: "object",
+            properties: {
+                url: {
+                    type: "string",
+                },
+            },
+            required: ["url"],
+        },
+        EventEmitter: {
+            description: "The `EventEmitter` class is defined and exposed by the `events` module:\n\n```js\nconst EventEmitter = require('events');\n```\n\nAll `EventEmitter`s emit the event `'newListener'` when new listeners are\nadded and `'removeListener'` when existing listeners are removed.\n\nIt supports the following option:",
+            type: "object",
+        },
+        TmpDir: {
+            type: "object",
+            properties: {
+                debugName: {},
+                tempFiles: {},
+                registered: {},
+                rootTempDir: {
+                    $ref: "#/definitions/Promise<string>",
+                },
+            },
+            required: ["debugName", "registered", "rootTempDir", "tempFiles"],
+        },
+        "Promise<string>": {
+            type: "object",
+            properties: {
+                "__@toStringTag": {
+                    type: "string",
+                },
+            },
+            required: ["__@toStringTag"],
+        },
+        "Lazy<SourceRepositoryInfo|null>": {
+            type: "object",
+            properties: {
+                _value: {},
+                creator: {},
+                hasValue: {
+                    type: "boolean",
+                },
+                value: {
+                    $ref: "#/definitions/Promise<SourceRepositoryInfo|null>",
+                },
+            },
+            required: ["_value", "creator", "hasValue", "value"],
+        },
+        "Promise<SourceRepositoryInfo|null>": {
+            type: "object",
+            properties: {
+                "__@toStringTag": {
+                    type: "string",
+                },
+            },
+            required: ["__@toStringTag"],
+        },
+        DebugLogger: {
+            type: "object",
+            properties: {
+                isEnabled: {
+                    type: "boolean",
+                },
+                data: {},
+            },
+            required: ["data", "isEnabled"],
+        },
+        "Map<string,Lazy<any[]>>": {
+            type: "object",
+            properties: {
+                size: {
+                    type: "number",
+                },
+                "__@toStringTag": {
+                    type: "string",
+                },
+            },
+            required: ["__@toStringTag", "size"],
+        },
+        Framework: {
+            type: "object",
+            properties: {
+                name: {
+                    type: "string",
+                },
+                version: {
+                    type: "string",
+                },
+                distMacOsAppName: {
+                    type: "string",
+                },
+                macOsDefaultTargets: {
+                    type: "array",
+                    items: {
+                        type: "string",
+                    },
+                },
+                defaultAppIdPrefix: {
+                    type: "string",
+                },
+                isNpmRebuildRequired: {
+                    type: "boolean",
+                },
+                isCopyElevateHelper: {
+                    type: "boolean",
+                },
+            },
+            required: ["defaultAppIdPrefix", "distMacOsAppName", "isCopyElevateHelper", "isNpmRebuildRequired", "macOsDefaultTargets", "name", "version"],
+        },
+        CancellationToken: {
+            type: "object",
+            properties: {
+                parentCancelHandler: {},
+                _cancelled: {},
+                cancelled: {
+                    type: "boolean",
+                },
+                _parent: {},
+                parent: {
+                    $ref: "#/definitions/CancellationToken",
+                },
+                onCancel: {},
+                removeParentCancelHandler: {},
+            },
+            required: ["_cancelled", "_parent", "cancelled", "onCancel", "parent", "parentCancelHandler", "removeParentCancelHandler"],
+        },
+        PlatformSpecificBuildOptions: {
+            type: "object",
+            properties: {
+                appId: {
+                    description: "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
+                    default: "com.electron.${name}",
+                    type: ["null", "string"],
+                },
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
+                    type: ["null", "string"],
+                },
+                executableName: {
+                    description: "The executable name. Defaults to `productName`.",
+                    type: ["null", "string"],
+                },
+                compression: {
+                    description: "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
+                    default: "normal",
+                    anyOf: [
+                        {
+                            enum: ["maximum", "normal", "store"],
+                            type: "string",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                files: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                extraResources: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                extraFiles: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileSet",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/FileSet",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                asar: {
+                    description: "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work.",
+                    default: true,
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/AsarOptions",
+                        },
+                        {
+                            type: ["null", "boolean"],
+                        },
+                    ],
+                },
+                asarUnpack: {
+                    description: "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.",
+                    anyOf: [
+                        {
+                            type: "array",
+                            items: {
+                                type: "string",
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                icon: {
+                    type: ["null", "string"],
+                },
+                fileAssociations: {
+                    description: "The file associations.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/FileAssociation",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                $ref: "#/definitions/FileAssociation",
+                            },
+                        },
+                    ],
+                },
+                protocols: {
+                    description: "The URL protocol schemes.",
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/Protocol",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                $ref: "#/definitions/Protocol",
+                            },
+                        },
+                    ],
+                },
+                forceCodeSigning: {
+                    description: "Whether to fail if app will be not code signed.",
+                    type: "boolean",
+                },
+                electronUpdaterCompatibility: {
+                    description: "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                detectUpdateChannel: {
+                    description: "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
+                    default: true,
+                    type: "boolean",
+                },
+                generateUpdatesFilesForAllChannels: {
+                    description: "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
+                    default: false,
+                    type: "boolean",
+                },
+                releaseInfo: {
+                    description: 'The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes="new features"\n```',
+                    $ref: "#/definitions/ReleaseInfo",
+                },
+                target: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/TargetConfiguration",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/TargetConfiguration",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+                cscLink: {
+                    type: ["null", "string"],
+                },
+                cscKeyPassword: {
+                    type: ["null", "string"],
+                },
+                defaultArch: {
+                    type: "string",
+                },
+            },
+        },
+        Platform: {
+            type: "object",
+            properties: {
+                name: {
+                    type: "string",
+                },
+                buildConfigurationKey: {
+                    type: "string",
+                },
+                nodeName: {
+                    $ref: "#/definitions/global.NodeJS.Platform",
+                },
+            },
+            required: ["buildConfigurationKey", "name", "nodeName"],
+        },
+        "global.NodeJS.Platform": {
+            enum: ["aix", "android", "cygwin", "darwin", "freebsd", "haiku", "linux", "netbsd", "openbsd", "sunos", "win32"],
+            type: "string",
+        },
+        CompressionLevel: {
+            enum: ["maximum", "normal", "store"],
+            type: "string",
+        },
+        Arch: {
+            enum: [0, 1, 2, 3, 4],
+            type: "number",
+        },
+        Target: {
+            oneOf: [
+                {
+                    $ref: "#/definitions/FakeTarget",
+                },
+                {
+                    $ref: "#/definitions/default",
+                },
+                {
+                    $ref: "#/definitions/NsisTarget",
+                },
+                {
+                    $ref: "#/definitions/ArchiveTarget",
+                },
+                {
+                    $ref: "#/definitions/NoOpTarget",
+                },
+                {
+                    $ref: "#/definitions/default_1",
+                },
+                {
+                    $ref: "#/definitions/default_2",
+                },
+                {
+                    $ref: "#/definitions/default_3",
+                },
+                {
+                    $ref: "#/definitions/default_4",
+                },
+                {
+                    $ref: "#/definitions/RemoteTarget",
+                },
+                {
+                    $ref: "#/definitions/PkgTarget",
+                },
+            ],
+        },
+        FakeTarget: {
+            type: "object",
+            properties: {
+                outDir: {
+                    type: "string",
+                },
+                options: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/TargetSpecificOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                name: {
+                    type: "string",
+                },
+                isAsyncSupported: {
+                    type: "boolean",
+                    default: true,
+                },
+            },
+            required: ["isAsyncSupported", "name", "outDir"],
+        },
+        TargetSpecificOptions: {
+            type: "object",
+            properties: {
+                artifactName: {
+                    description: "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    type: ["null", "string"],
+                },
+                publish: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/GithubOptions",
+                        },
+                        {
+                            $ref: "#/definitions/S3Options",
+                        },
+                        {
+                            $ref: "#/definitions/SpacesOptions",
+                        },
+                        {
+                            $ref: "#/definitions/GenericServerOptions",
+                        },
+                        {
+                            $ref: "#/definitions/BintrayOptions",
+                        },
+                        {
+                            $ref: "#/definitions/CustomPublishOptions",
+                        },
+                        {
+                            $ref: "#/definitions/KeygenOptions",
+                        },
+                        {
+                            $ref: "#/definitions/SnapStoreOptions",
+                        },
+                        {
+                            type: "array",
+                            items: {
+                                anyOf: [
+                                    {
+                                        $ref: "#/definitions/GithubOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/S3Options",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SpacesOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/GenericServerOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/BintrayOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/CustomPublishOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/KeygenOptions",
+                                    },
+                                    {
+                                        $ref: "#/definitions/SnapStoreOptions",
+                                    },
+                                    {
+                                        type: "string",
+                                    },
+                                ],
+                            },
+                        },
+                        {
+                            type: ["null", "string"],
+                        },
+                    ],
+                },
+            },
+        },
+        default: {
+            type: "object",
+            properties: {
+                options: {
+                    $ref: "#/definitions/AppXOptions",
+                },
+                packager: {
+                    $ref: "#/definitions/WinPackager",
+                },
+                outDir: {
+                    type: "string",
+                },
+                name: {
+                    type: "string",
+                },
+                isAsyncSupported: {
+                    type: "boolean",
+                    default: true,
+                },
+            },
+            required: ["isAsyncSupported", "name", "options", "outDir", "packager"],
+        },
+        WinPackager: {
+            type: "object",
+            properties: {
+                cscInfo: {
+                    $ref: "#/definitions/Lazy<FileCodeSigningInfo|CertificateFromStoreInfo|null>",
+                },
+                _iconPath: {
+                    $ref: "#/definitions/Lazy<string|null>",
+                },
+                vm: {
+                    $ref: "#/definitions/Lazy<VmManager>",
+                },
+                computedPublisherName: {
+                    $ref: "#/definitions/Lazy<string[]|null>",
+                },
+                lazyCertInfo: {
+                    $ref: "#/definitions/Lazy<CertificateInfo|null>",
+                },
+                isForceCodeSigningVerification: {
+                    type: "boolean",
+                },
+                defaultTarget: {
+                    type: "array",
+                    items: {
+                        type: "string",
+                    },
+                },
+                packagerOptions: {
+                    $ref: "#/definitions/PackagerOptions",
+                },
+                buildResourcesDir: {
+                    type: "string",
+                },
+                projectDir: {
+                    type: "string",
+                },
+                config: {
+                    $ref: "#/definitions/Configuration",
+                },
+                platformSpecificBuildOptions: {
+                    $ref: "#/definitions/WindowsConfiguration",
+                },
+                resourceList: {
+                    $ref: "#/definitions/Promise<string[]>",
+                },
+                _resourceList: {
+                    $ref: "#/definitions/Lazy<string[]>",
+                },
+                appInfo: {
+                    $ref: "#/definitions/AppInfo",
+                },
+                info: {
+                    $ref: "#/definitions/Packager",
+                },
+                platform: {
+                    $ref: "#/definitions/Platform",
+                },
+                compression: {
+                    $ref: "#/definitions/CompressionLevel",
+                },
+                debugLogger: {
+                    $ref: "#/definitions/DebugLogger",
+                },
+                fileAssociations: {
+                    type: "array",
+                    items: {
+                        $ref: "#/definitions/FileAssociation",
+                    },
+                },
+                forceCodeSigning: {
+                    type: "boolean",
+                },
+            },
+            required: [
+                "_iconPath",
+                "_resourceList",
+                "appInfo",
+                "buildResourcesDir",
+                "compression",
+                "computedPublisherName",
+                "config",
+                "cscInfo",
+                "debugLogger",
+                "defaultTarget",
+                "fileAssociations",
+                "forceCodeSigning",
+                "info",
+                "isForceCodeSigningVerification",
+                "lazyCertInfo",
+                "packagerOptions",
+                "platform",
+                "platformSpecificBuildOptions",
+                "projectDir",
+                "resourceList",
+                "vm",
+            ],
+        },
+        "Lazy<FileCodeSigningInfo|CertificateFromStoreInfo|null>": {
+            type: "object",
+            properties: {
+                _value: {},
+                creator: {},
+                hasValue: {
+                    type: "boolean",
+                },
+                value: {
+                    $ref: "#/definitions/Promise<FileCodeSigningInfo|CertificateFromStoreInfo|null>",
+                },
+            },
+            required: ["_value", "creator", "hasValue", "value"],
+        },
+        "Promise<FileCodeSigningInfo|CertificateFromStoreInfo|null>": {
+            type: "object",
+            properties: {
+                "__@toStringTag": {
+                    type: "string",
+                },
+            },
+            required: ["__@toStringTag"],
+        },
+        "Lazy<string|null>": {
+            type: "object",
+            properties: {
+                _value: {},
+                creator: {},
+                hasValue: {
+                    type: "boolean",
+                },
+                value: {
+                    $ref: "#/definitions/Promise<string|null>",
+                },
+            },
+            required: ["_value", "creator", "hasValue", "value"],
+        },
+        "Promise<string|null>": {
+            type: "object",
+            properties: {
+                "__@toStringTag": {
+                    type: "string",
+                },
+            },
+            required: ["__@toStringTag"],
+        },
+        "Lazy<VmManager>": {
+            type: "object",
+            properties: {
+                _value: {},
+                creator: {},
+                hasValue: {
+                    type: "boolean",
+                },
+                value: {
+                    $ref: "#/definitions/Promise<VmManager>",
+                },
+            },
+            required: ["_value", "creator", "hasValue", "value"],
+        },
+        "Promise<VmManager>": {
+            type: "object",
+            properties: {
+                "__@toStringTag": {
+                    type: "string",
+                },
+            },
+            required: ["__@toStringTag"],
+        },
+        "Lazy<string[]|null>": {
+            type: "object",
+            properties: {
+                _value: {},
+                creator: {},
+                hasValue: {
+                    type: "boolean",
+                },
+                value: {
+                    $ref: "#/definitions/Promise<string[]|null>",
+                },
+            },
+            required: ["_value", "creator", "hasValue", "value"],
+        },
+        "Promise<string[]|null>": {
+            type: "object",
+            properties: {
+                "__@toStringTag": {
+                    type: "string",
+                },
+            },
+            required: ["__@toStringTag"],
+        },
+        "Lazy<CertificateInfo|null>": {
+            type: "object",
+            properties: {
+                _value: {},
+                creator: {},
+                hasValue: {
+                    type: "boolean",
+                },
+                value: {
+                    $ref: "#/definitions/Promise<CertificateInfo|null>",
+                },
+            },
+            required: ["_value", "creator", "hasValue", "value"],
+        },
+        "Promise<CertificateInfo|null>": {
+            type: "object",
+            properties: {
+                "__@toStringTag": {
+                    type: "string",
+                },
+            },
+            required: ["__@toStringTag"],
+        },
+        NsisTarget: {
+            type: "object",
+            properties: {
+                options: {
+                    $ref: "#/definitions/NsisOptions",
+                },
+                archs: {
+                    $ref: "#/definitions/Map<Arch,string>",
+                },
+                packager: {
+                    $ref: "#/definitions/WinPackager",
+                },
+                outDir: {
+                    type: "string",
+                },
+                packageHelper: {
+                    $ref: "#/definitions/AppPackageHelper",
+                },
+                isBuildDifferentialAware: {
+                    type: "boolean",
+                },
+                installerFilenamePattern: {
+                    type: "string",
+                },
+                isPortable: {
+                    type: "boolean",
+                },
+                isUnicodeEnabled: {
+                    type: "boolean",
+                },
+                isWebInstaller: {
+                    type: "boolean",
+                },
+                name: {
+                    type: "string",
+                },
+                isAsyncSupported: {
+                    type: "boolean",
+                    default: true,
+                },
+            },
+            required: [
+                "archs",
+                "installerFilenamePattern",
+                "isAsyncSupported",
+                "isBuildDifferentialAware",
+                "isPortable",
+                "isUnicodeEnabled",
+                "isWebInstaller",
+                "name",
+                "options",
+                "outDir",
+                "packageHelper",
+                "packager",
+            ],
+        },
+        "Map<Arch,string>": {
+            type: "object",
+            properties: {
+                size: {
+                    type: "number",
+                },
+                "__@toStringTag": {
+                    type: "string",
+                },
+            },
+            required: ["__@toStringTag", "size"],
+        },
+        AppPackageHelper: {
+            type: "object",
+            properties: {
+                archToFileInfo: {
+                    $ref: "#/definitions/Map<Arch,Promise<PackageFileInfo>>",
+                },
+                infoToIsDelete: {
+                    $ref: "#/definitions/Map<PackageFileInfo,boolean>",
+                },
+                refCount: {
+                    type: "number",
+                    default: 0,
+                },
+                elevateHelper: {
+                    $ref: "#/definitions/CopyElevateHelper",
+                },
+            },
+            required: ["archToFileInfo", "elevateHelper", "infoToIsDelete", "refCount"],
+        },
+        "Map<Arch,Promise<PackageFileInfo>>": {
+            type: "object",
+            properties: {
+                size: {
+                    type: "number",
+                },
+                "__@toStringTag": {
+                    type: "string",
+                },
+            },
+            required: ["__@toStringTag", "size"],
+        },
+        "Map<PackageFileInfo,boolean>": {
+            type: "object",
+            properties: {
+                size: {
+                    type: "number",
+                },
+                "__@toStringTag": {
+                    type: "string",
+                },
+            },
+            required: ["__@toStringTag", "size"],
+        },
+        CopyElevateHelper: {
+            type: "object",
+            properties: {
+                copied: {
+                    $ref: "#/definitions/Map<string,Promise<any>>",
+                },
+            },
+            required: ["copied"],
+        },
+        "Map<string,Promise<any>>": {
+            type: "object",
+            properties: {
+                size: {
+                    type: "number",
+                },
+                "__@toStringTag": {
+                    type: "string",
+                },
+            },
+            required: ["__@toStringTag", "size"],
+        },
+        ArchiveTarget: {
+            type: "object",
+            properties: {
+                options: {
+                    $ref: "#/definitions/TargetSpecificOptions",
+                },
+                outDir: {
+                    type: "string",
+                },
+                packager: {
+                    $ref: "#/definitions/PlatformPackager<any>",
+                },
+                isWriteUpdateInfo: {
+                    type: "boolean",
+                    default: false,
+                },
+                name: {
+                    type: "string",
+                },
+                isAsyncSupported: {
+                    type: "boolean",
+                    default: true,
+                },
+            },
+            required: ["isAsyncSupported", "isWriteUpdateInfo", "name", "options", "outDir", "packager"],
+        },
+        NoOpTarget: {
+            type: "object",
+            properties: {
+                options: {
+                    type: "null",
+                    default: null,
+                },
+                outDir: {
+                    type: "string",
+                },
+                name: {
+                    type: "string",
+                },
+                isAsyncSupported: {
+                    type: "boolean",
+                    default: true,
+                },
+            },
+            required: ["isAsyncSupported", "name", "options", "outDir"],
+        },
+        default_1: {
+            type: "object",
+            properties: {
+                options: {
+                    $ref: "#/definitions/AppImageOptions",
+                },
+                desktopEntry: {
+                    $ref: "#/definitions/Lazy<string>",
+                },
+                packager: {
+                    $ref: "#/definitions/LinuxPackager",
+                },
+                helper: {
+                    $ref: "#/definitions/LinuxTargetHelper",
+                },
+                outDir: {
+                    type: "string",
+                },
+                name: {
+                    type: "string",
+                },
+                isAsyncSupported: {
+                    type: "boolean",
+                    default: true,
+                },
+            },
+            required: ["desktopEntry", "helper", "isAsyncSupported", "name", "options", "outDir", "packager"],
+        },
+        "Lazy<string>": {
+            type: "object",
+            properties: {
+                _value: {},
+                creator: {},
+                hasValue: {
+                    type: "boolean",
+                },
+                value: {
+                    $ref: "#/definitions/Promise<string>",
+                },
+            },
+            required: ["_value", "creator", "hasValue", "value"],
+        },
+        LinuxPackager: {
+            type: "object",
+            properties: {
+                executableName: {
+                    type: "string",
+                },
+                defaultTarget: {
+                    type: "array",
+                    items: {
+                        type: "string",
+                    },
+                },
+                packagerOptions: {
+                    $ref: "#/definitions/PackagerOptions",
+                },
+                buildResourcesDir: {
+                    type: "string",
+                },
+                projectDir: {
+                    type: "string",
+                },
+                config: {
+                    $ref: "#/definitions/Configuration",
+                },
+                platformSpecificBuildOptions: {
+                    $ref: "#/definitions/LinuxConfiguration",
+                },
+                resourceList: {
+                    $ref: "#/definitions/Promise<string[]>",
+                },
+                _resourceList: {
+                    $ref: "#/definitions/Lazy<string[]>",
+                },
+                appInfo: {
+                    $ref: "#/definitions/AppInfo",
+                },
+                info: {
+                    $ref: "#/definitions/Packager",
+                },
+                platform: {
+                    $ref: "#/definitions/Platform",
+                },
+                compression: {
+                    $ref: "#/definitions/CompressionLevel",
+                },
+                debugLogger: {
+                    $ref: "#/definitions/DebugLogger",
+                },
+                fileAssociations: {
+                    type: "array",
+                    items: {
+                        $ref: "#/definitions/FileAssociation",
+                    },
+                },
+                forceCodeSigning: {
+                    type: "boolean",
+                },
+            },
+            required: [
+                "_resourceList",
+                "appInfo",
+                "buildResourcesDir",
+                "compression",
+                "config",
+                "debugLogger",
+                "defaultTarget",
+                "executableName",
+                "fileAssociations",
+                "forceCodeSigning",
+                "info",
+                "packagerOptions",
+                "platform",
+                "platformSpecificBuildOptions",
+                "projectDir",
+                "resourceList",
+            ],
+        },
+        LinuxTargetHelper: {
+            type: "object",
+            properties: {
+                iconPromise: {
+                    $ref: "#/definitions/Lazy<IconInfo[]>",
+                },
+                mimeTypeFilesPromise: {
+                    $ref: "#/definitions/Lazy<string|null>",
+                },
+                maxIconPath: {
+                    type: ["null", "string"],
+                    default: null,
+                },
+                packager: {
+                    $ref: "#/definitions/LinuxPackager",
+                },
+                icons: {
+                    $ref: "#/definitions/Promise<IconInfo[]>",
+                },
+                mimeTypeFiles: {
+                    $ref: "#/definitions/Promise<string|null>",
+                },
+            },
+            required: ["iconPromise", "icons", "maxIconPath", "mimeTypeFiles", "mimeTypeFilesPromise", "packager"],
+        },
+        "Lazy<IconInfo[]>": {
+            type: "object",
+            properties: {
+                _value: {},
+                creator: {},
+                hasValue: {
+                    type: "boolean",
+                },
+                value: {
+                    $ref: "#/definitions/Promise<IconInfo[]>",
+                },
+            },
+            required: ["_value", "creator", "hasValue", "value"],
+        },
+        "Promise<IconInfo[]>": {
+            type: "object",
+            properties: {
+                "__@toStringTag": {
+                    type: "string",
+                },
+            },
+            required: ["__@toStringTag"],
+        },
+        default_2: {
+            type: "object",
+            properties: {
+                options: {
+                    $ref: "#/definitions/FlatpakOptions",
+                },
+                packager: {
+                    $ref: "#/definitions/LinuxPackager",
+                },
+                helper: {
+                    $ref: "#/definitions/LinuxTargetHelper",
+                },
+                outDir: {
+                    type: "string",
+                },
+                appId: {
+                    type: "string",
+                },
+                name: {
+                    type: "string",
+                },
+                isAsyncSupported: {
+                    type: "boolean",
+                    default: true,
+                },
+            },
+            required: ["appId", "helper", "isAsyncSupported", "name", "options", "outDir", "packager"],
+        },
+        default_3: {
+            type: "object",
+            properties: {
+                options: {
+                    $ref: "#/definitions/LinuxTargetSpecificOptions",
+                },
+                scriptFiles: {
+                    $ref: "#/definitions/Promise<string[]>",
+                },
+                packager: {
+                    $ref: "#/definitions/LinuxPackager",
+                },
+                helper: {
+                    $ref: "#/definitions/LinuxTargetHelper",
+                },
+                outDir: {
+                    type: "string",
+                },
+                name: {
+                    type: "string",
+                },
+                isAsyncSupported: {
+                    type: "boolean",
+                    default: true,
+                },
+            },
+            required: ["helper", "isAsyncSupported", "name", "options", "outDir", "packager", "scriptFiles"],
+        },
+        default_4: {
+            type: "object",
+            properties: {
+                options: {
+                    $ref: "#/definitions/SnapOptions",
+                },
+                isUseTemplateApp: {
+                    type: "boolean",
+                    default: false,
+                },
+                packager: {
+                    $ref: "#/definitions/LinuxPackager",
+                },
+                helper: {
+                    $ref: "#/definitions/LinuxTargetHelper",
+                },
+                outDir: {
+                    type: "string",
+                },
+                name: {
+                    type: "string",
+                },
+                isAsyncSupported: {
+                    type: "boolean",
+                    default: true,
+                },
+            },
+            required: ["helper", "isAsyncSupported", "isUseTemplateApp", "name", "options", "outDir", "packager"],
+        },
+        RemoteTarget: {
+            type: "object",
+            properties: {
+                buildTaskManager: {
+                    $ref: "#/definitions/AsyncTaskManager",
+                },
+                options: {
+                    anyOf: [
+                        {
+                            $ref: "#/definitions/TargetSpecificOptions",
+                        },
+                        {
+                            type: "null",
+                        },
+                    ],
+                },
+                outDir: {
+                    type: "string",
+                },
+                target: {
+                    $ref: "#/definitions/Target",
+                },
+                remoteBuilder: {
+                    $ref: "#/definitions/RemoteBuilder",
+                },
+                name: {
+                    type: "string",
+                },
+                isAsyncSupported: {
+                    type: "boolean",
+                    default: true,
+                },
+            },
+            required: ["buildTaskManager", "isAsyncSupported", "name", "outDir", "remoteBuilder", "target"],
+        },
+        AsyncTaskManager: {
+            type: "object",
+            properties: {
+                cancellationToken: {},
+                tasks: {
+                    type: "array",
+                    items: {
+                        $ref: "#/definitions/Promise<any>",
+                    },
+                },
+                errors: {},
+            },
+            required: ["cancellationToken", "errors", "tasks"],
+        },
+        "Promise<any>": {
+            type: "object",
+            properties: {
+                "__@toStringTag": {
+                    type: "string",
+                },
+            },
+            required: ["__@toStringTag"],
+        },
+        RemoteBuilder: {
+            type: "object",
+            properties: {
+                toBuild: {
+                    $ref: "#/definitions/Map<Arch,TargetInfo[]>",
+                },
+                buildStarted: {
+                    type: "boolean",
+                    default: false,
+                },
+                packager: {
+                    $ref: "#/definitions/PlatformPackager<any>",
+                },
+            },
+            required: ["buildStarted", "packager", "toBuild"],
+        },
+        "Map<Arch,TargetInfo[]>": {
+            type: "object",
+            properties: {
+                size: {
+                    type: "number",
+                },
+                "__@toStringTag": {
+                    type: "string",
+                },
+            },
+            required: ["__@toStringTag", "size"],
+        },
+        PkgTarget: {
+            type: "object",
+            properties: {
+                options: {
+                    $ref: "#/definitions/PkgOptions",
+                },
+                packager: {
+                    $ref: "#/definitions/default_5",
+                },
+                outDir: {
+                    type: "string",
+                },
+                name: {
+                    type: "string",
+                },
+                isAsyncSupported: {
+                    type: "boolean",
+                    default: true,
+                },
+            },
+            required: ["isAsyncSupported", "name", "options", "outDir", "packager"],
+        },
+        default_5: {
+            type: "object",
+            properties: {
+                codeSigningInfo: {
+                    $ref: "#/definitions/Lazy<CodeSigningInfo>",
+                },
+                _iconPath: {
+                    $ref: "#/definitions/Lazy<string|null>",
+                },
+                defaultTarget: {
+                    type: "array",
+                    items: {
+                        type: "string",
+                    },
+                },
+                packagerOptions: {
+                    $ref: "#/definitions/PackagerOptions",
+                },
+                buildResourcesDir: {
+                    type: "string",
+                },
+                projectDir: {
+                    type: "string",
+                },
+                config: {
+                    $ref: "#/definitions/Configuration",
+                },
+                platformSpecificBuildOptions: {
+                    $ref: "#/definitions/MacConfiguration",
+                },
+                resourceList: {
+                    $ref: "#/definitions/Promise<string[]>",
+                },
+                _resourceList: {
+                    $ref: "#/definitions/Lazy<string[]>",
+                },
+                appInfo: {
+                    $ref: "#/definitions/AppInfo",
+                },
+                info: {
+                    $ref: "#/definitions/Packager",
+                },
+                platform: {
+                    $ref: "#/definitions/Platform",
+                },
+                compression: {
+                    $ref: "#/definitions/CompressionLevel",
+                },
+                debugLogger: {
+                    $ref: "#/definitions/DebugLogger",
+                },
+                fileAssociations: {
+                    type: "array",
+                    items: {
+                        $ref: "#/definitions/FileAssociation",
+                    },
+                },
+                forceCodeSigning: {
+                    type: "boolean",
+                },
+            },
+            required: [
+                "_iconPath",
+                "_resourceList",
+                "appInfo",
+                "buildResourcesDir",
+                "codeSigningInfo",
+                "compression",
+                "config",
+                "debugLogger",
+                "defaultTarget",
+                "fileAssociations",
+                "forceCodeSigning",
+                "info",
+                "packagerOptions",
+                "platform",
+                "platformSpecificBuildOptions",
+                "projectDir",
+                "resourceList",
+            ],
+        },
+        "Lazy<CodeSigningInfo>": {
+            type: "object",
+            properties: {
+                _value: {},
+                creator: {},
+                hasValue: {
+                    type: "boolean",
+                },
+                value: {
+                    $ref: "#/definitions/Promise<CodeSigningInfo>",
+                },
+            },
+            required: ["_value", "creator", "hasValue", "value"],
+        },
+        "Promise<CodeSigningInfo>": {
+            type: "object",
+            properties: {
+                "__@toStringTag": {
+                    type: "string",
+                },
+            },
+            required: ["__@toStringTag"],
+        },
+    },
+    $schema: "http://json-schema.org/draft-07/schema#",
+};
+//# sourceMappingURL=metadata-directories.jsc.js.map
\ No newline at end of file
diff --git a/node_modules/app-builder-lib/out/schema/metadata-directories.json b/node_modules/app-builder-lib/out/schema/metadata-directories.json
new file mode 100644
index 0000000..c9367a4
--- /dev/null
+++ b/node_modules/app-builder-lib/out/schema/metadata-directories.json
@@ -0,0 +1,9058 @@
+{
+    "$ref": "#/definitions/MetadataDirectories",
+    "definitions": {
+        "MetadataDirectories": {
+            "type": "object",
+            "properties": {
+                "buildResources": {
+                    "description": "The path to build resources.\n\nPlease note — build resources are not packed into the app. If you need to use some files, e.g. as tray icon, please include required files explicitly: `\"files\": [\"**\\/*\", \"build/icon.*\"]`",
+                    "default": "build",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "output": {
+                    "description": "The output directory. [File macros](/file-patterns#file-macros) are supported.",
+                    "default": "dist",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "app": {
+                    "description": "The application directory (containing the application package.json), defaults to `app`, `www` or working directory.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                }
+            }
+        },
+        "MacConfiguration": {
+            "type": "object",
+            "properties": {
+                "category": {
+                    "description": "The application category type, as shown in the Finder via *View -> Arrange by Application Category* when viewing the Applications directory.\n\nFor example, `\"category\": \"public.app-category.developer-tools\"` will set the application category to *Developer Tools*.\n\nValid values are listed in [Apple's documentation](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/LaunchServicesKeys.html#//apple_ref/doc/uid/TP40009250-SW8).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "target": {
+                    "description": "The target package type: list of `default`, `dmg`, `mas`, `mas-dev`, `pkg`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir`. Defaults to `default` (dmg and zip for Squirrel.Mac).",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/TargetConfiguration"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/TargetConfiguration"
+                                    },
+                                    {
+                                        "enum": [
+                                            "7z",
+                                            "default",
+                                            "dir",
+                                            "dmg",
+                                            "mas",
+                                            "mas-dev",
+                                            "pkg",
+                                            "tar.bz2",
+                                            "tar.gz",
+                                            "tar.lz",
+                                            "tar.xz",
+                                            "zip"
+                                        ],
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "enum": [
+                                "7z",
+                                "default",
+                                "dir",
+                                "dmg",
+                                "mas",
+                                "mas-dev",
+                                "pkg",
+                                "tar.bz2",
+                                "tar.gz",
+                                "tar.lz",
+                                "tar.xz",
+                                "zip"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "identity": {
+                    "description": "The name of certificate to use when signing. Consider using environment variables [CSC_LINK or CSC_NAME](/code-signing) instead of specifying this option.\nMAS installer identity is specified in the [mas](/configuration/mas).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "icon": {
+                    "description": "The path to application icon.",
+                    "default": "build/icon.icns",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "entitlements": {
+                    "description": "The path to entitlements file for signing the app. `build/entitlements.mac.plist` will be used if exists (it is a recommended way to set).\nMAS entitlements is specified in the [mas](/configuration/mas).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "entitlementsInherit": {
+                    "description": "The path to child entitlements which inherit the security settings for signing frameworks and bundles of a distribution. `build/entitlements.mac.inherit.plist` will be used if exists (it is a recommended way to set).\nOtherwise [default](https://github.com/electron-userland/electron-osx-sign/blob/master/default.entitlements.darwin.inherit.plist).\n\nThis option only applies when signing with `entitlements` provided.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "entitlementsLoginHelper": {
+                    "description": "Path to login helper entitlement file.\nWhen using App Sandbox, the the `com.apple.security.inherit` key that is normally in the inherited entitlements cannot be inherited since the login helper is a standalone executable.\nDefaults to the value provided for `entitlements`. This option only applies when signing with `entitlements` provided.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "provisioningProfile": {
+                    "description": "The path to the provisioning profile to use when signing, absolute or relative to the app root.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "bundleVersion": {
+                    "description": "The `CFBundleVersion`. Do not use it unless [you need to](https://github.com/electron-userland/electron-builder/issues/565#issuecomment-230678643).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "bundleShortVersion": {
+                    "description": "The `CFBundleShortVersionString`. Do not use it unless you need to.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "darkModeSupport": {
+                    "description": "Whether a dark mode is supported. If your app does have a dark mode, you can make your app follow the system-wide dark mode setting.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "helperBundleId": {
+                    "description": "The bundle identifier to use in the application helper's plist.",
+                    "default": "${appBundleIdentifier}.helper",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "helperRendererBundleId": {
+                    "description": "The bundle identifier to use in the Renderer helper's plist.",
+                    "default": "${appBundleIdentifier}.helper.Renderer",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "helperPluginBundleId": {
+                    "description": "The bundle identifier to use in the Plugin helper's plist.",
+                    "default": "${appBundleIdentifier}.helper.Plugin",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "helperGPUBundleId": {
+                    "description": "The bundle identifier to use in the GPU helper's plist.",
+                    "default": "${appBundleIdentifier}.helper.GPU",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "helperEHBundleId": {
+                    "description": "The bundle identifier to use in the EH helper's plist.",
+                    "default": "${appBundleIdentifier}.helper.EH",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "helperNPBundleId": {
+                    "description": "The bundle identifier to use in the NP helper's plist.",
+                    "default": "${appBundleIdentifier}.helper.NP",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "type": {
+                    "description": "Whether to sign app for development or for distribution.",
+                    "default": "distribution",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "development",
+                                "distribution"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "extendInfo": {
+                    "description": "The extra entries for `Info.plist`."
+                },
+                "binaries": {
+                    "description": "Paths of any extra binaries that need to be signed.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "minimumSystemVersion": {
+                    "description": "The minimum version of macOS required for the app to run. Corresponds to `LSMinimumSystemVersion`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "requirements": {
+                    "description": "Path of [requirements file](https://developer.apple.com/library/mac/documentation/Security/Conceptual/CodeSigningGuide/RequirementLang/RequirementLang.html) used in signing. Not applicable for MAS.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "electronLanguages": {
+                    "description": "The electron locales. By default Electron locales used as is.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "string"
+                        }
+                    ]
+                },
+                "cscInstallerLink": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "cscInstallerKeyPassword": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "extraDistFiles": {
+                    "description": "Extra files to put in archive. Not applicable for `tar.*`.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "hardenedRuntime": {
+                    "description": "Whether your app has to be signed with hardened runtime.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "gatekeeperAssess": {
+                    "description": "Whether to let electron-osx-sign validate the signing or not.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "strictVerify": {
+                    "description": "Whether to let electron-osx-sign verify the contents or not.",
+                    "default": true,
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "string",
+                                "boolean"
+                            ]
+                        }
+                    ]
+                },
+                "signIgnore": {
+                    "description": "Regex or an array of regex's that signal skipping signing a file.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "timestamp": {
+                    "description": "Specify the URL of the timestamp authority server",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "appId": {
+                    "description": "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
+                    "default": "com.electron.${name}",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "executableName": {
+                    "description": "The executable name. Defaults to `productName`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "compression": {
+                    "description": "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
+                    "default": "normal",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "maximum",
+                                "normal",
+                                "store"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "files": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "extraResources": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "extraFiles": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "asar": {
+                    "description": "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work.",
+                    "default": true,
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/AsarOptions"
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "boolean"
+                            ]
+                        }
+                    ]
+                },
+                "asarUnpack": {
+                    "description": "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "fileAssociations": {
+                    "description": "The file associations.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileAssociation"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/FileAssociation"
+                            }
+                        }
+                    ]
+                },
+                "protocols": {
+                    "description": "The URL protocol schemes.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/Protocol"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/Protocol"
+                            }
+                        }
+                    ]
+                },
+                "forceCodeSigning": {
+                    "description": "Whether to fail if app will be not code signed.",
+                    "type": "boolean"
+                },
+                "electronUpdaterCompatibility": {
+                    "description": "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "detectUpdateChannel": {
+                    "description": "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "generateUpdatesFilesForAllChannels": {
+                    "description": "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "releaseInfo": {
+                    "description": "The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes=\"new features\"\n```",
+                    "$ref": "#/definitions/ReleaseInfo"
+                },
+                "cscLink": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "cscKeyPassword": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "defaultArch": {
+                    "type": "string"
+                }
+            }
+        },
+        "TargetConfiguration": {
+            "type": "object",
+            "properties": {
+                "target": {
+                    "description": "The target name. e.g. `snap`.",
+                    "type": "string"
+                },
+                "arch": {
+                    "description": "The arch or list of archs.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "enum": [
+                                    "arm64",
+                                    "armv7l",
+                                    "ia32",
+                                    "universal",
+                                    "x64"
+                                ],
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "enum": [
+                                "arm64",
+                                "armv7l",
+                                "ia32",
+                                "universal",
+                                "x64"
+                            ],
+                            "type": "string"
+                        }
+                    ]
+                }
+            },
+            "required": [
+                "target"
+            ]
+        },
+        "FileSet": {
+            "type": "object",
+            "properties": {
+                "from": {
+                    "description": "The source path relative to the project directory.",
+                    "type": "string"
+                },
+                "to": {
+                    "description": "The destination path relative to the app's content directory for `extraFiles` and the app's resource directory for `extraResources`.",
+                    "type": "string"
+                },
+                "filter": {
+                    "description": "The [glob patterns](/file-patterns).",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "string"
+                        }
+                    ]
+                }
+            }
+        },
+        "AsarOptions": {
+            "type": "object",
+            "properties": {
+                "smartUnpack": {
+                    "description": "Whether to automatically unpack executables files.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "ordering": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "externalAllowed": {
+                    "description": "Allows external asar files.",
+                    "default": false,
+                    "type": "boolean"
+                }
+            }
+        },
+        "FileAssociation": {
+            "description": "File associations.\n\nmacOS (corresponds to [CFBundleDocumentTypes](https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-101685)) and NSIS only.\n\nOn Windows works only if [nsis.perMachine](https://electron.build/configuration/configuration#NsisOptions-perMachine) is set to `true`.",
+            "type": "object",
+            "properties": {
+                "ext": {
+                    "description": "The extension (minus the leading period). e.g. `png`.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "string"
+                        }
+                    ]
+                },
+                "name": {
+                    "description": "The name. e.g. `PNG`. Defaults to `ext`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "description": {
+                    "description": "*windows-only.* The description.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "mimeType": {
+                    "description": "*linux-only.* The mime-type.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "icon": {
+                    "description": "The path to icon (`.icns` for MacOS and `.ico` for Windows), relative to `build` (build resources directory). Defaults to `${firstExt}.icns`/`${firstExt}.ico` (if several extensions specified, first is used) or to application icon.\n\nNot supported on Linux, file issue if need (default icon will be `x-office-document`).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "role": {
+                    "description": "*macOS-only* The app’s role with respect to the type. The value can be `Editor`, `Viewer`, `Shell`, or `None`. Corresponds to `CFBundleTypeRole`.",
+                    "default": "Editor",
+                    "type": "string"
+                },
+                "isPackage": {
+                    "description": "*macOS-only* Whether the document is distributed as a bundle. If set to true, the bundle directory is treated as a file. Corresponds to `LSTypeIsPackage`.",
+                    "type": "boolean"
+                },
+                "rank": {
+                    "description": "*macOS-only* The app’s rank with respect to the type. The value can be `Owner`, `Default`, `Alternate`, or `None`. Corresponds to `LSHandlerRank`.",
+                    "default": "Default",
+                    "type": "string"
+                }
+            },
+            "required": [
+                "ext"
+            ]
+        },
+        "Protocol": {
+            "description": "URL Protocol Schemes. Protocols to associate the app with. macOS only.\n\nPlease note — on macOS [you need to register an `open-url` event handler](http://electron.atom.io/docs/api/app/#event-open-url-macos).",
+            "type": "object",
+            "properties": {
+                "name": {
+                    "description": "The name. e.g. `IRC server URL`.",
+                    "type": "string"
+                },
+                "schemes": {
+                    "description": "The schemes. e.g. `[\"irc\", \"ircs\"]`.",
+                    "type": "array",
+                    "items": {
+                        "type": "string"
+                    }
+                },
+                "role": {
+                    "description": "*macOS-only* The app’s role with respect to the type.",
+                    "default": "Editor",
+                    "enum": [
+                        "Editor",
+                        "None",
+                        "Shell",
+                        "Viewer"
+                    ],
+                    "type": "string"
+                }
+            },
+            "required": [
+                "name",
+                "schemes"
+            ]
+        },
+        "GithubOptions": {
+            "description": "[GitHub](https://help.github.com/articles/about-releases/) options.\n\nGitHub [personal access token](https://help.github.com/articles/creating-an-access-token-for-command-line-use/) is required. You can generate by going to [https://github.com/settings/tokens/new](https://github.com/settings/tokens/new). The access token should have the repo scope/permission.\nDefine `GH_TOKEN` environment variable.",
+            "type": "object",
+            "properties": {
+                "provider": {
+                    "description": "The provider. Must be `github`.",
+                    "type": "string",
+                    "enum": [
+                        "github"
+                    ]
+                },
+                "repo": {
+                    "description": "The repository name. [Detected automatically](#github-repository-and-bintray-package).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "owner": {
+                    "description": "The owner.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "vPrefixedTagName": {
+                    "description": "Whether to use `v`-prefixed tag name.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "host": {
+                    "description": "The host (including the port if need).",
+                    "default": "github.com",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "protocol": {
+                    "description": "The protocol. GitHub Publisher supports only `https`.",
+                    "default": "https",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "http",
+                                "https"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "token": {
+                    "description": "The access token to support auto-update from private github repositories. Never specify it in the configuration files. Only for [setFeedURL](/auto-update#appupdatersetfeedurloptions).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "private": {
+                    "description": "Whether to use private github auto-update provider if `GH_TOKEN` environment variable is defined. See [Private GitHub Update Repo](/auto-update#private-github-update-repo).",
+                    "type": [
+                        "null",
+                        "boolean"
+                    ]
+                },
+                "releaseType": {
+                    "description": "The type of release. By default `draft` release will be created.\n\nAlso you can set release type using environment variable. If `EP_DRAFT`is set to `true` — `draft`, if `EP_PRE_RELEASE`is set to `true` — `prerelease`.",
+                    "default": "draft",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "draft",
+                                "prerelease",
+                                "release"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "publisherName": {
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "updaterCacheDirName": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publishAutoUpdate": {
+                    "description": "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "requestHeaders": {
+                    "description": "Any custom request headers",
+                    "$ref": "#/definitions/OutgoingHttpHeaders"
+                }
+            },
+            "required": [
+                "provider"
+            ]
+        },
+        "OutgoingHttpHeaders": {
+            "type": "object"
+        },
+        "S3Options": {
+            "type": "object",
+            "properties": {
+                "provider": {
+                    "description": "The provider. Must be `s3`.",
+                    "type": "string",
+                    "enum": [
+                        "s3"
+                    ]
+                },
+                "bucket": {
+                    "description": "The bucket name.",
+                    "type": "string"
+                },
+                "region": {
+                    "description": "The region. Is determined and set automatically when publishing.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "acl": {
+                    "description": "The ACL. Set to `null` to not [add](https://github.com/electron-userland/electron-builder/issues/1822).\n\nPlease see [required permissions for the S3 provider](https://github.com/electron-userland/electron-builder/issues/1618#issuecomment-314679128).",
+                    "default": "public-read",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "private",
+                                "public-read"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "storageClass": {
+                    "description": "The type of storage to use for the object.",
+                    "default": "STANDARD",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "REDUCED_REDUNDANCY",
+                                "STANDARD",
+                                "STANDARD_IA"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "encryption": {
+                    "description": "Server-side encryption algorithm to use for the object.",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "AES256",
+                                "aws:kms"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "endpoint": {
+                    "description": "The endpoint URI to send requests to. The default endpoint is built from the configured region.\nThe endpoint should be a string like `https://{service}.{region}.amazonaws.com`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "channel": {
+                    "description": "The update channel.",
+                    "default": "latest",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "path": {
+                    "description": "The directory path.",
+                    "default": "/",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publisherName": {
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "updaterCacheDirName": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publishAutoUpdate": {
+                    "description": "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "requestHeaders": {
+                    "description": "Any custom request headers",
+                    "$ref": "#/definitions/OutgoingHttpHeaders"
+                }
+            },
+            "required": [
+                "bucket",
+                "provider"
+            ]
+        },
+        "SpacesOptions": {
+            "description": "[DigitalOcean Spaces](https://www.digitalocean.com/community/tutorials/an-introduction-to-digitalocean-spaces) options.\nAccess key is required, define `DO_KEY_ID` and `DO_SECRET_KEY` environment variables.",
+            "type": "object",
+            "properties": {
+                "provider": {
+                    "description": "The provider. Must be `spaces`.",
+                    "type": "string",
+                    "enum": [
+                        "spaces"
+                    ]
+                },
+                "name": {
+                    "description": "The space name.",
+                    "type": "string"
+                },
+                "region": {
+                    "description": "The region (e.g. `nyc3`).",
+                    "type": "string"
+                },
+                "channel": {
+                    "description": "The update channel.",
+                    "default": "latest",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "path": {
+                    "description": "The directory path.",
+                    "default": "/",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "acl": {
+                    "description": "The ACL. Set to `null` to not [add](https://github.com/electron-userland/electron-builder/issues/1822).",
+                    "default": "public-read",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "private",
+                                "public-read"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "publisherName": {
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "updaterCacheDirName": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publishAutoUpdate": {
+                    "description": "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "requestHeaders": {
+                    "description": "Any custom request headers",
+                    "$ref": "#/definitions/OutgoingHttpHeaders"
+                }
+            },
+            "required": [
+                "name",
+                "provider",
+                "region"
+            ]
+        },
+        "GenericServerOptions": {
+            "description": "Generic (any HTTP(S) server) options.\nIn all publish options [File Macros](/file-patterns#file-macros) are supported.",
+            "type": "object",
+            "properties": {
+                "provider": {
+                    "description": "The provider. Must be `generic`.",
+                    "type": "string",
+                    "enum": [
+                        "generic"
+                    ]
+                },
+                "url": {
+                    "description": "The base url. e.g. `https://bucket_name.s3.amazonaws.com`.",
+                    "type": "string"
+                },
+                "channel": {
+                    "description": "The channel.",
+                    "default": "latest",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "useMultipleRangeRequest": {
+                    "description": "Whether to use multiple range requests for differential update. Defaults to `true` if `url` doesn't contain `s3.amazonaws.com`.",
+                    "type": "boolean"
+                },
+                "publisherName": {
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "updaterCacheDirName": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publishAutoUpdate": {
+                    "description": "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "requestHeaders": {
+                    "description": "Any custom request headers",
+                    "$ref": "#/definitions/OutgoingHttpHeaders"
+                }
+            },
+            "required": [
+                "provider",
+                "url"
+            ]
+        },
+        "BintrayOptions": {
+            "description": "[Bintray](https://bintray.com/) options. Requires an API key. An API key can be obtained from the user [profile](https://bintray.com/profile/edit) page (\"Edit Your Profile\" -> API Key).\nDefine `BT_TOKEN` environment variable.",
+            "type": "object",
+            "properties": {
+                "provider": {
+                    "description": "The provider. Must be `bintray`.",
+                    "type": "string",
+                    "enum": [
+                        "bintray"
+                    ]
+                },
+                "package": {
+                    "description": "The Bintray package name.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "repo": {
+                    "description": "The Bintray repository name.",
+                    "default": "generic",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "owner": {
+                    "description": "The owner.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "component": {
+                    "description": "The Bintray component (Debian only).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "distribution": {
+                    "description": "The Bintray distribution (Debian only).",
+                    "default": "stable",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "user": {
+                    "description": "The Bintray user account. Used in cases where the owner is an organization.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "token": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publisherName": {
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "updaterCacheDirName": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publishAutoUpdate": {
+                    "description": "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "requestHeaders": {
+                    "description": "Any custom request headers",
+                    "$ref": "#/definitions/OutgoingHttpHeaders"
+                }
+            },
+            "required": [
+                "provider"
+            ]
+        },
+        "CustomPublishOptions": {
+            "type": "object",
+            "additionalProperties": {},
+            "properties": {
+                "provider": {
+                    "description": "The provider. Must be `custom`.",
+                    "type": "string",
+                    "enum": [
+                        "custom"
+                    ]
+                },
+                "updateProvider": {
+                    "description": "The Provider to provide UpdateInfo regarding available updates.  Required\nto use custom providers with electron-updater.",
+                    "type": "object"
+                },
+                "publisherName": {
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "updaterCacheDirName": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publishAutoUpdate": {
+                    "description": "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "requestHeaders": {
+                    "description": "Any custom request headers",
+                    "$ref": "#/definitions/OutgoingHttpHeaders"
+                }
+            },
+            "required": [
+                "provider"
+            ]
+        },
+        "KeygenOptions": {
+            "description": "Keygen options.\nhttps://keygen.sh/\nDefine `KEYGEN_TOKEN` environment variable.",
+            "type": "object",
+            "properties": {
+                "provider": {
+                    "description": "The provider. Must be `keygen`.",
+                    "type": "string",
+                    "enum": [
+                        "keygen"
+                    ]
+                },
+                "account": {
+                    "description": "Keygen account's UUID",
+                    "type": "string"
+                },
+                "product": {
+                    "description": "Keygen product's UUID",
+                    "type": "string"
+                },
+                "channel": {
+                    "description": "The channel.",
+                    "default": "stable",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "platform": {
+                    "description": "The target Platform. Is set programmatically explicitly during publishing.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publisherName": {
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "updaterCacheDirName": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publishAutoUpdate": {
+                    "description": "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "requestHeaders": {
+                    "description": "Any custom request headers",
+                    "$ref": "#/definitions/OutgoingHttpHeaders"
+                }
+            },
+            "required": [
+                "account",
+                "product",
+                "provider"
+            ]
+        },
+        "SnapStoreOptions": {
+            "description": "[Snap Store](https://snapcraft.io/) options.",
+            "type": "object",
+            "properties": {
+                "channels": {
+                    "description": "The list of channels the snap would be released.",
+                    "default": [
+                        "edge"
+                    ],
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "provider": {
+                    "$ref": "#/definitions/PublishProvider",
+                    "description": "The provider."
+                },
+                "publisherName": {
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "updaterCacheDirName": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publishAutoUpdate": {
+                    "description": "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "requestHeaders": {
+                    "description": "Any custom request headers",
+                    "$ref": "#/definitions/OutgoingHttpHeaders"
+                }
+            },
+            "required": [
+                "provider"
+            ]
+        },
+        "PublishProvider": {
+            "enum": [
+                "bintray",
+                "custom",
+                "generic",
+                "github",
+                "keygen",
+                "s3",
+                "snapStore",
+                "spaces"
+            ],
+            "type": "string"
+        },
+        "ReleaseInfo": {
+            "type": "object",
+            "properties": {
+                "releaseName": {
+                    "description": "The release name.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "releaseNotes": {
+                    "description": "The release notes.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "releaseNotesFile": {
+                    "description": "The path to release notes file. Defaults to `release-notes-${platform}.md` (where `platform` it is current platform — `mac`, `linux` or `windows`) or `release-notes.md` in the [build resources](#MetadataDirectories-buildResources).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "releaseDate": {
+                    "description": "The release date.",
+                    "type": "string"
+                }
+            }
+        },
+        "MasConfiguration": {
+            "type": "object",
+            "properties": {
+                "entitlements": {
+                    "description": "The path to entitlements file for signing the app. `build/entitlements.mas.plist` will be used if exists (it is a recommended way to set).\nOtherwise [default](https://github.com/electron-userland/electron-osx-sign/blob/master/default.entitlements.mas.plist).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "entitlementsInherit": {
+                    "description": "The path to child entitlements which inherit the security settings for signing frameworks and bundles of a distribution. `build/entitlements.mas.inherit.plist` will be used if exists (it is a recommended way to set).\nOtherwise [default](https://github.com/electron-userland/electron-osx-sign/blob/master/default.entitlements.mas.inherit.plist).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "binaries": {
+                    "description": "Paths of any extra binaries that need to be signed.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "category": {
+                    "description": "The application category type, as shown in the Finder via *View -> Arrange by Application Category* when viewing the Applications directory.\n\nFor example, `\"category\": \"public.app-category.developer-tools\"` will set the application category to *Developer Tools*.\n\nValid values are listed in [Apple's documentation](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/LaunchServicesKeys.html#//apple_ref/doc/uid/TP40009250-SW8).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "target": {
+                    "description": "The target package type: list of `default`, `dmg`, `mas`, `mas-dev`, `pkg`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir`. Defaults to `default` (dmg and zip for Squirrel.Mac).",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/TargetConfiguration"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/TargetConfiguration"
+                                    },
+                                    {
+                                        "enum": [
+                                            "7z",
+                                            "default",
+                                            "dir",
+                                            "dmg",
+                                            "mas",
+                                            "mas-dev",
+                                            "pkg",
+                                            "tar.bz2",
+                                            "tar.gz",
+                                            "tar.lz",
+                                            "tar.xz",
+                                            "zip"
+                                        ],
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "enum": [
+                                "7z",
+                                "default",
+                                "dir",
+                                "dmg",
+                                "mas",
+                                "mas-dev",
+                                "pkg",
+                                "tar.bz2",
+                                "tar.gz",
+                                "tar.lz",
+                                "tar.xz",
+                                "zip"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "identity": {
+                    "description": "The name of certificate to use when signing. Consider using environment variables [CSC_LINK or CSC_NAME](/code-signing) instead of specifying this option.\nMAS installer identity is specified in the [mas](/configuration/mas).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "icon": {
+                    "description": "The path to application icon.",
+                    "default": "build/icon.icns",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "entitlementsLoginHelper": {
+                    "description": "Path to login helper entitlement file.\nWhen using App Sandbox, the the `com.apple.security.inherit` key that is normally in the inherited entitlements cannot be inherited since the login helper is a standalone executable.\nDefaults to the value provided for `entitlements`. This option only applies when signing with `entitlements` provided.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "provisioningProfile": {
+                    "description": "The path to the provisioning profile to use when signing, absolute or relative to the app root.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "bundleVersion": {
+                    "description": "The `CFBundleVersion`. Do not use it unless [you need to](https://github.com/electron-userland/electron-builder/issues/565#issuecomment-230678643).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "bundleShortVersion": {
+                    "description": "The `CFBundleShortVersionString`. Do not use it unless you need to.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "darkModeSupport": {
+                    "description": "Whether a dark mode is supported. If your app does have a dark mode, you can make your app follow the system-wide dark mode setting.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "helperBundleId": {
+                    "description": "The bundle identifier to use in the application helper's plist.",
+                    "default": "${appBundleIdentifier}.helper",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "helperRendererBundleId": {
+                    "description": "The bundle identifier to use in the Renderer helper's plist.",
+                    "default": "${appBundleIdentifier}.helper.Renderer",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "helperPluginBundleId": {
+                    "description": "The bundle identifier to use in the Plugin helper's plist.",
+                    "default": "${appBundleIdentifier}.helper.Plugin",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "helperGPUBundleId": {
+                    "description": "The bundle identifier to use in the GPU helper's plist.",
+                    "default": "${appBundleIdentifier}.helper.GPU",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "helperEHBundleId": {
+                    "description": "The bundle identifier to use in the EH helper's plist.",
+                    "default": "${appBundleIdentifier}.helper.EH",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "helperNPBundleId": {
+                    "description": "The bundle identifier to use in the NP helper's plist.",
+                    "default": "${appBundleIdentifier}.helper.NP",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "type": {
+                    "description": "Whether to sign app for development or for distribution.",
+                    "default": "distribution",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "development",
+                                "distribution"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "extendInfo": {
+                    "description": "The extra entries for `Info.plist`."
+                },
+                "minimumSystemVersion": {
+                    "description": "The minimum version of macOS required for the app to run. Corresponds to `LSMinimumSystemVersion`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "requirements": {
+                    "description": "Path of [requirements file](https://developer.apple.com/library/mac/documentation/Security/Conceptual/CodeSigningGuide/RequirementLang/RequirementLang.html) used in signing. Not applicable for MAS.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "electronLanguages": {
+                    "description": "The electron locales. By default Electron locales used as is.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "string"
+                        }
+                    ]
+                },
+                "cscInstallerLink": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "cscInstallerKeyPassword": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "extraDistFiles": {
+                    "description": "Extra files to put in archive. Not applicable for `tar.*`.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "hardenedRuntime": {
+                    "description": "Whether your app has to be signed with hardened runtime.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "gatekeeperAssess": {
+                    "description": "Whether to let electron-osx-sign validate the signing or not.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "strictVerify": {
+                    "description": "Whether to let electron-osx-sign verify the contents or not.",
+                    "default": true,
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "string",
+                                "boolean"
+                            ]
+                        }
+                    ]
+                },
+                "signIgnore": {
+                    "description": "Regex or an array of regex's that signal skipping signing a file.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "timestamp": {
+                    "description": "Specify the URL of the timestamp authority server",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "appId": {
+                    "description": "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
+                    "default": "com.electron.${name}",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "executableName": {
+                    "description": "The executable name. Defaults to `productName`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "compression": {
+                    "description": "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
+                    "default": "normal",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "maximum",
+                                "normal",
+                                "store"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "files": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "extraResources": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "extraFiles": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "asar": {
+                    "description": "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work.",
+                    "default": true,
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/AsarOptions"
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "boolean"
+                            ]
+                        }
+                    ]
+                },
+                "asarUnpack": {
+                    "description": "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "fileAssociations": {
+                    "description": "The file associations.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileAssociation"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/FileAssociation"
+                            }
+                        }
+                    ]
+                },
+                "protocols": {
+                    "description": "The URL protocol schemes.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/Protocol"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/Protocol"
+                            }
+                        }
+                    ]
+                },
+                "forceCodeSigning": {
+                    "description": "Whether to fail if app will be not code signed.",
+                    "type": "boolean"
+                },
+                "electronUpdaterCompatibility": {
+                    "description": "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "detectUpdateChannel": {
+                    "description": "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "generateUpdatesFilesForAllChannels": {
+                    "description": "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "releaseInfo": {
+                    "description": "The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes=\"new features\"\n```",
+                    "$ref": "#/definitions/ReleaseInfo"
+                },
+                "cscLink": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "cscKeyPassword": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "defaultArch": {
+                    "type": "string"
+                }
+            }
+        },
+        "DmgOptions": {
+            "type": "object",
+            "properties": {
+                "background": {
+                    "description": "The path to background image (default: `build/background.tiff` or `build/background.png` if exists). The resolution of this file determines the resolution of the installer window.\nIf background is not specified, use `window.size`. Default locations expected background size to be 540x380.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "backgroundColor": {
+                    "description": "The background color (accepts css colors). Defaults to `#ffffff` (white) if no background image.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "icon": {
+                    "description": "The path to DMG icon (volume icon), which will be shown when mounted, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to the application icon (`build/icon.icns`).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "iconSize": {
+                    "description": "The size of all the icons inside the DMG.",
+                    "default": 80,
+                    "type": [
+                        "null",
+                        "number"
+                    ]
+                },
+                "iconTextSize": {
+                    "description": "The size of all the icon texts inside the DMG.",
+                    "default": 12,
+                    "type": [
+                        "null",
+                        "number"
+                    ]
+                },
+                "title": {
+                    "description": "The title of the produced DMG, which will be shown when mounted (volume name).\n\nMacro `${productName}`, `${version}` and `${name}` are supported.",
+                    "default": "${productName} ${version}",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "contents": {
+                    "description": "The content — to customize icon locations. The x and y coordinates refer to the position of the **center** of the icon (at 1x scale), and do not take the label into account.",
+                    "type": "array",
+                    "items": {
+                        "$ref": "#/definitions/DmgContent"
+                    }
+                },
+                "format": {
+                    "description": "The disk image format. `ULFO` (lzfse-compressed image (OS X 10.11+ only)).",
+                    "default": "UDZO",
+                    "enum": [
+                        "UDBZ",
+                        "UDCO",
+                        "UDRO",
+                        "UDRW",
+                        "UDZO",
+                        "ULFO"
+                    ],
+                    "type": "string"
+                },
+                "window": {
+                    "description": "The DMG window position and size. With y co-ordinates running from bottom to top.\n\nThe Finder makes sure that the window will be on the user’s display, so if you want your window at the top left of the display you could use `\"x\": 0, \"y\": 100000` as the x, y co-ordinates.\nIt is not to be possible to position the window relative to the [top left](https://github.com/electron-userland/electron-builder/issues/3990#issuecomment-512960957) or relative to the center of the user’s screen.",
+                    "$ref": "#/definitions/DmgWindow"
+                },
+                "internetEnabled": {
+                    "description": "Whether to create internet-enabled disk image (when it is downloaded using a browser it will automatically decompress the image, put the application on the desktop, unmount and remove the disk image file).",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "sign": {
+                    "description": "Whether to sign the DMG or not. Signing is not required and will lead to unwanted errors in combination with notarization requirements.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "writeUpdateInfo": {
+                    "default": true,
+                    "type": "boolean"
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "DmgContent": {
+            "type": "object",
+            "properties": {
+                "x": {
+                    "description": "The device-independent pixel offset from the left of the window to the **center** of the icon.",
+                    "type": "number"
+                },
+                "y": {
+                    "description": "The device-independent pixel offset from the top of the window to the **center** of the icon.",
+                    "type": "number"
+                },
+                "type": {
+                    "enum": [
+                        "dir",
+                        "file",
+                        "link"
+                    ],
+                    "type": "string"
+                },
+                "name": {
+                    "description": "The name of the file within the DMG. Defaults to basename of `path`.",
+                    "type": "string"
+                },
+                "path": {
+                    "description": "The path of the file within the DMG.",
+                    "type": "string"
+                }
+            },
+            "required": [
+                "x",
+                "y"
+            ]
+        },
+        "DmgWindow": {
+            "type": "object",
+            "properties": {
+                "x": {
+                    "description": "The X position relative to left of the screen.",
+                    "default": 400,
+                    "type": "number"
+                },
+                "y": {
+                    "description": "The Y position relative to bottom of the screen.",
+                    "default": 100,
+                    "type": "number"
+                },
+                "width": {
+                    "description": "The width. Defaults to background image width or 540.",
+                    "type": "number"
+                },
+                "height": {
+                    "description": "The height. Defaults to background image height or 380.",
+                    "type": "number"
+                }
+            }
+        },
+        "PkgOptions": {
+            "description": "macOS product archive options.",
+            "type": "object",
+            "properties": {
+                "scripts": {
+                    "description": "The scripts directory, relative to `build` (build resources directory).\nThe scripts can be in any language so long as the files are marked executable and have the appropriate shebang indicating the path to the interpreter.\nScripts are required to be executable (`chmod +x file`).",
+                    "default": "build/pkg-scripts",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "productbuild": {
+                    "description": "should be not documented, only to experiment",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "installLocation": {
+                    "description": "The install location. [Do not use it](https://stackoverflow.com/questions/12863944/how-do-you-specify-a-default-install-location-to-home-with-pkgbuild) to create per-user package.\nMostly never you will need to change this option. `/Applications` would install it as expected into `/Applications` if the local system domain is chosen, or into `$HOME/Applications` if the home installation is chosen.",
+                    "default": "/Applications",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "allowAnywhere": {
+                    "description": "Whether can be installed at the root of any volume, including non-system volumes. Otherwise, it cannot be installed at the root of a volume.\n\nCorresponds to [enable_anywhere](https://developer.apple.com/library/content/documentation/DeveloperTools/Reference/DistributionDefinitionRef/Chapters/Distribution_XML_Ref.html#//apple_ref/doc/uid/TP40005370-CH100-SW70).",
+                    "default": true,
+                    "type": [
+                        "null",
+                        "boolean"
+                    ]
+                },
+                "allowCurrentUserHome": {
+                    "description": "Whether can be installed into the current user’s home directory.\nA home directory installation is done as the current user (not as root), and it cannot write outside of the home directory.\nIf the product cannot be installed in the user’s home directory and be not completely functional from user’s home directory.\n\nCorresponds to [enable_currentUserHome](https://developer.apple.com/library/content/documentation/DeveloperTools/Reference/DistributionDefinitionRef/Chapters/Distribution_XML_Ref.html#//apple_ref/doc/uid/TP40005370-CH100-SW70).",
+                    "default": true,
+                    "type": [
+                        "null",
+                        "boolean"
+                    ]
+                },
+                "allowRootDirectory": {
+                    "description": "Whether can be installed into the root directory. Should usually be `true` unless the product can be installed only to the user’s home directory.\n\nCorresponds to [enable_localSystem](https://developer.apple.com/library/content/documentation/DeveloperTools/Reference/DistributionDefinitionRef/Chapters/Distribution_XML_Ref.html#//apple_ref/doc/uid/TP40005370-CH100-SW70).",
+                    "default": true,
+                    "type": [
+                        "null",
+                        "boolean"
+                    ]
+                },
+                "identity": {
+                    "description": "The name of certificate to use when signing. Consider using environment variables [CSC_LINK or CSC_NAME](/code-signing) instead of specifying this option.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "license": {
+                    "description": "The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). In addition to `txt, `rtf` and `html` supported (don't forget to use `target=\"_blank\"` for links).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "background": {
+                    "description": "Options for the background image for the installer.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/PkgBackgroundOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "welcome": {
+                    "description": "The path to the welcome file. This may be used to customize the text on the Introduction page of the installer.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "mustClose": {
+                    "description": "Identifies applications that must be closed before the package is installed.\\n\\nCorresponds to [must-close](https://developer.apple.com/library/archive/documentation/DeveloperTools/Reference/DistributionDefinitionRef/Chapters/Distribution_XML_Ref.html#//apple_ref/doc/uid/TP40005370-CH100-SW77)",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "conclusion": {
+                    "description": "The path to the conclusion file. This may be used to customize the text on the final \"Summary\" page of the installer.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "isRelocatable": {
+                    "description": "Install bundle over previous version if moved by user?",
+                    "default": true,
+                    "type": [
+                        "null",
+                        "boolean"
+                    ]
+                },
+                "isVersionChecked": {
+                    "description": "Don't install bundle if newer version on disk?",
+                    "default": true,
+                    "type": [
+                        "null",
+                        "boolean"
+                    ]
+                },
+                "hasStrictIdentifier": {
+                    "description": "Require identical bundle identifiers at install path?",
+                    "default": true,
+                    "type": [
+                        "null",
+                        "boolean"
+                    ]
+                },
+                "overwriteAction": {
+                    "description": "Specifies how an existing version of the bundle on disk should be handled when the version in\nthe package is installed.\n\nIf you specify upgrade, the bundle in the package atomi-cally replaces any version on disk;\nthis has the effect of deleting old paths that no longer exist in the new version of\nthe bundle.\n\nIf you specify update, the bundle in the package overwrites the version on disk, and any files\nnot contained in the package will be left intact; this is appropriate when you are delivering\nan update-only package.\n\nAnother effect of update is that the package bundle will not be installed at all if there is\nnot already a version on disk; this allows a package to deliver an update for an app that\nthe user might have deleted.",
+                    "default": "upgrade",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "update",
+                                "upgrade"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "PkgBackgroundOptions": {
+            "description": "Options for the background image in a PKG installer",
+            "type": "object",
+            "properties": {
+                "file": {
+                    "description": "Path to the image to use as an installer background.",
+                    "type": "string"
+                },
+                "alignment": {
+                    "description": "Alignment of the background image.\nOptions are: center, left, right, top, bottom, topleft, topright, bottomleft, bottomright",
+                    "default": "center",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "bottom",
+                                "bottomleft",
+                                "bottomright",
+                                "center",
+                                "left",
+                                "right",
+                                "top",
+                                "topleft",
+                                "topright"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "scaling": {
+                    "description": "Scaling of the background image.\nOptions are: tofit, none, proportional",
+                    "default": "tofit",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "none",
+                                "proportional",
+                                "tofit"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                }
+            }
+        },
+        "WindowsConfiguration": {
+            "type": "object",
+            "properties": {
+                "target": {
+                    "description": "The target package type: list of `nsis`, `nsis-web` (Web installer), `portable` ([portable](/configuration/nsis#portable) app without installation), `appx`, `msi`, `squirrel`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir`.\nAppX package can be built only on Windows 10.\n\nTo use Squirrel.Windows please install `electron-builder-squirrel-windows` dependency.",
+                    "default": "nsis",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/TargetConfiguration"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/TargetConfiguration"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "icon": {
+                    "description": "The path to application icon.",
+                    "default": "build/icon.ico",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "legalTrademarks": {
+                    "description": "The trademarks and registered trademarks.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "signingHashAlgorithms": {
+                    "description": "Array of signing algorithms used. For AppX `sha256` is always used.",
+                    "default": "['sha1', 'sha256']",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "enum": [
+                                    "sha1",
+                                    "sha256"
+                                ],
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "sign": {
+                    "description": "The custom function (or path to file or module id) to sign Windows executable.",
+                    "type": [
+                        "null",
+                        "string",
+                        "object"
+                    ]
+                },
+                "certificateFile": {
+                    "description": "The path to the *.pfx certificate you want to sign with. Please use it only if you cannot use env variable `CSC_LINK` (`WIN_CSC_LINK`) for some reason.\nPlease see [Code Signing](/code-signing).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "certificatePassword": {
+                    "description": "The password to the certificate provided in `certificateFile`. Please use it only if you cannot use env variable `CSC_KEY_PASSWORD` (`WIN_CSC_KEY_PASSWORD`) for some reason.\nPlease see [Code Signing](/code-signing).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "certificateSubjectName": {
+                    "description": "The name of the subject of the signing certificate. Required only for EV Code Signing and works only on Windows (or on macOS if [Parallels Desktop](https://www.parallels.com/products/desktop/) Windows 10 virtual machines exits).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "certificateSha1": {
+                    "description": "The SHA1 hash of the signing certificate. The SHA1 hash is commonly specified when multiple certificates satisfy the criteria specified by the remaining switches. Works only on Windows (or on macOS if [Parallels Desktop](https://www.parallels.com/products/desktop/) Windows 10 virtual machines exits).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "additionalCertificateFile": {
+                    "description": "The path to an additional certificate file you want to add to the signature block.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "rfc3161TimeStampServer": {
+                    "description": "The URL of the RFC 3161 time stamp server.",
+                    "default": "http://timestamp.digicert.com",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "timeStampServer": {
+                    "description": "The URL of the time stamp server.",
+                    "default": "http://timestamp.digicert.com",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publisherName": {
+                    "description": "[The publisher name](https://github.com/electron-userland/electron-builder/issues/1187#issuecomment-278972073), exactly as in your code signed certificate. Several names can be provided.\nDefaults to common name from your code signing certificate.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "verifyUpdateCodeSignature": {
+                    "description": "Whether to verify the signature of an available update before installation.\nThe [publisher name](#publisherName) will be used for the signature verification.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "requestedExecutionLevel": {
+                    "description": "The [security level](https://msdn.microsoft.com/en-us/library/6ad1fshk.aspx#Anchor_9) at which the application requests to be executed.\nCannot be specified per target, allowed only in the `win`.",
+                    "default": "asInvoker",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "asInvoker",
+                                "highestAvailable",
+                                "requireAdministrator"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "signAndEditExecutable": {
+                    "description": "Whether to sign and add metadata to executable. Advanced option.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "signDlls": {
+                    "description": "Whether to sign DLL files. Advanced option.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "appId": {
+                    "description": "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
+                    "default": "com.electron.${name}",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "executableName": {
+                    "description": "The executable name. Defaults to `productName`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "compression": {
+                    "description": "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
+                    "default": "normal",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "maximum",
+                                "normal",
+                                "store"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "files": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "extraResources": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "extraFiles": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "asar": {
+                    "description": "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work.",
+                    "default": true,
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/AsarOptions"
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "boolean"
+                            ]
+                        }
+                    ]
+                },
+                "asarUnpack": {
+                    "description": "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "fileAssociations": {
+                    "description": "The file associations.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileAssociation"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/FileAssociation"
+                            }
+                        }
+                    ]
+                },
+                "protocols": {
+                    "description": "The URL protocol schemes.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/Protocol"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/Protocol"
+                            }
+                        }
+                    ]
+                },
+                "forceCodeSigning": {
+                    "description": "Whether to fail if app will be not code signed.",
+                    "type": "boolean"
+                },
+                "electronUpdaterCompatibility": {
+                    "description": "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "detectUpdateChannel": {
+                    "description": "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "generateUpdatesFilesForAllChannels": {
+                    "description": "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "releaseInfo": {
+                    "description": "The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes=\"new features\"\n```",
+                    "$ref": "#/definitions/ReleaseInfo"
+                },
+                "cscLink": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "cscKeyPassword": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "defaultArch": {
+                    "type": "string"
+                }
+            }
+        },
+        "NsisOptions": {
+            "type": "object",
+            "properties": {
+                "oneClick": {
+                    "description": "Whether to create one-click installer or assisted.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "perMachine": {
+                    "description": "Whether to show install mode installer page (choice per-machine or per-user) for assisted installer. Or whether installation always per all users (per-machine).\n\nIf `oneClick` is `true` (default): Whether to install per all users (per-machine).\n\nIf `oneClick` is `false` and `perMachine` is `true`: no install mode installer page, always install per-machine.\n\nIf `oneClick` is `false` and `perMachine` is `false` (default): install mode installer page.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "allowElevation": {
+                    "description": "*assisted installer only.* Allow requesting for elevation. If false, user will have to restart installer with elevated permissions.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "allowToChangeInstallationDirectory": {
+                    "description": "*assisted installer only.* Whether to allow user to change installation directory.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "installerIcon": {
+                    "description": "The path to installer icon, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerIcon.ico` or application icon.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "uninstallerIcon": {
+                    "description": "The path to uninstaller icon, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/uninstallerIcon.ico` or application icon.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "installerHeader": {
+                    "description": "*assisted installer only.* `MUI_HEADERIMAGE`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.",
+                    "default": "build/installerHeader.bmp",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "installerHeaderIcon": {
+                    "description": "*one-click installer only.* The path to header icon (above the progress bar), relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerHeaderIcon.ico` or application icon.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "installerSidebar": {
+                    "description": "*assisted installer only.* `MUI_WELCOMEFINISHPAGE_BITMAP`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerSidebar.bmp` or `${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp`. Image size 164 × 314 pixels.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "uninstallerSidebar": {
+                    "description": "*assisted installer only.* `MUI_UNWELCOMEFINISHPAGE_BITMAP`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `installerSidebar` option or `build/uninstallerSidebar.bmp` or `build/installerSidebar.bmp` or `${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp`",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "uninstallDisplayName": {
+                    "description": "The uninstaller display name in the control panel.",
+                    "default": "${productName} ${version}",
+                    "type": "string"
+                },
+                "include": {
+                    "description": "The path to NSIS include script to customize installer. Defaults to `build/installer.nsh`. See [Custom NSIS script](#custom-nsis-script).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "script": {
+                    "description": "The path to NSIS script to customize installer. Defaults to `build/installer.nsi`. See [Custom NSIS script](#custom-nsis-script).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "license": {
+                    "description": "The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). In addition to `txt, `rtf` and `html` supported (don't forget to use `target=\"_blank\"` for links).\n\nMultiple license files in different languages are supported — use lang postfix (e.g. `_de`, `_ru`)). For example, create files `license_de.txt` and `license_en.txt` in the build resources.\nIf OS language is german, `license_de.txt` will be displayed. See map of [language code to name](https://github.com/meikidd/iso-639-1/blob/master/src/data.js).\n\nAppropriate license file will be selected by user OS language.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName} Setup ${version}.${ext}`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "deleteAppDataOnUninstall": {
+                    "description": "*one-click installer only.* Whether to delete app data on uninstall.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "differentialPackage": {
+                    "type": "boolean"
+                },
+                "displayLanguageSelector": {
+                    "description": "Whether to display a language selection dialog. Not recommended (by default will be detected using OS language).",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "installerLanguages": {
+                    "description": "The installer languages (e.g. `en_US`, `de_DE`). Change only if you understand what do you do and for what.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "language": {
+                    "description": "[LCID Dec](https://msdn.microsoft.com/en-au/goglobal/bb964664.aspx), defaults to `1033`(`English - United States`).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "multiLanguageInstaller": {
+                    "description": "Whether to create multi-language installer. Defaults to `unicode` option value.",
+                    "type": "boolean"
+                },
+                "packElevateHelper": {
+                    "description": "Whether to pack the elevate executable (required for electron-updater if per-machine installer used or can be used in the future). Ignored if `perMachine` is set to `true`.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "preCompressedFileExtensions": {
+                    "description": "The file extension of files that will be not compressed. Applicable only for `extraResources` and `extraFiles` files.",
+                    "default": [
+                        ".avi",
+                        ".mov",
+                        ".m4v",
+                        ".mp4",
+                        ".m4p",
+                        ".qt",
+                        ".mkv",
+                        ".webm",
+                        ".vmdk"
+                    ],
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "unicode": {
+                    "description": "Whether to create [Unicode installer](http://nsis.sourceforge.net/Docs/Chapter1.html#intro-unicode).",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "guid": {
+                    "description": "See [GUID vs Application Name](../configuration/nsis#guid-vs-application-name).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "warningsAsErrors": {
+                    "description": "If `warningsAsErrors` is `true` (default): NSIS will treat warnings as errors. If `warningsAsErrors` is `false`: NSIS will allow warnings.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "useZip": {
+                    "default": false,
+                    "type": "boolean"
+                },
+                "customNsisBinary": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/CustomNsisBinary"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "debugLogging": {
+                    "description": "Whether or not to enable NSIS logging for debugging.\nNote: Requires a debug-enabled NSIS build.\nelectron-builder's included `makensis` only supports building debug-enabled NSIS installers on Windows currently\nhttps://github.com/electron-userland/electron-builder/issues/5119#issuecomment-811353612",
+                    "type": [
+                        "null",
+                        "boolean"
+                    ]
+                },
+                "runAfterFinish": {
+                    "description": "Whether to run the installed application after finish. For assisted installer corresponding checkbox will be removed.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "createDesktopShortcut": {
+                    "description": "Whether to create desktop shortcut. Set to `always` if to recreate also on reinstall (even if removed by user).",
+                    "default": true,
+                    "enum": [
+                        "always",
+                        false,
+                        true
+                    ]
+                },
+                "createStartMenuShortcut": {
+                    "description": "Whether to create start menu shortcut.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "menuCategory": {
+                    "description": "Whether to create submenu for start menu shortcut and program files directory. If `true`, company name will be used. Or string value.",
+                    "default": false,
+                    "type": [
+                        "string",
+                        "boolean"
+                    ]
+                },
+                "shortcutName": {
+                    "description": "The name that will be used for all shortcuts. Defaults to the application name.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "CustomNsisBinary": {
+            "type": "object",
+            "properties": {
+                "url": {
+                    "default": "https://github.com/electron-userland/electron-builder-binaries/releases/download",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "checksum": {
+                    "default": "o+YZsXHp8LNihhuk7JsCDhdIgx0MKKK+1b3sGD+4zX5djZULe4/4QMcAsfQ+0r+a8FnwBt7BVBHkIkJHjKQ0sg==",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "version": {
+                    "default": "3.0.4.2",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                }
+            },
+            "required": [
+                "url"
+            ]
+        },
+        "NsisWebOptions": {
+            "description": "Web Installer options.",
+            "type": "object",
+            "properties": {
+                "appPackageUrl": {
+                    "description": "The application package download URL. Optional — by default computed using publish configuration.\n\nURL like `https://example.com/download/latest` allows web installer to be version independent (installer will download latest application package).\nPlease note — it is [full URL](https://github.com/electron-userland/electron-builder/issues/1810#issuecomment-317650878).\n\nCustom `X-Arch` http header is set to `32` or `64`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName} Web Setup ${version}.${ext}`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "oneClick": {
+                    "description": "Whether to create one-click installer or assisted.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "perMachine": {
+                    "description": "Whether to show install mode installer page (choice per-machine or per-user) for assisted installer. Or whether installation always per all users (per-machine).\n\nIf `oneClick` is `true` (default): Whether to install per all users (per-machine).\n\nIf `oneClick` is `false` and `perMachine` is `true`: no install mode installer page, always install per-machine.\n\nIf `oneClick` is `false` and `perMachine` is `false` (default): install mode installer page.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "allowElevation": {
+                    "description": "*assisted installer only.* Allow requesting for elevation. If false, user will have to restart installer with elevated permissions.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "allowToChangeInstallationDirectory": {
+                    "description": "*assisted installer only.* Whether to allow user to change installation directory.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "installerIcon": {
+                    "description": "The path to installer icon, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerIcon.ico` or application icon.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "uninstallerIcon": {
+                    "description": "The path to uninstaller icon, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/uninstallerIcon.ico` or application icon.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "installerHeader": {
+                    "description": "*assisted installer only.* `MUI_HEADERIMAGE`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.",
+                    "default": "build/installerHeader.bmp",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "installerHeaderIcon": {
+                    "description": "*one-click installer only.* The path to header icon (above the progress bar), relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerHeaderIcon.ico` or application icon.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "installerSidebar": {
+                    "description": "*assisted installer only.* `MUI_WELCOMEFINISHPAGE_BITMAP`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerSidebar.bmp` or `${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp`. Image size 164 × 314 pixels.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "uninstallerSidebar": {
+                    "description": "*assisted installer only.* `MUI_UNWELCOMEFINISHPAGE_BITMAP`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `installerSidebar` option or `build/uninstallerSidebar.bmp` or `build/installerSidebar.bmp` or `${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp`",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "uninstallDisplayName": {
+                    "description": "The uninstaller display name in the control panel.",
+                    "default": "${productName} ${version}",
+                    "type": "string"
+                },
+                "include": {
+                    "description": "The path to NSIS include script to customize installer. Defaults to `build/installer.nsh`. See [Custom NSIS script](#custom-nsis-script).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "script": {
+                    "description": "The path to NSIS script to customize installer. Defaults to `build/installer.nsi`. See [Custom NSIS script](#custom-nsis-script).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "license": {
+                    "description": "The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). In addition to `txt, `rtf` and `html` supported (don't forget to use `target=\"_blank\"` for links).\n\nMultiple license files in different languages are supported — use lang postfix (e.g. `_de`, `_ru`)). For example, create files `license_de.txt` and `license_en.txt` in the build resources.\nIf OS language is german, `license_de.txt` will be displayed. See map of [language code to name](https://github.com/meikidd/iso-639-1/blob/master/src/data.js).\n\nAppropriate license file will be selected by user OS language.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "deleteAppDataOnUninstall": {
+                    "description": "*one-click installer only.* Whether to delete app data on uninstall.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "differentialPackage": {
+                    "type": "boolean"
+                },
+                "displayLanguageSelector": {
+                    "description": "Whether to display a language selection dialog. Not recommended (by default will be detected using OS language).",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "installerLanguages": {
+                    "description": "The installer languages (e.g. `en_US`, `de_DE`). Change only if you understand what do you do and for what.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "language": {
+                    "description": "[LCID Dec](https://msdn.microsoft.com/en-au/goglobal/bb964664.aspx), defaults to `1033`(`English - United States`).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "multiLanguageInstaller": {
+                    "description": "Whether to create multi-language installer. Defaults to `unicode` option value.",
+                    "type": "boolean"
+                },
+                "packElevateHelper": {
+                    "description": "Whether to pack the elevate executable (required for electron-updater if per-machine installer used or can be used in the future). Ignored if `perMachine` is set to `true`.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "preCompressedFileExtensions": {
+                    "description": "The file extension of files that will be not compressed. Applicable only for `extraResources` and `extraFiles` files.",
+                    "default": [
+                        ".avi",
+                        ".mov",
+                        ".m4v",
+                        ".mp4",
+                        ".m4p",
+                        ".qt",
+                        ".mkv",
+                        ".webm",
+                        ".vmdk"
+                    ],
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "unicode": {
+                    "description": "Whether to create [Unicode installer](http://nsis.sourceforge.net/Docs/Chapter1.html#intro-unicode).",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "guid": {
+                    "description": "See [GUID vs Application Name](../configuration/nsis#guid-vs-application-name).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "warningsAsErrors": {
+                    "description": "If `warningsAsErrors` is `true` (default): NSIS will treat warnings as errors. If `warningsAsErrors` is `false`: NSIS will allow warnings.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "useZip": {
+                    "default": false,
+                    "type": "boolean"
+                },
+                "customNsisBinary": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/CustomNsisBinary"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "debugLogging": {
+                    "description": "Whether or not to enable NSIS logging for debugging.\nNote: Requires a debug-enabled NSIS build.\nelectron-builder's included `makensis` only supports building debug-enabled NSIS installers on Windows currently\nhttps://github.com/electron-userland/electron-builder/issues/5119#issuecomment-811353612",
+                    "type": [
+                        "null",
+                        "boolean"
+                    ]
+                },
+                "runAfterFinish": {
+                    "description": "Whether to run the installed application after finish. For assisted installer corresponding checkbox will be removed.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "createDesktopShortcut": {
+                    "description": "Whether to create desktop shortcut. Set to `always` if to recreate also on reinstall (even if removed by user).",
+                    "default": true,
+                    "enum": [
+                        "always",
+                        false,
+                        true
+                    ]
+                },
+                "createStartMenuShortcut": {
+                    "description": "Whether to create start menu shortcut.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "menuCategory": {
+                    "description": "Whether to create submenu for start menu shortcut and program files directory. If `true`, company name will be used. Or string value.",
+                    "default": false,
+                    "type": [
+                        "string",
+                        "boolean"
+                    ]
+                },
+                "shortcutName": {
+                    "description": "The name that will be used for all shortcuts. Defaults to the application name.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "PortableOptions": {
+            "description": "Portable options.",
+            "type": "object",
+            "properties": {
+                "requestExecutionLevel": {
+                    "description": "The [requested execution level](http://nsis.sourceforge.net/Reference/RequestExecutionLevel) for Windows.",
+                    "default": "user",
+                    "enum": [
+                        "admin",
+                        "highest",
+                        "user"
+                    ],
+                    "type": "string"
+                },
+                "unpackDirName": {
+                    "description": "The unpack directory for the portable app resources.\n\nIf set to a string, it will be the name in [TEMP](https://www.askvg.com/where-does-windows-store-temporary-files-and-how-to-change-temp-folder-location/) directory\nIf set explicitly to `false`, it will use the Windows temp directory ($PLUGINSDIR) that is unique to each launch of the portable application.\n\nDefaults to [uuid](https://github.com/segmentio/ksuid) of build (changed on each build of portable executable).",
+                    "type": [
+                        "string",
+                        "boolean"
+                    ]
+                },
+                "splashImage": {
+                    "description": "The image to show while the portable executable is extracting. This image must be a bitmap (`.bmp`) image.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "unicode": {
+                    "description": "Whether to create [Unicode installer](http://nsis.sourceforge.net/Docs/Chapter1.html#intro-unicode).",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "guid": {
+                    "description": "See [GUID vs Application Name](../configuration/nsis#guid-vs-application-name).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "warningsAsErrors": {
+                    "description": "If `warningsAsErrors` is `true` (default): NSIS will treat warnings as errors. If `warningsAsErrors` is `false`: NSIS will allow warnings.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "useZip": {
+                    "default": false,
+                    "type": "boolean"
+                },
+                "customNsisBinary": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/CustomNsisBinary"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "debugLogging": {
+                    "description": "Whether or not to enable NSIS logging for debugging.\nNote: Requires a debug-enabled NSIS build.\nelectron-builder's included `makensis` only supports building debug-enabled NSIS installers on Windows currently\nhttps://github.com/electron-userland/electron-builder/issues/5119#issuecomment-811353612",
+                    "type": [
+                        "null",
+                        "boolean"
+                    ]
+                }
+            }
+        },
+        "AppXOptions": {
+            "type": "object",
+            "properties": {
+                "applicationId": {
+                    "description": "The application id. Defaults to `identityName`. Can’t start with numbers.",
+                    "type": "string"
+                },
+                "backgroundColor": {
+                    "description": "The background color of the app tile. See [Visual Elements](https://msdn.microsoft.com/en-us/library/windows/apps/br211471.aspx).",
+                    "default": "#464646",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "displayName": {
+                    "description": "A friendly name that can be displayed to users. Corresponds to [Properties.DisplayName](https://msdn.microsoft.com/en-us/library/windows/apps/br211432.aspx).\nDefaults to the application product name.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "identityName": {
+                    "description": "The name. Corresponds to [Identity.Name](https://msdn.microsoft.com/en-us/library/windows/apps/br211441.aspx). Defaults to the [application name](/configuration/configuration#Metadata-name).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publisher": {
+                    "description": "The Windows Store publisher. Not used if AppX is build for testing. See [AppX Package Code Signing](#appx-package-code-signing) below.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publisherDisplayName": {
+                    "description": "A friendly name for the publisher that can be displayed to users. Corresponds to [Properties.PublisherDisplayName](https://msdn.microsoft.com/en-us/library/windows/apps/br211460.aspx).\nDefaults to company name from the application metadata.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "languages": {
+                    "description": "The list of [supported languages](https://docs.microsoft.com/en-us/windows/uwp/globalizing/manage-language-and-region#specify-the-supported-languages-in-the-apps-manifest) that will be listed in the Windows Store.\nThe first entry (index 0) will be the default language.\nDefaults to en-US if omitted.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "addAutoLaunchExtension": {
+                    "description": "Whether to add auto launch extension. Defaults to `true` if [electron-winstore-auto-launch](https://github.com/felixrieseberg/electron-winstore-auto-launch) in the dependencies.",
+                    "type": "boolean"
+                },
+                "customExtensionsPath": {
+                    "description": "Relative path to custom extensions xml to be included in an `appmanifest.xml`.",
+                    "type": "string"
+                },
+                "showNameOnTiles": {
+                    "description": "Whether to overlay the app's name on top of tile images on the Start screen. Defaults to `false`. (https://docs.microsoft.com/en-us/uwp/schemas/appxpackage/uapmanifestschema/element-uap-shownameontiles) in the dependencies.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "electronUpdaterAware": {
+                    "default": false,
+                    "type": "boolean"
+                },
+                "setBuildNumber": {
+                    "description": "Whether to set build number. See https://github.com/electron-userland/electron-builder/issues/3875",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "makeappxArgs": {
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "MsiOptions": {
+            "type": "object",
+            "properties": {
+                "oneClick": {
+                    "description": "One-click installation.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "upgradeCode": {
+                    "description": "The [upgrade code](https://msdn.microsoft.com/en-us/library/windows/desktop/aa372375(v=vs.85).aspx). Optional, by default generated using app id.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "warningsAsErrors": {
+                    "description": "If `warningsAsErrors` is `true` (default): treat warnings as errors. If `warningsAsErrors` is `false`: allow warnings.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "additionalWixArgs": {
+                    "description": "Any additional arguments to be passed to the WiX installer compiler, such as `[\"-ext\", \"WixUtilExtension\"]`",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "perMachine": {
+                    "description": "Whether to install per all users (per-machine).",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "runAfterFinish": {
+                    "description": "Whether to run the installed application after finish. For assisted installer corresponding checkbox will be removed.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "createDesktopShortcut": {
+                    "description": "Whether to create desktop shortcut. Set to `always` if to recreate also on reinstall (even if removed by user).",
+                    "default": true,
+                    "enum": [
+                        "always",
+                        false,
+                        true
+                    ]
+                },
+                "createStartMenuShortcut": {
+                    "description": "Whether to create start menu shortcut.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "menuCategory": {
+                    "description": "Whether to create submenu for start menu shortcut and program files directory. If `true`, company name will be used. Or string value.",
+                    "default": false,
+                    "type": [
+                        "string",
+                        "boolean"
+                    ]
+                },
+                "shortcutName": {
+                    "description": "The name that will be used for all shortcuts. Defaults to the application name.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "SquirrelWindowsOptions": {
+            "type": "object",
+            "properties": {
+                "iconUrl": {
+                    "description": "A URL to an ICO file to use as the application icon (displayed in Control Panel > Programs and Features). Defaults to the Electron icon.\n\nPlease note — [local icon file url is not accepted](https://github.com/atom/grunt-electron-installer/issues/73), must be https/http.\n\nIf you don't plan to build windows installer, you can omit it.\nIf your project repository is public on GitHub, it will be `https://github.com/${u}/${p}/blob/master/build/icon.ico?raw=true` by default.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "loadingGif": {
+                    "description": "The path to a .gif file to display during install. `build/install-spinner.gif` will be used if exists (it is a recommended way to set)\n(otherwise [default](https://github.com/electron/windows-installer/blob/master/resources/install-spinner.gif)).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "msi": {
+                    "description": "Whether to create an MSI installer. Defaults to `false` (MSI is not created).",
+                    "type": "boolean"
+                },
+                "remoteReleases": {
+                    "description": "A URL to your existing updates. Or `true` to automatically set to your GitHub repository. If given, these will be downloaded to create delta updates.",
+                    "type": [
+                        "null",
+                        "string",
+                        "boolean"
+                    ]
+                },
+                "remoteToken": {
+                    "description": "Authentication token for remote updates",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "useAppIdAsId": {
+                    "description": "Use `appId` to identify package instead of `name`.",
+                    "type": "boolean"
+                },
+                "name": {
+                    "description": "https://github.com/electron-userland/electron-builder/issues/1743",
+                    "type": "string"
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "LinuxConfiguration": {
+            "type": "object",
+            "properties": {
+                "target": {
+                    "description": "Target package type: list of `AppImage`, `snap`, `deb`, `rpm`, `freebsd`, `pacman`, `p5p`, `apk`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir`.\n\nelectron-builder [docker image](/multi-platform-build#docker) can be used to build Linux targets on any platform.\n\nPlease [do not put an AppImage into another archive](https://github.com/probonopd/AppImageKit/wiki/Creating-AppImages#common-mistake) like a .zip or .tar.gz.",
+                    "default": "AppImage",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/TargetConfiguration"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/TargetConfiguration"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "maintainer": {
+                    "description": "The maintainer. Defaults to [author](/configuration/configuration#Metadata-author).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "vendor": {
+                    "description": "The vendor. Defaults to [author](/configuration/configuration#Metadata-author).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "icon": {
+                    "description": "The path to icon set directory or one png file, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory. The icon filename must contain the size (e.g. 32x32.png) of the icon.\nBy default will be generated automatically based on the macOS icns file.",
+                    "type": "string"
+                },
+                "packageCategory": {
+                    "description": "backward compatibility + to allow specify fpm-only category for all possible fpm targets in one place",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "synopsis": {
+                    "description": "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "description": {
+                    "description": "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "category": {
+                    "description": "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "mimeTypes": {
+                    "description": "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "desktop": {
+                    "description": "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value)."
+                },
+                "executableArgs": {
+                    "description": "The executable parameters. Pass to executableName",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "appId": {
+                    "description": "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
+                    "default": "com.electron.${name}",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "executableName": {
+                    "description": "The executable name. Defaults to `productName`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "compression": {
+                    "description": "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
+                    "default": "normal",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "maximum",
+                                "normal",
+                                "store"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "files": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "extraResources": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "extraFiles": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "asar": {
+                    "description": "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work.",
+                    "default": true,
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/AsarOptions"
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "boolean"
+                            ]
+                        }
+                    ]
+                },
+                "asarUnpack": {
+                    "description": "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "fileAssociations": {
+                    "description": "The file associations.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileAssociation"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/FileAssociation"
+                            }
+                        }
+                    ]
+                },
+                "protocols": {
+                    "description": "The URL protocol schemes.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/Protocol"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/Protocol"
+                            }
+                        }
+                    ]
+                },
+                "forceCodeSigning": {
+                    "description": "Whether to fail if app will be not code signed.",
+                    "type": "boolean"
+                },
+                "electronUpdaterCompatibility": {
+                    "description": "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "detectUpdateChannel": {
+                    "description": "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "generateUpdatesFilesForAllChannels": {
+                    "description": "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "releaseInfo": {
+                    "description": "The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes=\"new features\"\n```",
+                    "$ref": "#/definitions/ReleaseInfo"
+                },
+                "cscLink": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "cscKeyPassword": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "defaultArch": {
+                    "type": "string"
+                }
+            }
+        },
+        "DebOptions": {
+            "type": "object",
+            "properties": {
+                "depends": {
+                    "description": "Package dependencies. Defaults to `[\"gconf2\", \"gconf-service\", \"libnotify4\", \"libappindicator1\", \"libxtst6\", \"libnss3\"]`.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "packageCategory": {
+                    "description": "The [package category](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Section).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "priority": {
+                    "description": "The [Priority](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Priority) attribute.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "compression": {
+                    "description": "The compression type.",
+                    "default": "xz",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "bzip2",
+                                "gz",
+                                "xz"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "icon": {
+                    "type": "string"
+                },
+                "packageName": {
+                    "description": "The name of the package.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "vendor": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "maintainer": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "afterInstall": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "afterRemove": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "fpm": {
+                    "description": "*Advanced only* The [fpm](https://github.com/jordansissel/fpm/wiki#usage) options.\n\nExample: `[\"--before-install=build/deb-preinstall.sh\", \"--after-upgrade=build/deb-postinstall.sh\"]`",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "synopsis": {
+                    "description": "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "description": {
+                    "description": "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "category": {
+                    "description": "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "mimeTypes": {
+                    "description": "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "desktop": {
+                    "description": "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value)."
+                },
+                "executableArgs": {
+                    "description": "The executable parameters. Pass to executableName",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "SnapOptions": {
+            "type": "object",
+            "properties": {
+                "confinement": {
+                    "description": "The type of [confinement](https://snapcraft.io/docs/reference/confinement) supported by the snap.",
+                    "default": "strict",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "classic",
+                                "devmode",
+                                "strict"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "environment": {
+                    "description": "The custom environment. Defaults to `{\"TMPDIR: \"$XDG_RUNTIME_DIR\"}`. If you set custom, it will be merged with default.",
+                    "anyOf": [
+                        {
+                            "type": "object",
+                            "additionalProperties": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "summary": {
+                    "description": "The 78 character long summary. Defaults to [productName](/configuration/configuration#Configuration-productName).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "grade": {
+                    "description": "The quality grade of the snap. It can be either `devel` (i.e. a development version of the snap, so not to be published to the “stable” or “candidate” channels) or “stable” (i.e. a stable release or release candidate, which can be released to all channels).",
+                    "default": "stable",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "devel",
+                                "stable"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "assumes": {
+                    "description": "The list of features that must be supported by the core in order for this snap to install.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "buildPackages": {
+                    "description": "The list of debian packages needs to be installed for building this snap.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "stagePackages": {
+                    "description": "The list of Ubuntu packages to use that are needed to support the `app` part creation. Like `depends` for `deb`.\nDefaults to `[\"libnspr4\", \"libnss3\", \"libxss1\", \"libappindicator3-1\", \"libsecret-1-0\"]`.\n\nIf list contains `default`, it will be replaced to default list, so, `[\"default\", \"foo\"]` can be used to add custom package `foo` in addition to defaults.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "hooks": {
+                    "description": "The [hooks](https://docs.snapcraft.io/build-snaps/hooks) directory, relative to `build` (build resources directory).",
+                    "default": "build/snap-hooks",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "plugs": {
+                    "description": "The list of [plugs](https://snapcraft.io/docs/reference/interfaces).\nDefaults to `[\"desktop\", \"desktop-legacy\", \"home\", \"x11\", \"unity7\", \"browser-support\", \"network\", \"gsettings\", \"audio-playback\", \"pulseaudio\", \"opengl\"]`.\n\nIf list contains `default`, it will be replaced to default list, so, `[\"default\", \"foo\"]` can be used to add custom plug `foo` in addition to defaults.\n\nAdditional attributes can be specified using object instead of just name of plug:\n```\n[\n {\n   \"browser-sandbox\": {\n     \"interface\": \"browser-support\",\n     \"allow-sandbox\": true\n   },\n },\n \"another-simple-plug-name\"\n]\n```",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/PlugDescriptor"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/PlugDescriptor"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "slots": {
+                    "description": "The list of [slots](https://snapcraft.io/docs/reference/interfaces).\n\nAdditional attributes can be specified using object instead of just name of slot:\n```\n[\n {\n   \"mpris\": {\n     \"name\": \"chromium\"\n   },\n }\n]\n\nIn case you want your application to be a compliant MPris player, you will need to definie\nThe mpris slot with \"chromium\" name.\nThis electron has it [hardcoded](https://source.chromium.org/chromium/chromium/src/+/master:components/system_media_controls/linux/system_media_controls_linux.cc;l=51;bpv=0;bpt=1),\nand we need to pass this name so snap [will allow it](https://forum.snapcraft.io/t/unable-to-use-mpris-interface/15360/7) in strict confinement.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/PlugDescriptor"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/SlotDescriptor"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "after": {
+                    "description": "Specifies any [parts](https://snapcraft.io/docs/reference/parts) that should be built before this part.\nDefaults to `[\"desktop-gtk2\"\"]`.\n\nIf list contains `default`, it will be replaced to default list, so, `[\"default\", \"foo\"]` can be used to add custom parts `foo` in addition to defaults.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "useTemplateApp": {
+                    "description": "Whether to use template snap. Defaults to `true` if `stagePackages` not specified.",
+                    "type": "boolean"
+                },
+                "autoStart": {
+                    "description": "Whether or not the snap should automatically start on login.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "layout": {
+                    "description": "Specifies any files to make accessible from locations such as `/usr`, `/var`, and `/etc`. See [snap layouts](https://snapcraft.io/docs/snap-layouts) to learn more.",
+                    "anyOf": [
+                        {
+                            "type": "object",
+                            "additionalProperties": {
+                                "type": "object",
+                                "additionalProperties": {
+                                    "type": "string"
+                                }
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "appPartStage": {
+                    "description": "Specifies which files from the app part to stage and which to exclude. Individual files, directories, wildcards, globstars, and exclusions are accepted. See [Snapcraft filesets](https://snapcraft.io/docs/snapcraft-filesets) to learn more about the format.\n\nThe defaults can be found in [snap.ts](https://github.com/electron-userland/electron-builder/blob/master/packages/app-builder-lib/templates/snap/snapcraft.yaml#L29).",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "title": {
+                    "description": "An optional title for the snap, may contain uppercase letters and spaces. Defaults to `productName`. See [snap format documentation](https://snapcraft.io/docs/snap-format).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "synopsis": {
+                    "description": "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "description": {
+                    "description": "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "category": {
+                    "description": "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "mimeTypes": {
+                    "description": "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "desktop": {
+                    "description": "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value)."
+                },
+                "executableArgs": {
+                    "description": "The executable parameters. Pass to executableName",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "PlugDescriptor": {
+            "type": "object",
+            "additionalProperties": {
+                "anyOf": [
+                    {
+                        "type": "object",
+                        "additionalProperties": {}
+                    },
+                    {
+                        "type": "null"
+                    }
+                ]
+            }
+        },
+        "SlotDescriptor": {
+            "type": "object",
+            "additionalProperties": {
+                "anyOf": [
+                    {
+                        "type": "object",
+                        "additionalProperties": {}
+                    },
+                    {
+                        "type": "null"
+                    }
+                ]
+            }
+        },
+        "AppImageOptions": {
+            "type": "object",
+            "properties": {
+                "license": {
+                    "description": "The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). Only plain text is supported.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "synopsis": {
+                    "description": "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "description": {
+                    "description": "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "category": {
+                    "description": "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "mimeTypes": {
+                    "description": "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "desktop": {
+                    "description": "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value)."
+                },
+                "executableArgs": {
+                    "description": "The executable parameters. Pass to executableName",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "FlatpakOptions": {
+            "type": "object",
+            "properties": {
+                "license": {
+                    "description": "The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). Only plain text is supported.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "runtime": {
+                    "description": "The name of the runtime that the application uses. Defaults to `org.freedesktop.Platform`.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    "type": "string"
+                },
+                "runtimeVersion": {
+                    "description": "The version of the runtime that the application uses. Defaults to `20.08`.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    "type": "string"
+                },
+                "sdk": {
+                    "description": "The name of the development runtime that the application builds with. Defaults to `org.freedesktop.Sdk`.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    "type": "string"
+                },
+                "base": {
+                    "description": "Start with the files from the specified application. This can be used to create applications that extend another application.\nDefaults to [org.electronjs.Electron2.BaseApp](https://github.com/flathub/org.electronjs.Electron2.BaseApp).\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    "type": "string"
+                },
+                "baseVersion": {
+                    "description": "Use this specific version of the application specified in base. Defaults to `20.08`.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    "type": "string"
+                },
+                "branch": {
+                    "description": "The branch to use when exporting the application. Defaults to `master`.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    "type": "string"
+                },
+                "finishArgs": {
+                    "description": "An array of arguments passed to the flatpak build-finish command. Defaults to:\n```json\n[\n  // Wayland/X11 Rendering\n  \"--socket=wayland\",\n  \"--socket=x11\",\n  \"--share=ipc\",\n  // Open GL\n  \"--device=dri\",\n  // Audio output\n  \"--socket=pulseaudio\",\n  // Read/write home directory access\n  \"--filesystem=home\",\n  // Allow communication with network\n  \"--share=network\",\n  // System notifications with libnotify\n  \"--talk-name=org.freedesktop.Notifications\",\n]\n```\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    "type": "array",
+                    "items": {
+                        "type": "string"
+                    }
+                },
+                "modules": {
+                    "description": "An array of objects specifying the modules to be built in order.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest).",
+                    "type": "array",
+                    "items": {}
+                },
+                "files": {
+                    "description": "Files to copy directly into the app. Should be a list of [source, dest] tuples. Source should be a relative/absolute path to a file/directory to copy into the flatpak, and dest should be the path inside the app install prefix (e.g. /share/applications/).\n\nSee [@malept/flatpak-bundler documentation](https://github.com/malept/flatpak-bundler#build-options).",
+                    "type": "array",
+                    "items": {
+                        "type": "array",
+                        "items": [
+                            {
+                                "type": "string"
+                            },
+                            {
+                                "type": "string"
+                            }
+                        ],
+                        "minItems": 2,
+                        "maxItems": 2
+                    }
+                },
+                "symlinks": {
+                    "description": "Symlinks to create in the app files. Should be a list of [target, location] symlink tuples. Target can be either a relative or absolute path inside the app install prefix, and location should be a absolute path inside the prefix to create the symlink at.\n\nSee [@malept/flatpak-bundler documentation](https://github.com/malept/flatpak-bundler#build-options).",
+                    "type": "array",
+                    "items": {
+                        "type": "array",
+                        "items": [
+                            {
+                                "type": "string"
+                            },
+                            {
+                                "type": "string"
+                            }
+                        ],
+                        "minItems": 2,
+                        "maxItems": 2
+                    }
+                },
+                "useWaylandFlags": {
+                    "description": "Whether to enable the Wayland specific flags (`--enable-features=UseOzonePlatform --ozone-platform=wayland`) in the wrapper script. These flags are only available starting with Electron version 12. Defaults to `false`.",
+                    "type": "boolean"
+                },
+                "synopsis": {
+                    "description": "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "description": {
+                    "description": "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "category": {
+                    "description": "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "mimeTypes": {
+                    "description": "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "desktop": {
+                    "description": "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value)."
+                },
+                "executableArgs": {
+                    "description": "The executable parameters. Pass to executableName",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "LinuxTargetSpecificOptions": {
+            "type": "object",
+            "properties": {
+                "depends": {
+                    "description": "Package dependencies.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "compression": {
+                    "description": "The compression type.",
+                    "default": "xz",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "bzip2",
+                                "gz",
+                                "xz"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "icon": {
+                    "type": "string"
+                },
+                "packageCategory": {
+                    "description": "The package category.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "packageName": {
+                    "description": "The name of the package.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "vendor": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "maintainer": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "afterInstall": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "afterRemove": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "fpm": {
+                    "description": "*Advanced only* The [fpm](https://github.com/jordansissel/fpm/wiki#usage) options.\n\nExample: `[\"--before-install=build/deb-preinstall.sh\", \"--after-upgrade=build/deb-postinstall.sh\"]`",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "synopsis": {
+                    "description": "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "description": {
+                    "description": "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "category": {
+                    "description": "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "mimeTypes": {
+                    "description": "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "desktop": {
+                    "description": "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value)."
+                },
+                "executableArgs": {
+                    "description": "The executable parameters. Pass to executableName",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "ElectronDownloadOptions": {
+            "type": "object",
+            "properties": {
+                "version": {
+                    "type": "string"
+                },
+                "cache": {
+                    "description": "The [cache location](https://github.com/electron-userland/electron-download#cache-location).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "mirror": {
+                    "description": "The mirror.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "customDir": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "customFilename": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "strictSSL": {
+                    "type": "boolean"
+                },
+                "isVerifyChecksum": {
+                    "type": "boolean"
+                },
+                "platform": {
+                    "enum": [
+                        "darwin",
+                        "linux",
+                        "mas",
+                        "win32"
+                    ],
+                    "type": "string"
+                },
+                "arch": {
+                    "type": "string"
+                }
+            }
+        },
+        "ElectronBrandingOptions": {
+            "description": "Electron distributables branding options.",
+            "type": "object",
+            "properties": {
+                "projectName": {
+                    "type": "string"
+                },
+                "productName": {
+                    "type": "string"
+                }
+            }
+        },
+        "PlatformPackager<any>": {
+            "type": "object",
+            "properties": {
+                "packagerOptions": {
+                    "$ref": "#/definitions/PackagerOptions"
+                },
+                "buildResourcesDir": {
+                    "type": "string"
+                },
+                "projectDir": {
+                    "type": "string"
+                },
+                "config": {
+                    "$ref": "#/definitions/Configuration"
+                },
+                "platformSpecificBuildOptions": {},
+                "resourceList": {
+                    "$ref": "#/definitions/Promise<string[]>"
+                },
+                "_resourceList": {
+                    "$ref": "#/definitions/Lazy<string[]>"
+                },
+                "appInfo": {
+                    "$ref": "#/definitions/AppInfo"
+                },
+                "info": {
+                    "$ref": "#/definitions/Packager"
+                },
+                "platform": {
+                    "$ref": "#/definitions/Platform"
+                },
+                "compression": {
+                    "$ref": "#/definitions/CompressionLevel"
+                },
+                "debugLogger": {
+                    "$ref": "#/definitions/DebugLogger"
+                },
+                "defaultTarget": {
+                    "type": "array",
+                    "items": {
+                        "type": "string"
+                    }
+                },
+                "fileAssociations": {
+                    "type": "array",
+                    "items": {
+                        "$ref": "#/definitions/FileAssociation"
+                    }
+                },
+                "forceCodeSigning": {
+                    "type": "boolean"
+                }
+            },
+            "required": [
+                "_resourceList",
+                "appInfo",
+                "buildResourcesDir",
+                "compression",
+                "config",
+                "debugLogger",
+                "defaultTarget",
+                "fileAssociations",
+                "forceCodeSigning",
+                "info",
+                "packagerOptions",
+                "platform",
+                "platformSpecificBuildOptions",
+                "projectDir",
+                "resourceList"
+            ]
+        },
+        "PackagerOptions": {
+            "type": "object",
+            "properties": {
+                "targets": {
+                    "$ref": "#/definitions/Map<Platform,Map<Arch,string[]>>"
+                },
+                "mac": {
+                    "type": "array",
+                    "items": {
+                        "type": "string"
+                    }
+                },
+                "linux": {
+                    "type": "array",
+                    "items": {
+                        "type": "string"
+                    }
+                },
+                "win": {
+                    "type": "array",
+                    "items": {
+                        "type": "string"
+                    }
+                },
+                "projectDir": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "platformPackagerFactory": {
+                    "type": [
+                        "null",
+                        "object"
+                    ]
+                },
+                "config": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/Configuration"
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "effectiveOptionComputed": {
+                    "type": "object"
+                },
+                "prepackaged": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                }
+            }
+        },
+        "Map<Platform,Map<Arch,string[]>>": {
+            "type": "object",
+            "properties": {
+                "size": {
+                    "type": "number"
+                },
+                "__@toStringTag": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "__@toStringTag",
+                "size"
+            ]
+        },
+        "Configuration": {
+            "description": "Configuration Options",
+            "type": "object",
+            "properties": {
+                "appId": {
+                    "description": "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
+                    "default": "com.electron.${name}",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "productName": {
+                    "description": "As [name](#Metadata-name), but allows you to specify a product name for your executable which contains spaces and other special characters not allowed in the [name property](https://docs.npmjs.com/files/package.json#name).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "copyright": {
+                    "description": "The human-readable copyright line for the app.",
+                    "default": "Copyright © year ${author}",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "directories": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/MetadataDirectories"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "mac": {
+                    "description": "Options related to how build macOS targets.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/MacConfiguration"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "mas": {
+                    "description": "MAS (Mac Application Store) options.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/MasConfiguration"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "masDev": {
+                    "description": "MAS (Mac Application Store) development options (`mas-dev` target).",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/MasConfiguration"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "dmg": {
+                    "description": "macOS DMG options.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/DmgOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "pkg": {
+                    "description": "macOS PKG options.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/PkgOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "win": {
+                    "description": "Options related to how build Windows targets.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/WindowsConfiguration"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "nsis": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/NsisOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "nsisWeb": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/NsisWebOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "portable": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/PortableOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "appx": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/AppXOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "msi": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/MsiOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "squirrelWindows": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/SquirrelWindowsOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "linux": {
+                    "description": "Options related to how build Linux targets.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/LinuxConfiguration"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "deb": {
+                    "description": "Debian package options.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/DebOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "snap": {
+                    "description": "Snap options.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/SnapOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "appImage": {
+                    "description": "AppImage options.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/AppImageOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "flatpak": {
+                    "description": "Flatpak options.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FlatpakOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "pacman": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/LinuxTargetSpecificOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "rpm": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/LinuxTargetSpecificOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "freebsd": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/LinuxTargetSpecificOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "p5p": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/LinuxTargetSpecificOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "apk": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/LinuxTargetSpecificOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "includeSubNodeModules": {
+                    "description": "Whether to include *all* of the submodules node_modules directories",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "buildDependenciesFromSource": {
+                    "description": "Whether to build the application native dependencies from source.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "nodeGypRebuild": {
+                    "description": "Whether to execute `node-gyp rebuild` before starting to package the app.\n\nDon't [use](https://github.com/electron-userland/electron-builder/issues/683#issuecomment-241214075) [npm](http://electron.atom.io/docs/tutorial/using-native-node-modules/#using-npm) (neither `.npmrc`) for configuring electron headers. Use `electron-builder node-gyp-rebuild` instead.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "npmArgs": {
+                    "description": "Additional command line arguments to use when installing app native deps.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "npmRebuild": {
+                    "description": "Whether to [rebuild](https://docs.npmjs.com/cli/rebuild) native dependencies before starting to package the app.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "buildVersion": {
+                    "description": "The build version. Maps to the `CFBundleVersion` on macOS, and `FileVersion` metadata property on Windows. Defaults to the `version`.\nIf `TRAVIS_BUILD_NUMBER` or `APPVEYOR_BUILD_NUMBER` or `CIRCLE_BUILD_NUM` or `BUILD_NUMBER` or `bamboo.buildNumber` or `CI_PIPELINE_IID` env defined, it will be used as a build version (`version.build_number`).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "electronCompile": {
+                    "description": "Whether to use [electron-compile](http://github.com/electron/electron-compile) to compile app. Defaults to `true` if `electron-compile` in the dependencies. And `false` if in the `devDependencies` or doesn't specified.",
+                    "type": "boolean"
+                },
+                "electronDist": {
+                    "description": "Returns the path to custom Electron build (e.g. `~/electron/out/R`). Zip files must follow the pattern `electron-v${version}-${platformName}-${arch}.zip`, otherwise it will be assumed to be an unpacked Electron app directory",
+                    "type": [
+                        "string",
+                        "object"
+                    ]
+                },
+                "electronDownload": {
+                    "description": "The [electron-download](https://github.com/electron-userland/electron-download#usage) options.",
+                    "$ref": "#/definitions/ElectronDownloadOptions"
+                },
+                "electronBranding": {
+                    "description": "The branding used by Electron's distributables. This is needed if a fork has modified Electron's BRANDING.json file.",
+                    "$ref": "#/definitions/ElectronBrandingOptions"
+                },
+                "electronVersion": {
+                    "description": "The version of electron you are packaging for. Defaults to version of `electron`, `electron-prebuilt` or `electron-prebuilt-compile` dependency.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "extends": {
+                    "description": "The name of a built-in configuration preset (currently, only `react-cra` is supported) or any number of paths to config files (relative to project dir).\n\nThe latter allows to mixin a config from multiple other configs, as if you `Object.assign` them, but properly combine `files` glob patterns.\n\nIf `react-scripts` in the app dependencies, `react-cra` will be set automatically. Set to `null` to disable automatic detection.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "extraMetadata": {
+                    "description": "Inject properties to `package.json`."
+                },
+                "forceCodeSigning": {
+                    "description": "Whether to fail if the application is not signed (to prevent unsigned app if code signing configuration is not correct).",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "nodeVersion": {
+                    "description": "*libui-based frameworks only* The version of NodeJS you are packaging for.\nYou can set it to `current` to set the Node.js version that you use to run.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "launchUiVersion": {
+                    "description": "*libui-based frameworks only* The version of LaunchUI you are packaging for. Applicable for Windows only. Defaults to version suitable for used framework version.",
+                    "type": [
+                        "null",
+                        "string",
+                        "boolean"
+                    ]
+                },
+                "framework": {
+                    "description": "The framework name. One of `electron`, `proton`, `libui`. Defaults to `electron`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "afterPack": {
+                    "description": "The function (or path to file or module id) to be [run after pack](#afterpack) (but before pack into distributable format and sign).",
+                    "type": [
+                        "null",
+                        "string",
+                        "object"
+                    ]
+                },
+                "afterSign": {
+                    "description": "The function (or path to file or module id) to be [run after pack and sign](#aftersign) (but before pack into distributable format).",
+                    "type": [
+                        "null",
+                        "string",
+                        "object"
+                    ]
+                },
+                "artifactBuildStarted": {
+                    "description": "The function (or path to file or module id) to be run on artifact build start.",
+                    "type": [
+                        "null",
+                        "string",
+                        "object"
+                    ]
+                },
+                "artifactBuildCompleted": {
+                    "description": "The function (or path to file or module id) to be run on artifact build completed.",
+                    "type": [
+                        "null",
+                        "string",
+                        "object"
+                    ]
+                },
+                "afterAllArtifactBuild": {
+                    "description": "The function (or path to file or module id) to be [run after all artifacts are build](#afterAllArtifactBuild).",
+                    "type": [
+                        "null",
+                        "string",
+                        "object"
+                    ]
+                },
+                "msiProjectCreated": {
+                    "description": "MSI project created on disk - not packed into .msi package yet.",
+                    "type": [
+                        "null",
+                        "string",
+                        "object"
+                    ]
+                },
+                "appxManifestCreated": {
+                    "description": "Appx manifest created on disk - not packed into .appx package yet.",
+                    "type": [
+                        "null",
+                        "string",
+                        "object"
+                    ]
+                },
+                "onNodeModuleFile": {
+                    "description": "The function (or path to file or module id) to be [run on each node module](#onnodemodulefile) file.",
+                    "type": [
+                        "null",
+                        "string",
+                        "object"
+                    ]
+                },
+                "beforeBuild": {
+                    "description": "The function (or path to file or module id) to be run before dependencies are installed or rebuilt. Works when `npmRebuild` is set to `true`. Resolving to `false` will skip dependencies install or rebuild.\n\nIf provided and `node_modules` are missing, it will not invoke production dependencies check.",
+                    "type": [
+                        "null",
+                        "string",
+                        "object"
+                    ]
+                },
+                "remoteBuild": {
+                    "description": "Whether to build using Electron Build Service if target not supported on current OS.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "includePdb": {
+                    "description": "Whether to include PDB files.",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "removePackageScripts": {
+                    "description": "Whether to remove `scripts` field from `package.json` files.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "removePackageKeywords": {
+                    "description": "Whether to remove `keywords` field from `package.json` files.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "executableName": {
+                    "description": "The executable name. Defaults to `productName`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "compression": {
+                    "description": "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
+                    "default": "normal",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "maximum",
+                                "normal",
+                                "store"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "files": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "extraResources": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "extraFiles": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "asar": {
+                    "description": "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work.",
+                    "default": true,
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/AsarOptions"
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "boolean"
+                            ]
+                        }
+                    ]
+                },
+                "asarUnpack": {
+                    "description": "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "icon": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "fileAssociations": {
+                    "description": "The file associations.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileAssociation"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/FileAssociation"
+                            }
+                        }
+                    ]
+                },
+                "protocols": {
+                    "description": "The URL protocol schemes.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/Protocol"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/Protocol"
+                            }
+                        }
+                    ]
+                },
+                "electronUpdaterCompatibility": {
+                    "description": "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "detectUpdateChannel": {
+                    "description": "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "generateUpdatesFilesForAllChannels": {
+                    "description": "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "releaseInfo": {
+                    "description": "The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes=\"new features\"\n```",
+                    "$ref": "#/definitions/ReleaseInfo"
+                },
+                "target": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/TargetConfiguration"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/TargetConfiguration"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "cscLink": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "cscKeyPassword": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "defaultArch": {
+                    "type": "string"
+                }
+            }
+        },
+        "Promise<string[]>": {
+            "type": "object",
+            "properties": {
+                "__@toStringTag": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "__@toStringTag"
+            ]
+        },
+        "Lazy<string[]>": {
+            "type": "object",
+            "properties": {
+                "_value": {},
+                "creator": {},
+                "hasValue": {
+                    "type": "boolean"
+                },
+                "value": {
+                    "$ref": "#/definitions/Promise<string[]>"
+                }
+            },
+            "required": [
+                "_value",
+                "creator",
+                "hasValue",
+                "value"
+            ]
+        },
+        "AppInfo": {
+            "type": "object",
+            "properties": {
+                "description": {
+                    "type": "string"
+                },
+                "version": {
+                    "type": "string"
+                },
+                "shortVersion": {
+                    "type": "string"
+                },
+                "shortVersionWindows": {
+                    "type": "string"
+                },
+                "buildNumber": {
+                    "type": "string"
+                },
+                "buildVersion": {
+                    "type": "string"
+                },
+                "productName": {
+                    "type": "string"
+                },
+                "sanitizedProductName": {
+                    "type": "string"
+                },
+                "productFilename": {
+                    "type": "string"
+                },
+                "info": {
+                    "$ref": "#/definitions/Packager"
+                },
+                "platformSpecificOptions": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/PlatformSpecificBuildOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ],
+                    "default": null
+                },
+                "channel": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "notNullDevMetadata": {
+                    "$ref": "#/definitions/Metadata"
+                },
+                "companyName": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "id": {
+                    "type": "string"
+                },
+                "macBundleIdentifier": {
+                    "type": "string"
+                },
+                "name": {
+                    "type": "string"
+                },
+                "linuxPackageName": {
+                    "type": "string"
+                },
+                "sanitizedName": {
+                    "type": "string"
+                },
+                "updaterCacheDirName": {
+                    "type": "string"
+                },
+                "copyright": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "buildVersion",
+                "channel",
+                "companyName",
+                "copyright",
+                "description",
+                "id",
+                "info",
+                "linuxPackageName",
+                "macBundleIdentifier",
+                "name",
+                "notNullDevMetadata",
+                "platformSpecificOptions",
+                "productFilename",
+                "productName",
+                "sanitizedName",
+                "sanitizedProductName",
+                "updaterCacheDirName",
+                "version"
+            ]
+        },
+        "Packager": {
+            "type": "object",
+            "properties": {
+                "projectDir": {
+                    "type": "string"
+                },
+                "_appDir": {
+                    "type": "string"
+                },
+                "appDir": {
+                    "type": "string"
+                },
+                "_metadata": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/Metadata"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ],
+                    "default": null
+                },
+                "metadata": {
+                    "$ref": "#/definitions/Metadata"
+                },
+                "_nodeModulesHandledExternally": {
+                    "type": "boolean",
+                    "default": false
+                },
+                "areNodeModulesHandledExternally": {
+                    "type": "boolean"
+                },
+                "_isPrepackedAppAsar": {
+                    "type": "boolean",
+                    "default": false
+                },
+                "isPrepackedAppAsar": {
+                    "type": "boolean"
+                },
+                "_devMetadata": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/Metadata"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ],
+                    "default": null
+                },
+                "devMetadata": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/Metadata"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "_configuration": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/Configuration"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ],
+                    "default": null
+                },
+                "config": {
+                    "$ref": "#/definitions/Configuration"
+                },
+                "isTwoPackageJsonProjectLayoutUsed": {
+                    "type": "boolean",
+                    "default": false
+                },
+                "eventEmitter": {
+                    "$ref": "#/definitions/EventEmitter"
+                },
+                "_appInfo": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/AppInfo"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ],
+                    "default": null
+                },
+                "appInfo": {
+                    "$ref": "#/definitions/AppInfo"
+                },
+                "tempDirManager": {
+                    "$ref": "#/definitions/TmpDir"
+                },
+                "_repositoryInfo": {
+                    "$ref": "#/definitions/Lazy<SourceRepositoryInfo|null>"
+                },
+                "afterPackHandlers": {
+                    "type": "array",
+                    "items": {
+                        "type": "object"
+                    },
+                    "default": []
+                },
+                "options": {
+                    "$ref": "#/definitions/PackagerOptions"
+                },
+                "debugLogger": {
+                    "$ref": "#/definitions/DebugLogger"
+                },
+                "repositoryInfo": {
+                    "$ref": "#/definitions/Promise<SourceRepositoryInfo|null>"
+                },
+                "nodeDependencyInfo": {
+                    "$ref": "#/definitions/Map<string,Lazy<any[]>>"
+                },
+                "stageDirPathCustomizer": {
+                    "type": "object"
+                },
+                "_buildResourcesDir": {
+                    "type": [
+                        "null",
+                        "string"
+                    ],
+                    "default": null
+                },
+                "buildResourcesDir": {
+                    "type": "string"
+                },
+                "relativeBuildResourcesDirname": {
+                    "type": "string"
+                },
+                "_framework": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/Framework"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ],
+                    "default": null
+                },
+                "framework": {
+                    "$ref": "#/definitions/Framework"
+                },
+                "toDispose": {
+                    "type": "array",
+                    "items": {
+                        "type": "object"
+                    },
+                    "default": []
+                },
+                "cancellationToken": {
+                    "$ref": "#/definitions/CancellationToken"
+                }
+            },
+            "required": [
+                "_appDir",
+                "_appInfo",
+                "_buildResourcesDir",
+                "_configuration",
+                "_devMetadata",
+                "_framework",
+                "_isPrepackedAppAsar",
+                "_metadata",
+                "_nodeModulesHandledExternally",
+                "_repositoryInfo",
+                "afterPackHandlers",
+                "appDir",
+                "appInfo",
+                "areNodeModulesHandledExternally",
+                "buildResourcesDir",
+                "cancellationToken",
+                "config",
+                "debugLogger",
+                "devMetadata",
+                "eventEmitter",
+                "framework",
+                "isPrepackedAppAsar",
+                "isTwoPackageJsonProjectLayoutUsed",
+                "metadata",
+                "nodeDependencyInfo",
+                "options",
+                "projectDir",
+                "relativeBuildResourcesDirname",
+                "repositoryInfo",
+                "stageDirPathCustomizer",
+                "tempDirManager",
+                "toDispose"
+            ]
+        },
+        "Metadata": {
+            "type": "object",
+            "properties": {
+                "name": {
+                    "description": "The application name.",
+                    "type": "string"
+                },
+                "description": {
+                    "description": "The application description.",
+                    "type": "string"
+                },
+                "homepage": {
+                    "description": "The url to the project [homepage](https://docs.npmjs.com/files/package.json#homepage) (NuGet Package `projectUrl` (optional) or Linux Package URL (required)).\n\nIf not specified and your project repository is public on GitHub, it will be `https://github.com/${user}/${project}` by default.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "license": {
+                    "description": "*linux-only.* The [license](https://docs.npmjs.com/files/package.json#license) name.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "author": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/AuthorMetadata"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "repository": {
+                    "description": "The [repository](https://docs.npmjs.com/files/package.json#repository).",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/RepositoryInfo"
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "build": {
+                    "description": "The electron-builder configuration.",
+                    "$ref": "#/definitions/Configuration"
+                },
+                "dependencies": {
+                    "type": "object",
+                    "additionalProperties": {
+                        "type": "string"
+                    }
+                },
+                "version": {
+                    "type": "string"
+                },
+                "shortVersion": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "shortVersionWindows": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "productName": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "main": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                }
+            }
+        },
+        "AuthorMetadata": {
+            "type": "object",
+            "properties": {
+                "name": {
+                    "type": "string"
+                },
+                "email": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "name"
+            ]
+        },
+        "RepositoryInfo": {
+            "type": "object",
+            "properties": {
+                "url": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "url"
+            ]
+        },
+        "EventEmitter": {
+            "description": "The `EventEmitter` class is defined and exposed by the `events` module:\n\n```js\nconst EventEmitter = require('events');\n```\n\nAll `EventEmitter`s emit the event `'newListener'` when new listeners are\nadded and `'removeListener'` when existing listeners are removed.\n\nIt supports the following option:",
+            "type": "object"
+        },
+        "TmpDir": {
+            "type": "object",
+            "properties": {
+                "debugName": {},
+                "tempFiles": {},
+                "registered": {},
+                "rootTempDir": {
+                    "$ref": "#/definitions/Promise<string>"
+                }
+            },
+            "required": [
+                "debugName",
+                "registered",
+                "rootTempDir",
+                "tempFiles"
+            ]
+        },
+        "Promise<string>": {
+            "type": "object",
+            "properties": {
+                "__@toStringTag": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "__@toStringTag"
+            ]
+        },
+        "Lazy<SourceRepositoryInfo|null>": {
+            "type": "object",
+            "properties": {
+                "_value": {},
+                "creator": {},
+                "hasValue": {
+                    "type": "boolean"
+                },
+                "value": {
+                    "$ref": "#/definitions/Promise<SourceRepositoryInfo|null>"
+                }
+            },
+            "required": [
+                "_value",
+                "creator",
+                "hasValue",
+                "value"
+            ]
+        },
+        "Promise<SourceRepositoryInfo|null>": {
+            "type": "object",
+            "properties": {
+                "__@toStringTag": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "__@toStringTag"
+            ]
+        },
+        "DebugLogger": {
+            "type": "object",
+            "properties": {
+                "isEnabled": {
+                    "type": "boolean"
+                },
+                "data": {}
+            },
+            "required": [
+                "data",
+                "isEnabled"
+            ]
+        },
+        "Map<string,Lazy<any[]>>": {
+            "type": "object",
+            "properties": {
+                "size": {
+                    "type": "number"
+                },
+                "__@toStringTag": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "__@toStringTag",
+                "size"
+            ]
+        },
+        "Framework": {
+            "type": "object",
+            "properties": {
+                "name": {
+                    "type": "string"
+                },
+                "version": {
+                    "type": "string"
+                },
+                "distMacOsAppName": {
+                    "type": "string"
+                },
+                "macOsDefaultTargets": {
+                    "type": "array",
+                    "items": {
+                        "type": "string"
+                    }
+                },
+                "defaultAppIdPrefix": {
+                    "type": "string"
+                },
+                "isNpmRebuildRequired": {
+                    "type": "boolean"
+                },
+                "isCopyElevateHelper": {
+                    "type": "boolean"
+                }
+            },
+            "required": [
+                "defaultAppIdPrefix",
+                "distMacOsAppName",
+                "isCopyElevateHelper",
+                "isNpmRebuildRequired",
+                "macOsDefaultTargets",
+                "name",
+                "version"
+            ]
+        },
+        "CancellationToken": {
+            "type": "object",
+            "properties": {
+                "parentCancelHandler": {},
+                "_cancelled": {},
+                "cancelled": {
+                    "type": "boolean"
+                },
+                "_parent": {},
+                "parent": {
+                    "$ref": "#/definitions/CancellationToken"
+                },
+                "onCancel": {},
+                "removeParentCancelHandler": {}
+            },
+            "required": [
+                "_cancelled",
+                "_parent",
+                "cancelled",
+                "onCancel",
+                "parent",
+                "parentCancelHandler",
+                "removeParentCancelHandler"
+            ]
+        },
+        "PlatformSpecificBuildOptions": {
+            "type": "object",
+            "properties": {
+                "appId": {
+                    "description": "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
+                    "default": "com.electron.${name}",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "executableName": {
+                    "description": "The executable name. Defaults to `productName`.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "compression": {
+                    "description": "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
+                    "default": "normal",
+                    "anyOf": [
+                        {
+                            "enum": [
+                                "maximum",
+                                "normal",
+                                "store"
+                            ],
+                            "type": "string"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "files": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "extraResources": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "extraFiles": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileSet"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/FileSet"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "asar": {
+                    "description": "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work.",
+                    "default": true,
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/AsarOptions"
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "boolean"
+                            ]
+                        }
+                    ]
+                },
+                "asarUnpack": {
+                    "description": "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.",
+                    "anyOf": [
+                        {
+                            "type": "array",
+                            "items": {
+                                "type": "string"
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "icon": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "fileAssociations": {
+                    "description": "The file associations.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/FileAssociation"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/FileAssociation"
+                            }
+                        }
+                    ]
+                },
+                "protocols": {
+                    "description": "The URL protocol schemes.",
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/Protocol"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/Protocol"
+                            }
+                        }
+                    ]
+                },
+                "forceCodeSigning": {
+                    "description": "Whether to fail if app will be not code signed.",
+                    "type": "boolean"
+                },
+                "electronUpdaterCompatibility": {
+                    "description": "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "detectUpdateChannel": {
+                    "description": "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
+                    "default": true,
+                    "type": "boolean"
+                },
+                "generateUpdatesFilesForAllChannels": {
+                    "description": "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
+                    "default": false,
+                    "type": "boolean"
+                },
+                "releaseInfo": {
+                    "description": "The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes=\"new features\"\n```",
+                    "$ref": "#/definitions/ReleaseInfo"
+                },
+                "target": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/TargetConfiguration"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/TargetConfiguration"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                },
+                "cscLink": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "cscKeyPassword": {
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "defaultArch": {
+                    "type": "string"
+                }
+            }
+        },
+        "Platform": {
+            "type": "object",
+            "properties": {
+                "name": {
+                    "type": "string"
+                },
+                "buildConfigurationKey": {
+                    "type": "string"
+                },
+                "nodeName": {
+                    "$ref": "#/definitions/global.NodeJS.Platform"
+                }
+            },
+            "required": [
+                "buildConfigurationKey",
+                "name",
+                "nodeName"
+            ]
+        },
+        "global.NodeJS.Platform": {
+            "enum": [
+                "aix",
+                "android",
+                "cygwin",
+                "darwin",
+                "freebsd",
+                "haiku",
+                "linux",
+                "netbsd",
+                "openbsd",
+                "sunos",
+                "win32"
+            ],
+            "type": "string"
+        },
+        "CompressionLevel": {
+            "enum": [
+                "maximum",
+                "normal",
+                "store"
+            ],
+            "type": "string"
+        },
+        "Arch": {
+            "enum": [
+                0,
+                1,
+                2,
+                3,
+                4
+            ],
+            "type": "number"
+        },
+        "Target": {
+            "oneOf": [
+                {
+                    "$ref": "#/definitions/FakeTarget"
+                },
+                {
+                    "$ref": "#/definitions/default"
+                },
+                {
+                    "$ref": "#/definitions/NsisTarget"
+                },
+                {
+                    "$ref": "#/definitions/ArchiveTarget"
+                },
+                {
+                    "$ref": "#/definitions/NoOpTarget"
+                },
+                {
+                    "$ref": "#/definitions/default_1"
+                },
+                {
+                    "$ref": "#/definitions/default_2"
+                },
+                {
+                    "$ref": "#/definitions/default_3"
+                },
+                {
+                    "$ref": "#/definitions/default_4"
+                },
+                {
+                    "$ref": "#/definitions/RemoteTarget"
+                },
+                {
+                    "$ref": "#/definitions/PkgTarget"
+                }
+            ]
+        },
+        "FakeTarget": {
+            "type": "object",
+            "properties": {
+                "outDir": {
+                    "type": "string"
+                },
+                "options": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/TargetSpecificOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "name": {
+                    "type": "string"
+                },
+                "isAsyncSupported": {
+                    "type": "boolean",
+                    "default": true
+                }
+            },
+            "required": [
+                "isAsyncSupported",
+                "name",
+                "outDir"
+            ]
+        },
+        "TargetSpecificOptions": {
+            "type": "object",
+            "properties": {
+                "artifactName": {
+                    "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
+                    "type": [
+                        "null",
+                        "string"
+                    ]
+                },
+                "publish": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/GithubOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/S3Options"
+                        },
+                        {
+                            "$ref": "#/definitions/SpacesOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/GenericServerOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/BintrayOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/CustomPublishOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/KeygenOptions"
+                        },
+                        {
+                            "$ref": "#/definitions/SnapStoreOptions"
+                        },
+                        {
+                            "type": "array",
+                            "items": {
+                                "anyOf": [
+                                    {
+                                        "$ref": "#/definitions/GithubOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/S3Options"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SpacesOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/GenericServerOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/BintrayOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/CustomPublishOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/KeygenOptions"
+                                    },
+                                    {
+                                        "$ref": "#/definitions/SnapStoreOptions"
+                                    },
+                                    {
+                                        "type": "string"
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            "type": [
+                                "null",
+                                "string"
+                            ]
+                        }
+                    ]
+                }
+            }
+        },
+        "default": {
+            "type": "object",
+            "properties": {
+                "options": {
+                    "$ref": "#/definitions/AppXOptions"
+                },
+                "packager": {
+                    "$ref": "#/definitions/WinPackager"
+                },
+                "outDir": {
+                    "type": "string"
+                },
+                "name": {
+                    "type": "string"
+                },
+                "isAsyncSupported": {
+                    "type": "boolean",
+                    "default": true
+                }
+            },
+            "required": [
+                "isAsyncSupported",
+                "name",
+                "options",
+                "outDir",
+                "packager"
+            ]
+        },
+        "WinPackager": {
+            "type": "object",
+            "properties": {
+                "cscInfo": {
+                    "$ref": "#/definitions/Lazy<FileCodeSigningInfo|CertificateFromStoreInfo|null>"
+                },
+                "_iconPath": {
+                    "$ref": "#/definitions/Lazy<string|null>"
+                },
+                "vm": {
+                    "$ref": "#/definitions/Lazy<VmManager>"
+                },
+                "computedPublisherName": {
+                    "$ref": "#/definitions/Lazy<string[]|null>"
+                },
+                "lazyCertInfo": {
+                    "$ref": "#/definitions/Lazy<CertificateInfo|null>"
+                },
+                "isForceCodeSigningVerification": {
+                    "type": "boolean"
+                },
+                "defaultTarget": {
+                    "type": "array",
+                    "items": {
+                        "type": "string"
+                    }
+                },
+                "packagerOptions": {
+                    "$ref": "#/definitions/PackagerOptions"
+                },
+                "buildResourcesDir": {
+                    "type": "string"
+                },
+                "projectDir": {
+                    "type": "string"
+                },
+                "config": {
+                    "$ref": "#/definitions/Configuration"
+                },
+                "platformSpecificBuildOptions": {
+                    "$ref": "#/definitions/WindowsConfiguration"
+                },
+                "resourceList": {
+                    "$ref": "#/definitions/Promise<string[]>"
+                },
+                "_resourceList": {
+                    "$ref": "#/definitions/Lazy<string[]>"
+                },
+                "appInfo": {
+                    "$ref": "#/definitions/AppInfo"
+                },
+                "info": {
+                    "$ref": "#/definitions/Packager"
+                },
+                "platform": {
+                    "$ref": "#/definitions/Platform"
+                },
+                "compression": {
+                    "$ref": "#/definitions/CompressionLevel"
+                },
+                "debugLogger": {
+                    "$ref": "#/definitions/DebugLogger"
+                },
+                "fileAssociations": {
+                    "type": "array",
+                    "items": {
+                        "$ref": "#/definitions/FileAssociation"
+                    }
+                },
+                "forceCodeSigning": {
+                    "type": "boolean"
+                }
+            },
+            "required": [
+                "_iconPath",
+                "_resourceList",
+                "appInfo",
+                "buildResourcesDir",
+                "compression",
+                "computedPublisherName",
+                "config",
+                "cscInfo",
+                "debugLogger",
+                "defaultTarget",
+                "fileAssociations",
+                "forceCodeSigning",
+                "info",
+                "isForceCodeSigningVerification",
+                "lazyCertInfo",
+                "packagerOptions",
+                "platform",
+                "platformSpecificBuildOptions",
+                "projectDir",
+                "resourceList",
+                "vm"
+            ]
+        },
+        "Lazy<FileCodeSigningInfo|CertificateFromStoreInfo|null>": {
+            "type": "object",
+            "properties": {
+                "_value": {},
+                "creator": {},
+                "hasValue": {
+                    "type": "boolean"
+                },
+                "value": {
+                    "$ref": "#/definitions/Promise<FileCodeSigningInfo|CertificateFromStoreInfo|null>"
+                }
+            },
+            "required": [
+                "_value",
+                "creator",
+                "hasValue",
+                "value"
+            ]
+        },
+        "Promise<FileCodeSigningInfo|CertificateFromStoreInfo|null>": {
+            "type": "object",
+            "properties": {
+                "__@toStringTag": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "__@toStringTag"
+            ]
+        },
+        "Lazy<string|null>": {
+            "type": "object",
+            "properties": {
+                "_value": {},
+                "creator": {},
+                "hasValue": {
+                    "type": "boolean"
+                },
+                "value": {
+                    "$ref": "#/definitions/Promise<string|null>"
+                }
+            },
+            "required": [
+                "_value",
+                "creator",
+                "hasValue",
+                "value"
+            ]
+        },
+        "Promise<string|null>": {
+            "type": "object",
+            "properties": {
+                "__@toStringTag": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "__@toStringTag"
+            ]
+        },
+        "Lazy<VmManager>": {
+            "type": "object",
+            "properties": {
+                "_value": {},
+                "creator": {},
+                "hasValue": {
+                    "type": "boolean"
+                },
+                "value": {
+                    "$ref": "#/definitions/Promise<VmManager>"
+                }
+            },
+            "required": [
+                "_value",
+                "creator",
+                "hasValue",
+                "value"
+            ]
+        },
+        "Promise<VmManager>": {
+            "type": "object",
+            "properties": {
+                "__@toStringTag": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "__@toStringTag"
+            ]
+        },
+        "Lazy<string[]|null>": {
+            "type": "object",
+            "properties": {
+                "_value": {},
+                "creator": {},
+                "hasValue": {
+                    "type": "boolean"
+                },
+                "value": {
+                    "$ref": "#/definitions/Promise<string[]|null>"
+                }
+            },
+            "required": [
+                "_value",
+                "creator",
+                "hasValue",
+                "value"
+            ]
+        },
+        "Promise<string[]|null>": {
+            "type": "object",
+            "properties": {
+                "__@toStringTag": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "__@toStringTag"
+            ]
+        },
+        "Lazy<CertificateInfo|null>": {
+            "type": "object",
+            "properties": {
+                "_value": {},
+                "creator": {},
+                "hasValue": {
+                    "type": "boolean"
+                },
+                "value": {
+                    "$ref": "#/definitions/Promise<CertificateInfo|null>"
+                }
+            },
+            "required": [
+                "_value",
+                "creator",
+                "hasValue",
+                "value"
+            ]
+        },
+        "Promise<CertificateInfo|null>": {
+            "type": "object",
+            "properties": {
+                "__@toStringTag": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "__@toStringTag"
+            ]
+        },
+        "NsisTarget": {
+            "type": "object",
+            "properties": {
+                "options": {
+                    "$ref": "#/definitions/NsisOptions"
+                },
+                "archs": {
+                    "$ref": "#/definitions/Map<Arch,string>"
+                },
+                "packager": {
+                    "$ref": "#/definitions/WinPackager"
+                },
+                "outDir": {
+                    "type": "string"
+                },
+                "packageHelper": {
+                    "$ref": "#/definitions/AppPackageHelper"
+                },
+                "isBuildDifferentialAware": {
+                    "type": "boolean"
+                },
+                "installerFilenamePattern": {
+                    "type": "string"
+                },
+                "isPortable": {
+                    "type": "boolean"
+                },
+                "isUnicodeEnabled": {
+                    "type": "boolean"
+                },
+                "isWebInstaller": {
+                    "type": "boolean"
+                },
+                "name": {
+                    "type": "string"
+                },
+                "isAsyncSupported": {
+                    "type": "boolean",
+                    "default": true
+                }
+            },
+            "required": [
+                "archs",
+                "installerFilenamePattern",
+                "isAsyncSupported",
+                "isBuildDifferentialAware",
+                "isPortable",
+                "isUnicodeEnabled",
+                "isWebInstaller",
+                "name",
+                "options",
+                "outDir",
+                "packageHelper",
+                "packager"
+            ]
+        },
+        "Map<Arch,string>": {
+            "type": "object",
+            "properties": {
+                "size": {
+                    "type": "number"
+                },
+                "__@toStringTag": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "__@toStringTag",
+                "size"
+            ]
+        },
+        "AppPackageHelper": {
+            "type": "object",
+            "properties": {
+                "archToFileInfo": {
+                    "$ref": "#/definitions/Map<Arch,Promise<PackageFileInfo>>"
+                },
+                "infoToIsDelete": {
+                    "$ref": "#/definitions/Map<PackageFileInfo,boolean>"
+                },
+                "refCount": {
+                    "type": "number",
+                    "default": 0
+                },
+                "elevateHelper": {
+                    "$ref": "#/definitions/CopyElevateHelper"
+                }
+            },
+            "required": [
+                "archToFileInfo",
+                "elevateHelper",
+                "infoToIsDelete",
+                "refCount"
+            ]
+        },
+        "Map<Arch,Promise<PackageFileInfo>>": {
+            "type": "object",
+            "properties": {
+                "size": {
+                    "type": "number"
+                },
+                "__@toStringTag": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "__@toStringTag",
+                "size"
+            ]
+        },
+        "Map<PackageFileInfo,boolean>": {
+            "type": "object",
+            "properties": {
+                "size": {
+                    "type": "number"
+                },
+                "__@toStringTag": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "__@toStringTag",
+                "size"
+            ]
+        },
+        "CopyElevateHelper": {
+            "type": "object",
+            "properties": {
+                "copied": {
+                    "$ref": "#/definitions/Map<string,Promise<any>>"
+                }
+            },
+            "required": [
+                "copied"
+            ]
+        },
+        "Map<string,Promise<any>>": {
+            "type": "object",
+            "properties": {
+                "size": {
+                    "type": "number"
+                },
+                "__@toStringTag": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "__@toStringTag",
+                "size"
+            ]
+        },
+        "ArchiveTarget": {
+            "type": "object",
+            "properties": {
+                "options": {
+                    "$ref": "#/definitions/TargetSpecificOptions"
+                },
+                "outDir": {
+                    "type": "string"
+                },
+                "packager": {
+                    "$ref": "#/definitions/PlatformPackager<any>"
+                },
+                "isWriteUpdateInfo": {
+                    "type": "boolean",
+                    "default": false
+                },
+                "name": {
+                    "type": "string"
+                },
+                "isAsyncSupported": {
+                    "type": "boolean",
+                    "default": true
+                }
+            },
+            "required": [
+                "isAsyncSupported",
+                "isWriteUpdateInfo",
+                "name",
+                "options",
+                "outDir",
+                "packager"
+            ]
+        },
+        "NoOpTarget": {
+            "type": "object",
+            "properties": {
+                "options": {
+                    "type": "null",
+                    "default": null
+                },
+                "outDir": {
+                    "type": "string"
+                },
+                "name": {
+                    "type": "string"
+                },
+                "isAsyncSupported": {
+                    "type": "boolean",
+                    "default": true
+                }
+            },
+            "required": [
+                "isAsyncSupported",
+                "name",
+                "options",
+                "outDir"
+            ]
+        },
+        "default_1": {
+            "type": "object",
+            "properties": {
+                "options": {
+                    "$ref": "#/definitions/AppImageOptions"
+                },
+                "desktopEntry": {
+                    "$ref": "#/definitions/Lazy<string>"
+                },
+                "packager": {
+                    "$ref": "#/definitions/LinuxPackager"
+                },
+                "helper": {
+                    "$ref": "#/definitions/LinuxTargetHelper"
+                },
+                "outDir": {
+                    "type": "string"
+                },
+                "name": {
+                    "type": "string"
+                },
+                "isAsyncSupported": {
+                    "type": "boolean",
+                    "default": true
+                }
+            },
+            "required": [
+                "desktopEntry",
+                "helper",
+                "isAsyncSupported",
+                "name",
+                "options",
+                "outDir",
+                "packager"
+            ]
+        },
+        "Lazy<string>": {
+            "type": "object",
+            "properties": {
+                "_value": {},
+                "creator": {},
+                "hasValue": {
+                    "type": "boolean"
+                },
+                "value": {
+                    "$ref": "#/definitions/Promise<string>"
+                }
+            },
+            "required": [
+                "_value",
+                "creator",
+                "hasValue",
+                "value"
+            ]
+        },
+        "LinuxPackager": {
+            "type": "object",
+            "properties": {
+                "executableName": {
+                    "type": "string"
+                },
+                "defaultTarget": {
+                    "type": "array",
+                    "items": {
+                        "type": "string"
+                    }
+                },
+                "packagerOptions": {
+                    "$ref": "#/definitions/PackagerOptions"
+                },
+                "buildResourcesDir": {
+                    "type": "string"
+                },
+                "projectDir": {
+                    "type": "string"
+                },
+                "config": {
+                    "$ref": "#/definitions/Configuration"
+                },
+                "platformSpecificBuildOptions": {
+                    "$ref": "#/definitions/LinuxConfiguration"
+                },
+                "resourceList": {
+                    "$ref": "#/definitions/Promise<string[]>"
+                },
+                "_resourceList": {
+                    "$ref": "#/definitions/Lazy<string[]>"
+                },
+                "appInfo": {
+                    "$ref": "#/definitions/AppInfo"
+                },
+                "info": {
+                    "$ref": "#/definitions/Packager"
+                },
+                "platform": {
+                    "$ref": "#/definitions/Platform"
+                },
+                "compression": {
+                    "$ref": "#/definitions/CompressionLevel"
+                },
+                "debugLogger": {
+                    "$ref": "#/definitions/DebugLogger"
+                },
+                "fileAssociations": {
+                    "type": "array",
+                    "items": {
+                        "$ref": "#/definitions/FileAssociation"
+                    }
+                },
+                "forceCodeSigning": {
+                    "type": "boolean"
+                }
+            },
+            "required": [
+                "_resourceList",
+                "appInfo",
+                "buildResourcesDir",
+                "compression",
+                "config",
+                "debugLogger",
+                "defaultTarget",
+                "executableName",
+                "fileAssociations",
+                "forceCodeSigning",
+                "info",
+                "packagerOptions",
+                "platform",
+                "platformSpecificBuildOptions",
+                "projectDir",
+                "resourceList"
+            ]
+        },
+        "LinuxTargetHelper": {
+            "type": "object",
+            "properties": {
+                "iconPromise": {
+                    "$ref": "#/definitions/Lazy<IconInfo[]>"
+                },
+                "mimeTypeFilesPromise": {
+                    "$ref": "#/definitions/Lazy<string|null>"
+                },
+                "maxIconPath": {
+                    "type": [
+                        "null",
+                        "string"
+                    ],
+                    "default": null
+                },
+                "packager": {
+                    "$ref": "#/definitions/LinuxPackager"
+                },
+                "icons": {
+                    "$ref": "#/definitions/Promise<IconInfo[]>"
+                },
+                "mimeTypeFiles": {
+                    "$ref": "#/definitions/Promise<string|null>"
+                }
+            },
+            "required": [
+                "iconPromise",
+                "icons",
+                "maxIconPath",
+                "mimeTypeFiles",
+                "mimeTypeFilesPromise",
+                "packager"
+            ]
+        },
+        "Lazy<IconInfo[]>": {
+            "type": "object",
+            "properties": {
+                "_value": {},
+                "creator": {},
+                "hasValue": {
+                    "type": "boolean"
+                },
+                "value": {
+                    "$ref": "#/definitions/Promise<IconInfo[]>"
+                }
+            },
+            "required": [
+                "_value",
+                "creator",
+                "hasValue",
+                "value"
+            ]
+        },
+        "Promise<IconInfo[]>": {
+            "type": "object",
+            "properties": {
+                "__@toStringTag": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "__@toStringTag"
+            ]
+        },
+        "default_2": {
+            "type": "object",
+            "properties": {
+                "options": {
+                    "$ref": "#/definitions/FlatpakOptions"
+                },
+                "packager": {
+                    "$ref": "#/definitions/LinuxPackager"
+                },
+                "helper": {
+                    "$ref": "#/definitions/LinuxTargetHelper"
+                },
+                "outDir": {
+                    "type": "string"
+                },
+                "appId": {
+                    "type": "string"
+                },
+                "name": {
+                    "type": "string"
+                },
+                "isAsyncSupported": {
+                    "type": "boolean",
+                    "default": true
+                }
+            },
+            "required": [
+                "appId",
+                "helper",
+                "isAsyncSupported",
+                "name",
+                "options",
+                "outDir",
+                "packager"
+            ]
+        },
+        "default_3": {
+            "type": "object",
+            "properties": {
+                "options": {
+                    "$ref": "#/definitions/LinuxTargetSpecificOptions"
+                },
+                "scriptFiles": {
+                    "$ref": "#/definitions/Promise<string[]>"
+                },
+                "packager": {
+                    "$ref": "#/definitions/LinuxPackager"
+                },
+                "helper": {
+                    "$ref": "#/definitions/LinuxTargetHelper"
+                },
+                "outDir": {
+                    "type": "string"
+                },
+                "name": {
+                    "type": "string"
+                },
+                "isAsyncSupported": {
+                    "type": "boolean",
+                    "default": true
+                }
+            },
+            "required": [
+                "helper",
+                "isAsyncSupported",
+                "name",
+                "options",
+                "outDir",
+                "packager",
+                "scriptFiles"
+            ]
+        },
+        "default_4": {
+            "type": "object",
+            "properties": {
+                "options": {
+                    "$ref": "#/definitions/SnapOptions"
+                },
+                "isUseTemplateApp": {
+                    "type": "boolean",
+                    "default": false
+                },
+                "packager": {
+                    "$ref": "#/definitions/LinuxPackager"
+                },
+                "helper": {
+                    "$ref": "#/definitions/LinuxTargetHelper"
+                },
+                "outDir": {
+                    "type": "string"
+                },
+                "name": {
+                    "type": "string"
+                },
+                "isAsyncSupported": {
+                    "type": "boolean",
+                    "default": true
+                }
+            },
+            "required": [
+                "helper",
+                "isAsyncSupported",
+                "isUseTemplateApp",
+                "name",
+                "options",
+                "outDir",
+                "packager"
+            ]
+        },
+        "RemoteTarget": {
+            "type": "object",
+            "properties": {
+                "buildTaskManager": {
+                    "$ref": "#/definitions/AsyncTaskManager"
+                },
+                "options": {
+                    "anyOf": [
+                        {
+                            "$ref": "#/definitions/TargetSpecificOptions"
+                        },
+                        {
+                            "type": "null"
+                        }
+                    ]
+                },
+                "outDir": {
+                    "type": "string"
+                },
+                "target": {
+                    "$ref": "#/definitions/Target"
+                },
+                "remoteBuilder": {
+                    "$ref": "#/definitions/RemoteBuilder"
+                },
+                "name": {
+                    "type": "string"
+                },
+                "isAsyncSupported": {
+                    "type": "boolean",
+                    "default": true
+                }
+            },
+            "required": [
+                "buildTaskManager",
+                "isAsyncSupported",
+                "name",
+                "outDir",
+                "remoteBuilder",
+                "target"
+            ]
+        },
+        "AsyncTaskManager": {
+            "type": "object",
+            "properties": {
+                "cancellationToken": {},
+                "tasks": {
+                    "type": "array",
+                    "items": {
+                        "$ref": "#/definitions/Promise<any>"
+                    }
+                },
+                "errors": {}
+            },
+            "required": [
+                "cancellationToken",
+                "errors",
+                "tasks"
+            ]
+        },
+        "Promise<any>": {
+            "type": "object",
+            "properties": {
+                "__@toStringTag": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "__@toStringTag"
+            ]
+        },
+        "RemoteBuilder": {
+            "type": "object",
+            "properties": {
+                "toBuild": {
+                    "$ref": "#/definitions/Map<Arch,TargetInfo[]>"
+                },
+                "buildStarted": {
+                    "type": "boolean",
+                    "default": false
+                },
+                "packager": {
+                    "$ref": "#/definitions/PlatformPackager<any>"
+                }
+            },
+            "required": [
+                "buildStarted",
+                "packager",
+                "toBuild"
+            ]
+        },
+        "Map<Arch,TargetInfo[]>": {
+            "type": "object",
+            "properties": {
+                "size": {
+                    "type": "number"
+                },
+                "__@toStringTag": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "__@toStringTag",
+                "size"
+            ]
+        },
+        "PkgTarget": {
+            "type": "object",
+            "properties": {
+                "options": {
+                    "$ref": "#/definitions/PkgOptions"
+                },
+                "packager": {
+                    "$ref": "#/definitions/default_5"
+                },
+                "outDir": {
+                    "type": "string"
+                },
+                "name": {
+                    "type": "string"
+                },
+                "isAsyncSupported": {
+                    "type": "boolean",
+                    "default": true
+                }
+            },
+            "required": [
+                "isAsyncSupported",
+                "name",
+                "options",
+                "outDir",
+                "packager"
+            ]
+        },
+        "default_5": {
+            "type": "object",
+            "properties": {
+                "codeSigningInfo": {
+                    "$ref": "#/definitions/Lazy<CodeSigningInfo>"
+                },
+                "_iconPath": {
+                    "$ref": "#/definitions/Lazy<string|null>"
+                },
+                "defaultTarget": {
+                    "type": "array",
+                    "items": {
+                        "type": "string"
+                    }
+                },
+                "packagerOptions": {
+                    "$ref": "#/definitions/PackagerOptions"
+                },
+                "buildResourcesDir": {
+                    "type": "string"
+                },
+                "projectDir": {
+                    "type": "string"
+                },
+                "config": {
+                    "$ref": "#/definitions/Configuration"
+                },
+                "platformSpecificBuildOptions": {
+                    "$ref": "#/definitions/MacConfiguration"
+                },
+                "resourceList": {
+                    "$ref": "#/definitions/Promise<string[]>"
+                },
+                "_resourceList": {
+                    "$ref": "#/definitions/Lazy<string[]>"
+                },
+                "appInfo": {
+                    "$ref": "#/definitions/AppInfo"
+                },
+                "info": {
+                    "$ref": "#/definitions/Packager"
+                },
+                "platform": {
+                    "$ref": "#/definitions/Platform"
+                },
+                "compression": {
+                    "$ref": "#/definitions/CompressionLevel"
+                },
+                "debugLogger": {
+                    "$ref": "#/definitions/DebugLogger"
+                },
+                "fileAssociations": {
+                    "type": "array",
+                    "items": {
+                        "$ref": "#/definitions/FileAssociation"
+                    }
+                },
+                "forceCodeSigning": {
+                    "type": "boolean"
+                }
+            },
+            "required": [
+                "_iconPath",
+                "_resourceList",
+                "appInfo",
+                "buildResourcesDir",
+                "codeSigningInfo",
+                "compression",
+                "config",
+                "debugLogger",
+                "defaultTarget",
+                "fileAssociations",
+                "forceCodeSigning",
+                "info",
+                "packagerOptions",
+                "platform",
+                "platformSpecificBuildOptions",
+                "projectDir",
+                "resourceList"
+            ]
+        },
+        "Lazy<CodeSigningInfo>": {
+            "type": "object",
+            "properties": {
+                "_value": {},
+                "creator": {},
+                "hasValue": {
+                    "type": "boolean"
+                },
+                "value": {
+                    "$ref": "#/definitions/Promise<CodeSigningInfo>"
+                }
+            },
+            "required": [
+                "_value",
+                "creator",
+                "hasValue",
+                "value"
+            ]
+        },
+        "Promise<CodeSigningInfo>": {
+            "type": "object",
+            "properties": {
+                "__@toStringTag": {
+                    "type": "string"
+                }
+            },
+            "required": [
+                "__@toStringTag"
+            ]
+        }
+    },
+    "$schema": "http://json-schema.org/draft-07/schema#"
+}
diff --git a/node_modules/app-builder-lib/scheme.json b/node_modules/app-builder-lib/scheme.json
index bd2bcd5..92f5a6a 100644
--- a/node_modules/app-builder-lib/scheme.json
+++ b/node_modules/app-builder-lib/scheme.json
@@ -84,6 +84,9 @@
             {
               "$ref": "#/definitions/CustomPublishOptions"
             },
+            {
+              "$ref": "#/definitions/KeygenOptions"
+            },
             {
               "$ref": "#/definitions/SnapStoreOptions"
             },
@@ -108,6 +111,9 @@
                   {
                     "$ref": "#/definitions/CustomPublishOptions"
                   },
+                  {
+                    "$ref": "#/definitions/KeygenOptions"
+                  },
                   {
                     "$ref": "#/definitions/SnapStoreOptions"
                   },
@@ -234,6 +240,9 @@
             {
               "$ref": "#/definitions/CustomPublishOptions"
             },
+            {
+              "$ref": "#/definitions/KeygenOptions"
+            },
             {
               "$ref": "#/definitions/SnapStoreOptions"
             },
@@ -258,6 +267,9 @@
                   {
                     "$ref": "#/definitions/CustomPublishOptions"
                   },
+                  {
+                    "$ref": "#/definitions/KeygenOptions"
+                  },
                   {
                     "$ref": "#/definitions/SnapStoreOptions"
                   },
@@ -420,12 +432,45 @@
       ],
       "type": "object"
     },
+    "CustomNsisBinary": {
+      "additionalProperties": false,
+      "properties": {
+        "checksum": {
+          "default": "o+YZsXHp8LNihhuk7JsCDhdIgx0MKKK+1b3sGD+4zX5djZULe4/4QMcAsfQ+0r+a8FnwBt7BVBHkIkJHjKQ0sg==",
+          "type": [
+            "null",
+            "string"
+          ]
+        },
+        "url": {
+          "default": "https://github.com/electron-userland/electron-builder-binaries/releases/download",
+          "type": [
+            "null",
+            "string"
+          ]
+        },
+        "version": {
+          "default": "3.0.4.2",
+          "type": [
+            "null",
+            "string"
+          ]
+        }
+      },
+      "required": [
+        "url"
+      ],
+      "type": "object"
+    },
     "CustomPublishOptions": {
       "additionalProperties": {},
       "properties": {
         "provider": {
-          "$ref": "#/definitions/PublishProvider",
-          "description": "The provider."
+          "description": "The provider. Must be `custom`.",
+          "enum": [
+            "custom"
+          ],
+          "type": "string"
         },
         "publishAutoUpdate": {
           "default": true,
@@ -449,6 +494,10 @@
           "$ref": "#/definitions/OutgoingHttpHeaders",
           "description": "Any custom request headers"
         },
+        "updateProvider": {
+          "description": "The Provider to provide UpdateInfo regarding available updates.  Required\nto use custom providers with electron-updater.",
+          "typeof": "function"
+        },
         "updaterCacheDirName": {
           "type": [
             "null",
@@ -623,6 +672,9 @@
             {
               "$ref": "#/definitions/CustomPublishOptions"
             },
+            {
+              "$ref": "#/definitions/KeygenOptions"
+            },
             {
               "$ref": "#/definitions/SnapStoreOptions"
             },
@@ -647,6 +699,9 @@
                   {
                     "$ref": "#/definitions/CustomPublishOptions"
                   },
+                  {
+                    "$ref": "#/definitions/KeygenOptions"
+                  },
                   {
                     "$ref": "#/definitions/SnapStoreOptions"
                   },
@@ -807,6 +862,9 @@
             {
               "$ref": "#/definitions/CustomPublishOptions"
             },
+            {
+              "$ref": "#/definitions/KeygenOptions"
+            },
             {
               "$ref": "#/definitions/SnapStoreOptions"
             },
@@ -831,6 +889,9 @@
                   {
                     "$ref": "#/definitions/CustomPublishOptions"
                   },
+                  {
+                    "$ref": "#/definitions/KeygenOptions"
+                  },
                   {
                     "$ref": "#/definitions/SnapStoreOptions"
                   },
@@ -899,11 +960,12 @@
     },
     "ElectronBrandingOptions": {
       "additionalProperties": false,
+      "description": "Electron distributables branding options.",
       "properties": {
-        "projectName": {
+        "productName": {
           "type": "string"
         },
-        "productName": {
+        "projectName": {
           "type": "string"
         }
       },
@@ -1179,6 +1241,9 @@
             {
               "$ref": "#/definitions/CustomPublishOptions"
             },
+            {
+              "$ref": "#/definitions/KeygenOptions"
+            },
             {
               "$ref": "#/definitions/SnapStoreOptions"
             },
@@ -1203,6 +1268,9 @@
                   {
                     "$ref": "#/definitions/CustomPublishOptions"
                   },
+                  {
+                    "$ref": "#/definitions/KeygenOptions"
+                  },
                   {
                     "$ref": "#/definitions/SnapStoreOptions"
                   },
@@ -1445,6 +1513,76 @@
       ],
       "type": "object"
     },
+    "KeygenOptions": {
+      "additionalProperties": false,
+      "description": "Keygen options.\nhttps://keygen.sh/\nDefine `KEYGEN_TOKEN` environment variable.",
+      "properties": {
+        "account": {
+          "description": "Keygen account's UUID",
+          "type": "string"
+        },
+        "channel": {
+          "default": "stable",
+          "description": "The channel.",
+          "type": [
+            "null",
+            "string"
+          ]
+        },
+        "platform": {
+          "description": "The target Platform. Is set programmatically explicitly during publishing.",
+          "type": [
+            "null",
+            "string"
+          ]
+        },
+        "product": {
+          "description": "Keygen product's UUID",
+          "type": "string"
+        },
+        "provider": {
+          "description": "The provider. Must be `keygen`.",
+          "enum": [
+            "keygen"
+          ],
+          "type": "string"
+        },
+        "publishAutoUpdate": {
+          "default": true,
+          "description": "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
+          "type": "boolean"
+        },
+        "publisherName": {
+          "anyOf": [
+            {
+              "items": {
+                "type": "string"
+              },
+              "type": "array"
+            },
+            {
+              "type": "null"
+            }
+          ]
+        },
+        "requestHeaders": {
+          "$ref": "#/definitions/OutgoingHttpHeaders",
+          "description": "Any custom request headers"
+        },
+        "updaterCacheDirName": {
+          "type": [
+            "null",
+            "string"
+          ]
+        }
+      },
+      "required": [
+        "account",
+        "product",
+        "provider"
+      ],
+      "type": "object"
+    },
     "LinuxConfiguration": {
       "additionalProperties": false,
       "properties": {
@@ -1744,6 +1882,9 @@
             {
               "$ref": "#/definitions/CustomPublishOptions"
             },
+            {
+              "$ref": "#/definitions/KeygenOptions"
+            },
             {
               "$ref": "#/definitions/SnapStoreOptions"
             },
@@ -1768,6 +1909,9 @@
                   {
                     "$ref": "#/definitions/CustomPublishOptions"
                   },
+                  {
+                    "$ref": "#/definitions/KeygenOptions"
+                  },
                   {
                     "$ref": "#/definitions/SnapStoreOptions"
                   },
@@ -1990,6 +2134,9 @@
             {
               "$ref": "#/definitions/CustomPublishOptions"
             },
+            {
+              "$ref": "#/definitions/KeygenOptions"
+            },
             {
               "$ref": "#/definitions/SnapStoreOptions"
             },
@@ -2014,6 +2161,9 @@
                   {
                     "$ref": "#/definitions/CustomPublishOptions"
                   },
+                  {
+                    "$ref": "#/definitions/KeygenOptions"
+                  },
                   {
                     "$ref": "#/definitions/SnapStoreOptions"
                   },
@@ -2478,6 +2628,9 @@
             {
               "$ref": "#/definitions/CustomPublishOptions"
             },
+            {
+              "$ref": "#/definitions/KeygenOptions"
+            },
             {
               "$ref": "#/definitions/SnapStoreOptions"
             },
@@ -2502,6 +2655,9 @@
                   {
                     "$ref": "#/definitions/CustomPublishOptions"
                   },
+                  {
+                    "$ref": "#/definitions/KeygenOptions"
+                  },
                   {
                     "$ref": "#/definitions/SnapStoreOptions"
                   },
@@ -2622,11 +2778,11 @@
           "description": "The target package type: list of `default`, `dmg`, `mas`, `mas-dev`, `pkg`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir`. Defaults to `default` (dmg and zip for Squirrel.Mac)."
         },
         "timestamp": {
+          "description": "Specify the URL of the timestamp authority server",
           "type": [
             "null",
             "string"
-          ],
-          "description": "Specify the URL of the timestamp authority server"
+          ]
         },
         "type": {
           "anyOf": [
@@ -3077,6 +3233,9 @@
             {
               "$ref": "#/definitions/CustomPublishOptions"
             },
+            {
+              "$ref": "#/definitions/KeygenOptions"
+            },
             {
               "$ref": "#/definitions/SnapStoreOptions"
             },
@@ -3101,6 +3260,9 @@
                   {
                     "$ref": "#/definitions/CustomPublishOptions"
                   },
+                  {
+                    "$ref": "#/definitions/KeygenOptions"
+                  },
                   {
                     "$ref": "#/definitions/SnapStoreOptions"
                   },
@@ -3221,11 +3383,11 @@
           "description": "The target package type: list of `default`, `dmg`, `mas`, `mas-dev`, `pkg`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir`. Defaults to `default` (dmg and zip for Squirrel.Mac)."
         },
         "timestamp": {
+          "description": "Specify the URL of the timestamp authority server",
           "type": [
             "null",
             "string"
-          ],
-          "description": "Specify the URL of the timestamp authority server"
+          ]
         },
         "type": {
           "anyOf": [
@@ -3278,6 +3440,20 @@
     "MsiOptions": {
       "additionalProperties": false,
       "properties": {
+        "additionalWixArgs": {
+          "anyOf": [
+            {
+              "items": {
+                "type": "string"
+              },
+              "type": "array"
+            },
+            {
+              "type": "null"
+            }
+          ],
+          "description": "Any additional arguments to be passed to the WiX installer compiler, such as `[\"-ext\", \"WixUtilExtension\"]`"
+        },
         "artifactName": {
           "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
           "type": [
@@ -3337,6 +3513,9 @@
             {
               "$ref": "#/definitions/CustomPublishOptions"
             },
+            {
+              "$ref": "#/definitions/KeygenOptions"
+            },
             {
               "$ref": "#/definitions/SnapStoreOptions"
             },
@@ -3361,6 +3540,9 @@
                   {
                     "$ref": "#/definitions/CustomPublishOptions"
                   },
+                  {
+                    "$ref": "#/definitions/KeygenOptions"
+                  },
                   {
                     "$ref": "#/definitions/SnapStoreOptions"
                   },
@@ -3402,13 +3584,6 @@
           "default": true,
           "description": "If `warningsAsErrors` is `true` (default): treat warnings as errors. If `warningsAsErrors` is `false`: allow warnings.",
           "type": "boolean"
-        },
-        "additionalWixArgs": {
-          "description": "Any additional arguments to be passed to the WiX installer compiler, such as `[\"-ext\", \"WixUtilExtension\"]`",
-          "type": [
-            "null",
-            "array"
-          ]
         }
       },
       "type": "object"
@@ -3448,36 +3623,21 @@
           "type": "boolean"
         },
         "customNsisBinary": {
-          "description": "Allows providing the URL configuration for `makensis`.",
-          "type": [
-            "null",
-            "object"
-          ],
-          "properties": {
-            "url": {
-              "description": "URL to download from",
-              "type": "string"
-            },
-            "checksum": {
-              "description": "SHA256 to validate downloaded `makensis`",
-              "type": [
-                "null",
-                "string"
-              ]
+          "anyOf": [
+            {
+              "$ref": "#/definitions/CustomNsisBinary"
             },
-            "version": {
-              "description": "Version of `makensis` (used for caching)",
-              "type": [
-                "null",
-                "string"
-              ]
+            {
+              "type": "null"
             }
-          }
+          ]
         },
         "debugLogging": {
-          "default": false,
-          "description": "Enables `LogText` to be used in `nsh` scripts",
-          "type": "boolean"
+          "description": "Whether or not to enable NSIS logging for debugging.\nNote: Requires a debug-enabled NSIS build.\nelectron-builder's included `makensis` only supports building debug-enabled NSIS installers on Windows currently\nhttps://github.com/electron-userland/electron-builder/issues/5119#issuecomment-811353612",
+          "type": [
+            "null",
+            "boolean"
+          ]
         },
         "deleteAppDataOnUninstall": {
           "default": false,
@@ -3641,6 +3801,9 @@
             {
               "$ref": "#/definitions/CustomPublishOptions"
             },
+            {
+              "$ref": "#/definitions/KeygenOptions"
+            },
             {
               "$ref": "#/definitions/SnapStoreOptions"
             },
@@ -3665,6 +3828,9 @@
                   {
                     "$ref": "#/definitions/CustomPublishOptions"
                   },
+                  {
+                    "$ref": "#/definitions/KeygenOptions"
+                  },
                   {
                     "$ref": "#/definitions/SnapStoreOptions"
                   },
@@ -3781,36 +3947,21 @@
           "type": "boolean"
         },
         "customNsisBinary": {
-          "description": "Allows providing the URL configuration for `makensis`.",
-          "type": [
-            "null",
-            "object"
-          ],
-          "properties": {
-            "url": {
-              "description": "URL to download from",
-              "type": "string"
-            },
-            "checksum": {
-              "description": "SHA256 to validate downloaded `makensis`",
-              "type": [
-                "null",
-                "string"
-              ]
+          "anyOf": [
+            {
+              "$ref": "#/definitions/CustomNsisBinary"
             },
-            "version": {
-              "description": "Version of `makensis` (used for caching)",
-              "type": [
-                "null",
-                "string"
-              ]
+            {
+              "type": "null"
             }
-          }
+          ]
         },
         "debugLogging": {
-          "default": false,
-          "description": "Enables `LogText` to be used in `nsh` scripts",
-          "type": "boolean"
+          "description": "Whether or not to enable NSIS logging for debugging.\nNote: Requires a debug-enabled NSIS build.\nelectron-builder's included `makensis` only supports building debug-enabled NSIS installers on Windows currently\nhttps://github.com/electron-userland/electron-builder/issues/5119#issuecomment-811353612",
+          "type": [
+            "null",
+            "boolean"
+          ]
         },
         "deleteAppDataOnUninstall": {
           "default": false,
@@ -3974,6 +4125,9 @@
             {
               "$ref": "#/definitions/CustomPublishOptions"
             },
+            {
+              "$ref": "#/definitions/KeygenOptions"
+            },
             {
               "$ref": "#/definitions/SnapStoreOptions"
             },
@@ -3998,6 +4152,9 @@
                   {
                     "$ref": "#/definitions/CustomPublishOptions"
                   },
+                  {
+                    "$ref": "#/definitions/KeygenOptions"
+                  },
                   {
                     "$ref": "#/definitions/SnapStoreOptions"
                   },
@@ -4289,6 +4446,9 @@
             {
               "$ref": "#/definitions/CustomPublishOptions"
             },
+            {
+              "$ref": "#/definitions/KeygenOptions"
+            },
             {
               "$ref": "#/definitions/SnapStoreOptions"
             },
@@ -4313,6 +4473,9 @@
                   {
                     "$ref": "#/definitions/CustomPublishOptions"
                   },
+                  {
+                    "$ref": "#/definitions/KeygenOptions"
+                  },
                   {
                     "$ref": "#/definitions/SnapStoreOptions"
                   },
@@ -4373,6 +4536,23 @@
             "string"
           ]
         },
+        "customNsisBinary": {
+          "anyOf": [
+            {
+              "$ref": "#/definitions/CustomNsisBinary"
+            },
+            {
+              "type": "null"
+            }
+          ]
+        },
+        "debugLogging": {
+          "description": "Whether or not to enable NSIS logging for debugging.\nNote: Requires a debug-enabled NSIS build.\nelectron-builder's included `makensis` only supports building debug-enabled NSIS installers on Windows currently\nhttps://github.com/electron-userland/electron-builder/issues/5119#issuecomment-811353612",
+          "type": [
+            "null",
+            "boolean"
+          ]
+        },
         "guid": {
           "description": "See [GUID vs Application Name](../configuration/nsis#guid-vs-application-name).",
           "type": [
@@ -4400,6 +4580,9 @@
             {
               "$ref": "#/definitions/CustomPublishOptions"
             },
+            {
+              "$ref": "#/definitions/KeygenOptions"
+            },
             {
               "$ref": "#/definitions/SnapStoreOptions"
             },
@@ -4424,6 +4607,9 @@
                   {
                     "$ref": "#/definitions/CustomPublishOptions"
                   },
+                  {
+                    "$ref": "#/definitions/KeygenOptions"
+                  },
                   {
                     "$ref": "#/definitions/SnapStoreOptions"
                   },
@@ -4465,7 +4651,7 @@
           "type": "boolean"
         },
         "unpackDirName": {
-          "description": "The unpack directory for the portable app resources.\nIf set to a string, it will be the name in [TEMP](https://www.askvg.com/where-does-windows-store-temporary-files-and-how-to-change-temp-folder-location/) directory.\nIf set explicitly to `false`, it will use the Windows temp directory ($PLUGINSDIR) that is unique to each launch of the portable application.\nDefaults to [uuid](https://github.com/segmentio/ksuid) of build (changed on each build of portable executable).",
+          "description": "The unpack directory for the portable app resources.\n\nIf set to a string, it will be the name in [TEMP](https://www.askvg.com/where-does-windows-store-temporary-files-and-how-to-change-temp-folder-location/) directory\nIf set explicitly to `false`, it will use the Windows temp directory ($PLUGINSDIR) that is unique to each launch of the portable application.\n\nDefaults to [uuid](https://github.com/segmentio/ksuid) of build (changed on each build of portable executable).",
           "type": [
             "string",
             "boolean"
@@ -4522,6 +4708,7 @@
         "custom",
         "generic",
         "github",
+        "keygen",
         "s3",
         "snapStore",
         "spaces"
@@ -4928,6 +5115,9 @@
             {
               "$ref": "#/definitions/CustomPublishOptions"
             },
+            {
+              "$ref": "#/definitions/KeygenOptions"
+            },
             {
               "$ref": "#/definitions/SnapStoreOptions"
             },
@@ -4952,6 +5142,9 @@
                   {
                     "$ref": "#/definitions/CustomPublishOptions"
                   },
+                  {
+                    "$ref": "#/definitions/KeygenOptions"
+                  },
                   {
                     "$ref": "#/definitions/SnapStoreOptions"
                   },
@@ -5237,6 +5430,9 @@
             {
               "$ref": "#/definitions/CustomPublishOptions"
             },
+            {
+              "$ref": "#/definitions/KeygenOptions"
+            },
             {
               "$ref": "#/definitions/SnapStoreOptions"
             },
@@ -5261,6 +5457,9 @@
                   {
                     "$ref": "#/definitions/CustomPublishOptions"
                   },
+                  {
+                    "$ref": "#/definitions/KeygenOptions"
+                  },
                   {
                     "$ref": "#/definitions/SnapStoreOptions"
                   },
@@ -5628,6 +5827,9 @@
             {
               "$ref": "#/definitions/CustomPublishOptions"
             },
+            {
+              "$ref": "#/definitions/KeygenOptions"
+            },
             {
               "$ref": "#/definitions/SnapStoreOptions"
             },
@@ -5652,6 +5854,9 @@
                   {
                     "$ref": "#/definitions/CustomPublishOptions"
                   },
+                  {
+                    "$ref": "#/definitions/KeygenOptions"
+                  },
                   {
                     "$ref": "#/definitions/SnapStoreOptions"
                   },
@@ -6071,6 +6276,10 @@
       ],
       "description": "macOS DMG options."
     },
+    "electronBranding": {
+      "$ref": "#/definitions/ElectronBrandingOptions",
+      "description": "The branding used by Electron's distributables. This is needed if a fork has modified Electron's BRANDING.json file."
+    },
     "electronCompile": {
       "description": "Whether to use [electron-compile](http://github.com/electron/electron-compile) to compile app. Defaults to `true` if `electron-compile` in the dependencies. And `false` if in the `devDependencies` or doesn't specified.",
       "type": "boolean"
@@ -6086,10 +6295,6 @@
       ],
       "description": "Returns the path to custom Electron build (e.g. `~/electron/out/R`). Zip files must follow the pattern `electron-v${version}-${platformName}-${arch}.zip`, otherwise it will be assumed to be an unpacked Electron app directory"
     },
-    "electronBranding": {
-      "$ref": "#/definitions/ElectronBrandingOptions",
-      "description": "The branding used by Electron's distributables. This is needed if a fork has modified Electron's BRANDING.json file."
-    },
     "electronDownload": {
       "$ref": "#/definitions/ElectronDownloadOptions",
       "description": "The [electron-download](https://github.com/electron-userland/electron-download#usage) options."
@@ -6278,7 +6483,7 @@
     },
     "includeSubNodeModules": {
       "default": false,
-      "description": "Whether to include *all* of the submodules 'node_modules' directories.",
+      "description": "Whether to include *all* of the submodules node_modules directories",
       "type": "boolean"
     },
     "launchUiVersion": {
@@ -6507,6 +6712,9 @@
         {
           "$ref": "#/definitions/CustomPublishOptions"
         },
+        {
+          "$ref": "#/definitions/KeygenOptions"
+        },
         {
           "$ref": "#/definitions/SnapStoreOptions"
         },
@@ -6531,6 +6739,9 @@
               {
                 "$ref": "#/definitions/CustomPublishOptions"
               },
+              {
+                "$ref": "#/definitions/KeygenOptions"
+              },
               {
                 "$ref": "#/definitions/SnapStoreOptions"
               },
@@ -6558,14 +6769,14 @@
       "description": "Whether to build using Electron Build Service if target not supported on current OS.",
       "type": "boolean"
     },
-    "removePackageScripts": {
+    "removePackageKeywords": {
       "default": true,
-      "description": "Whether to remove `scripts` field from `package.json` files.",
+      "description": "Whether to remove `keywords` field from `package.json` files.",
       "type": "boolean"
     },
-    "removePackageKeywords": {
+    "removePackageScripts": {
       "default": true,
-      "description": "Whether to remove `keywords` field from `package.json` files.",
+      "description": "Whether to remove `scripts` field from `package.json` files.",
       "type": "boolean"
     },
     "rpm": {
